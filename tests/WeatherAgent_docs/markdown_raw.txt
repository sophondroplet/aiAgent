'[ Skip to content ](https://ai.pydantic.dev/examples/weather-agent/<#running-the-example>)\n[ ![logo](https://ai.pydantic.dev/img/logo-white.svg) ](https://ai.pydantic.dev/examples/weather-agent/<../..> "PydanticAI")\nPydanticAI \nWeather agent \nType to start searching\n[ pydantic/pydantic-ai  ](https://ai.pydantic.dev/examples/weather-agent/<https:/github.com/pydantic/pydantic-ai> "Go to repository")\n[ ![logo](https://ai.pydantic.dev/img/logo-white.svg) ](https://ai.pydantic.dev/examples/weather-agent/<../..> "PydanticAI") PydanticAI \n[ pydantic/pydantic-ai  ](https://ai.pydantic.dev/examples/weather-agent/<https:/github.com/pydantic/pydantic-ai> "Go to repository")\n  * [ Introduction  ](https://ai.pydantic.dev/examples/weather-agent/<../..>)\n  * [ Installation  ](https://ai.pydantic.dev/examples/weather-agent/install/>)\n  * [ Getting Help  ](https://ai.pydantic.dev/examples/weather-agent/help/>)\n  * [ Contributing  ](https://ai.pydantic.dev/examples/weather-agent/contributing/>)\n  * [ Troubleshooting  ](https://ai.pydantic.dev/examples/weather-agent/troubleshooting/>)\n  * Documentation  Documentation \n    * [ Agents  ](https://ai.pydantic.dev/examples/weather-agent/agents/>)\n    * [ Models  ](https://ai.pydantic.dev/examples/weather-agent/models/>)\n    * [ Dependencies  ](https://ai.pydantic.dev/examples/weather-agent/dependencies/>)\n    * [ Function Tools  ](https://ai.pydantic.dev/examples/weather-agent/tools/>)\n    * [ Common Tools  ](https://ai.pydantic.dev/examples/weather-agent/common_tools/>)\n    * [ Results  ](https://ai.pydantic.dev/examples/weather-agent/results/>)\n    * [ Messages and chat history  ](https://ai.pydantic.dev/examples/weather-agent/message-history/>)\n    * [ Testing and Evals  ](https://ai.pydantic.dev/examples/weather-agent/testing-evals/>)\n    * [ Debugging and Monitoring  ](https://ai.pydantic.dev/examples/weather-agent/logfire/>)\n    * [ Multi-agent Applications  ](https://ai.pydantic.dev/examples/weather-agent/multi-agent-applications/>)\n    * [ Graphs  ](https://ai.pydantic.dev/examples/weather-agent/graph/>)\n    * [ Image and Audio Input  ](https://ai.pydantic.dev/examples/weather-agent/input/>)\n  * [ Examples  ](https://ai.pydantic.dev/examples/weather-agent/<../>)\nExamples \n    * [ Pydantic Model  ](https://ai.pydantic.dev/examples/weather-agent/<../pydantic-model/>)\n    * Weather agent  [ Weather agent  ](https://ai.pydantic.dev/examples/weather-agent/<./>) Table of contents \n      * [ Running the Example  ](https://ai.pydantic.dev/examples/weather-agent/<#running-the-example>)\n      * [ Example Code  ](https://ai.pydantic.dev/examples/weather-agent/<#example-code>)\n      * [ Running the UI  ](https://ai.pydantic.dev/examples/weather-agent/<#running-the-ui>)\n      * [ UI Code  ](https://ai.pydantic.dev/examples/weather-agent/<#ui-code>)\n    * [ Bank support  ](https://ai.pydantic.dev/examples/weather-agent/<../bank-support/>)\n    * [ SQL Generation  ](https://ai.pydantic.dev/examples/weather-agent/<../sql-gen/>)\n    * [ Flight booking  ](https://ai.pydantic.dev/examples/weather-agent/<../flight-booking/>)\n    * [ RAG  ](https://ai.pydantic.dev/examples/weather-agent/<../rag/>)\n    * [ Stream markdown  ](https://ai.pydantic.dev/examples/weather-agent/<../stream-markdown/>)\n    * [ Stream whales  ](https://ai.pydantic.dev/examples/weather-agent/<../stream-whales/>)\n    * [ Chat App with FastAPI  ](https://ai.pydantic.dev/examples/weather-agent/<../chat-app/>)\n    * [ Question Graph  ](https://ai.pydantic.dev/examples/weather-agent/<../question-graph/>)\n  * API Reference  API Reference \n    * [ pydantic_ai.agent  ](https://ai.pydantic.dev/examples/weather-agent/api/agent/>)\n    * [ pydantic_ai.tools  ](https://ai.pydantic.dev/examples/weather-agent/api/tools/>)\n    * [ pydantic_ai.common_tools  ](https://ai.pydantic.dev/examples/weather-agent/api/common_tools/>)\n    * [ pydantic_ai.result  ](https://ai.pydantic.dev/examples/weather-agent/api/result/>)\n    * [ pydantic_ai.messages  ](https://ai.pydantic.dev/examples/weather-agent/api/messages/>)\n    * [ pydantic_ai.exceptions  ](https://ai.pydantic.dev/examples/weather-agent/api/exceptions/>)\n    * [ pydantic_ai.settings  ](https://ai.pydantic.dev/examples/weather-agent/api/settings/>)\n    * [ pydantic_ai.usage  ](https://ai.pydantic.dev/examples/weather-agent/api/usage/>)\n    * [ pydantic_ai.format_as_xml  ](https://ai.pydantic.dev/examples/weather-agent/api/format_as_xml/>)\n    * [ pydantic_ai.models  ](https://ai.pydantic.dev/examples/weather-agent/api/models/base/>)\n    * [ pydantic_ai.models.openai  ](https://ai.pydantic.dev/examples/weather-agent/api/models/openai/>)\n    * [ pydantic_ai.models.anthropic  ](https://ai.pydantic.dev/examples/weather-agent/api/models/anthropic/>)\n    * [ pydantic_ai.models.cohere  ](https://ai.pydantic.dev/examples/weather-agent/api/models/cohere/>)\n    * [ pydantic_ai.models.gemini  ](https://ai.pydantic.dev/examples/weather-agent/api/models/gemini/>)\n    * [ pydantic_ai.models.vertexai  ](https://ai.pydantic.dev/examples/weather-agent/api/models/vertexai/>)\n    * [ pydantic_ai.models.groq  ](https://ai.pydantic.dev/examples/weather-agent/api/models/groq/>)\n    * [ pydantic_ai.models.mistral  ](https://ai.pydantic.dev/examples/weather-agent/api/models/mistral/>)\n    * [ pydantic_ai.models.test  ](https://ai.pydantic.dev/examples/weather-agent/api/models/test/>)\n    * [ pydantic_ai.models.function  ](https://ai.pydantic.dev/examples/weather-agent/api/models/function/>)\n    * [ pydantic_ai.models.fallback  ](https://ai.pydantic.dev/examples/weather-agent/api/models/fallback/>)\n    * [ pydantic_graph  ](https://ai.pydantic.dev/examples/weather-agent/api/pydantic_graph/graph/>)\n    * [ pydantic_graph.nodes  ](https://ai.pydantic.dev/examples/weather-agent/api/pydantic_graph/nodes/>)\n    * [ pydantic_graph.state  ](https://ai.pydantic.dev/examples/weather-agent/api/pydantic_graph/state/>)\n    * [ pydantic_graph.mermaid  ](https://ai.pydantic.dev/examples/weather-agent/api/pydantic_graph/mermaid/>)\n    * [ pydantic_graph.exceptions  ](https://ai.pydantic.dev/examples/weather-agent/api/pydantic_graph/exceptions/>)\n\n\nTable of contents \n  * [ Running the Example  ](https://ai.pydantic.dev/examples/weather-agent/<#running-the-example>)\n  * [ Example Code  ](https://ai.pydantic.dev/examples/weather-agent/<#example-code>)\n  * [ Running the UI  ](https://ai.pydantic.dev/examples/weather-agent/<#running-the-ui>)\n  * [ UI Code  ](https://ai.pydantic.dev/examples/weather-agent/<#ui-code>)\n\n\n  1. [ Introduction  ](https://ai.pydantic.dev/examples/weather-agent/<../..>)\n  2. [ Examples  ](https://ai.pydantic.dev/examples/weather-agent/<../>)\n\n\nVersion\nShowing documentation for the latest release [v0.0.31 2025-03-03](https://ai.pydantic.dev/examples/weather-agent/<https:/github.com/pydantic/pydantic-ai/releases/tag/v0.0.31>).\n# Weather agent\nExample of PydanticAI with multiple tools which the LLM needs to call in turn to answer a question.\nDemonstrates:\n  * [tools](https://ai.pydantic.dev/examples/weather-agent/tools/>)\n  * [agent dependencies](https://ai.pydantic.dev/examples/weather-agent/dependencies/>)\n  * [streaming text responses](https://ai.pydantic.dev/examples/weather-agent/results/#streaming-text>)\n  * Building a [Gradio](https://ai.pydantic.dev/examples/weather-agent/<https:/www.gradio.app/>) UI for the agent\n\n\nIn this case the idea is a "weather" agent — the user can ask for the weather in multiple locations, the agent will use the `get_lat_lng` tool to get the latitude and longitude of the locations, then use the `get_weather` tool to get the weather for those locations.\n## Running the Example\nTo run this example properly, you might want to add two extra API keys **(Note if either key is missing, the code will fall back to dummy data, so they\'re not required)** :\n  * A weather API key from [tomorrow.io](https://ai.pydantic.dev/examples/weather-agent/<https:/www.tomorrow.io/weather-api/>) set via `WEATHER_API_KEY`\n  * A geocoding API key from [geocode.maps.co](https://ai.pydantic.dev/examples/weather-agent/<https:/geocode.maps.co/>) set via `GEO_API_KEY`\n\n\nWith [dependencies installed and environment variables set](https://ai.pydantic.dev/examples/weather-agent/<../#usage>), run:\n[pip](https://ai.pydantic.dev/examples/weather-agent/<#__tabbed_1_1>)[uv](https://ai.pydantic.dev/examples/weather-agent/<#__tabbed_1_2>)\n```\npython-mpydantic_ai_examples.weather_agent\n\n```\n\n```\nuvrun-mpydantic_ai_examples.weather_agent\n\n```\n\n## Example Code\npydantic_ai_examples/weather_agent.py```\nfrom__future__import annotations as _annotations\nimportasyncio\nimportos\nfromdataclassesimport dataclass\nfromtypingimport Any\nimportlogfire\nfromdevtoolsimport debug\nfromhttpximport AsyncClient\nfrompydantic_aiimport Agent, ModelRetry, RunContext\n# \'if-token-present\' means nothing will be sent (and the example will work) if you don\'t have logfire configured\nlogfire.configure(send_to_logfire=\'if-token-present\')\n\n@dataclass\nclassDeps:\n  client: AsyncClient\n  weather_api_key: str | None\n  geo_api_key: str | None\n\nweather_agent = Agent(\n  \'openai:gpt-4o\',\n  # \'Be concise, reply with one sentence.\' is enough for some models (like openai) to use\n  # the below tools appropriately, but others like anthropic and gemini require a bit more direction.\n  system_prompt=(\n    \'Be concise, reply with one sentence.\'\n    \'Use the `get_lat_lng` tool to get the latitude and longitude of the locations, \'\n    \'then use the `get_weather` tool to get the weather.\'\n  ),\n  deps_type=Deps,\n  retries=2,\n)\n\n@weather_agent.tool\nasync defget_lat_lng(\n  ctx: RunContext[Deps], location_description: str\n) -> dict[str, float]:\n"""Get the latitude and longitude of a location.\n  Args:\n    ctx: The context.\n    location_description: A description of a location.\n  """\n  if ctx.deps.geo_api_key is None:\n    # if no API key is provided, return a dummy response (London)\n    return {\'lat\': 51.1, \'lng\': -0.1}\n  params = {\n    \'q\': location_description,\n    \'api_key\': ctx.deps.geo_api_key,\n  }\n  with logfire.span(\'calling geocode API\', params=params) as span:\n    r = await ctx.deps.client.get(\'https://geocode.maps.co/search\', params=params)\n    r.raise_for_status()\n    data = r.json()\n    span.set_attribute(\'response\', data)\n  if data:\n    return {\'lat\': data[0][\'lat\'], \'lng\': data[0][\'lon\']}\n  else:\n    raise ModelRetry(\'Could not find the location\')\n\n@weather_agent.tool\nasync defget_weather(ctx: RunContext[Deps], lat: float, lng: float) -> dict[str, Any]:\n"""Get the weather at a location.\n  Args:\n    ctx: The context.\n    lat: Latitude of the location.\n    lng: Longitude of the location.\n  """\n  if ctx.deps.weather_api_key is None:\n    # if no API key is provided, return a dummy response\n    return {\'temperature\': \'21 °C\', \'description\': \'Sunny\'}\n  params = {\n    \'apikey\': ctx.deps.weather_api_key,\n    \'location\': f\'{lat},{lng}\',\n    \'units\': \'metric\',\n  }\n  with logfire.span(\'calling weather API\', params=params) as span:\n    r = await ctx.deps.client.get(\n      \'https://api.tomorrow.io/v4/weather/realtime\', params=params\n    )\n    r.raise_for_status()\n    data = r.json()\n    span.set_attribute(\'response\', data)\n  values = data[\'data\'][\'values\']\n  # https://docs.tomorrow.io/reference/data-layers-weather-codes\n  code_lookup = {\n    1000: \'Clear, Sunny\',\n    1100: \'Mostly Clear\',\n    1101: \'Partly Cloudy\',\n    1102: \'Mostly Cloudy\',\n    1001: \'Cloudy\',\n    2000: \'Fog\',\n    2100: \'Light Fog\',\n    4000: \'Drizzle\',\n    4001: \'Rain\',\n    4200: \'Light Rain\',\n    4201: \'Heavy Rain\',\n    5000: \'Snow\',\n    5001: \'Flurries\',\n    5100: \'Light Snow\',\n    5101: \'Heavy Snow\',\n    6000: \'Freezing Drizzle\',\n    6001: \'Freezing Rain\',\n    6200: \'Light Freezing Rain\',\n    6201: \'Heavy Freezing Rain\',\n    7000: \'Ice Pellets\',\n    7101: \'Heavy Ice Pellets\',\n    7102: \'Light Ice Pellets\',\n    8000: \'Thunderstorm\',\n  }\n  return {\n    \'temperature\': f\'{values["temperatureApparent"]:0.0f}°C\',\n    \'description\': code_lookup.get(values[\'weatherCode\'], \'Unknown\'),\n  }\n\nasync defmain():\n  async with AsyncClient() as client:\n    # create a free API key at https://www.tomorrow.io/weather-api/\n    weather_api_key = os.getenv(\'WEATHER_API_KEY\')\n    # create a free API key at https://geocode.maps.co/\n    geo_api_key = os.getenv(\'GEO_API_KEY\')\n    deps = Deps(\n      client=client, weather_api_key=weather_api_key, geo_api_key=geo_api_key\n    )\n    result = await weather_agent.run(\n      \'What is the weather like in London and in Wiltshire?\', deps=deps\n    )\n    debug(result)\n    print(\'Response:\', result.data)\n\nif __name__ == \'__main__\':\n  asyncio.run(main())\n\n```\n\n## Running the UI\nYou can build multi-turn chat applications for your agent with [Gradio](https://ai.pydantic.dev/examples/weather-agent/<https:/www.gradio.app/>), a framework for building AI web applications entirely in python. Gradio comes with built-in chat components and agent support so the entire UI will be implemented in a single python file!\nHere\'s what the UI looks like for the weather agent:\nNote, to run the UI, you\'ll need Python 3.10+.\n```\npipinstallgradio>=5.9.0\npython/uv-run-mpydantic_ai_examples.weather_agent_gradio\n\n```\n\n## UI Code\npydantic_ai_examples/weather_agent_gradio.py```\nfrom__future__import annotations as _annotations\nimportjson\nimportos\nfromhttpximport AsyncClient\nfrompydantic_ai.messagesimport ToolCallPart, ToolReturnPart\nfrompydantic_ai_examples.weather_agentimport Deps, weather_agent\ntry:\n  importgradioasgr\nexcept ImportError as e:\n  raise ImportError(\n    \'Please install gradio with `pip install gradio`. You must use python>=3.10.\'\n  ) frome\nTOOL_TO_DISPLAY_NAME = {\'get_lat_lng\': \'Geocoding API\', \'get_weather\': \'Weather API\'}\nclient = AsyncClient()\nweather_api_key = os.getenv(\'WEATHER_API_KEY\')\n# create a free API key at https://geocode.maps.co/\ngeo_api_key = os.getenv(\'GEO_API_KEY\')\ndeps = Deps(client=client, weather_api_key=weather_api_key, geo_api_key=geo_api_key)\n\nasync defstream_from_agent(prompt: str, chatbot: list[dict], past_messages: list):\n  chatbot.append({\'role\': \'user\', \'content\': prompt})\n  yield gr.Textbox(interactive=False, value=\'\'), chatbot, gr.skip()\n  async with weather_agent.run_stream(\n    prompt, deps=deps, message_history=past_messages\n  ) as result:\n    for message in result.new_messages():\n      for call in message.parts:\n        if isinstance(call, ToolCallPart):\n          call_args = (\n            call.args.args_json\n            if hasattr(call.args, \'args_json\')\n            else json.dumps(call.args.args_dict)\n          )\n          metadata = {\n            \'title\': f\'🛠️ Using {{looks like for the weather agent:\nNote, to run the UI, you\'ll need Python 3.10+.\n```\npipinstallgradio>=5.9.0\npython/uv-run-mpydantic_ai_examples.weather_agent_gradio\n\n```\n\n## UI Code\npydantic_ai_examples/weather_agent_gradio.py```\nfrom__future__import annotations as _annotations\nimportjson\nimportos\nfromhttpximport AsyncClient\nfrompydantic_ai.messagesimport ToolCallPart, ToolReturnPart\nfrompydantic_ai_examples.weather_agentimport Deps, weather_agent\ntry:\n  importgradioasgr\nexcept ImportError as e:\n  raise ImportError(\n    \'Please install gradio with `pip install gradio`. You must use python>=3.10.\'\n  ) frome\nTOOL_TO_DISPLAY_NAME = {\'get_lat_lng\': \'Geocoding API\', \'get_weather\': \'Weather API\'}\nclient = AsyncClient()\nweather_api_key = os.getenv(\'WEATHER_API_KEY\')\n# create a free API key at https://geocode.maps.co/\ngeo_api_key = os.getenv(\'GEO_API_KEY\')\ndeps = Deps(client=client, weather_api_key=weather_api_key, geo_api_key=geo_api_key)\n\nasync defstream_from_agent(prompt: str, chatbot: list[dict], past_messages: list):\n  chatbot.append({\'role\': \'user\', \'content\': prompt})\n  yield gr.Textbox(interactive=False, value=\'\'), chatbot, gr.skip()\n  async with weather_agent.run_stream(\n    prompt, deps=deps, message_history=past_messages\n  ) as result:\n    for message in result.new_messages():\n      for call in message.parts:\n        if isinstance(call, ToolCallPart):\n          call_args = (\n            call.args.args_json\n            if hasattr(call.args, \'args_json\')\n            else json.dumps(call.args.args_dict)\n          )\n          metadata = {\n            \'title\': f\'🛠️ Using {TcClient\nfrompydantic_ai.messagesimport ToolCallPart, ToolReturnPart\nfrompydantic_ai_examples.weather_agentimport Deps, weather_agent\ntry:\n  importgradioasgr\nexcept ImportError as e:\n  raise ImportError(\n    \'Please install gradio with `pip install gradio`. You must use python>=3.10.\'\n  ) frome\nTOOL_TO_DISPLAY_NAME = {\'get_lat_lng\': \'Geocoding API\', \'get_weather\': \'Weather API\'}\nclient = AsyncClient()\nweather_api_key = os.getenv(\'WEATHER_API_KEY\')\n# create a free API key at https://geocode.maps.co/\ngeo_api_key = os.getenv(\'GEO_API_KEY\')\ndeps = Deps(client=client, weather_api_key=weather_api_key, geo_api_key=geo_api_key)\n\nasync defstream_from_agent(prompt: str, chatbot: list[dict], past_messages: list):\n  chatbot.append({\'role\': \'user\', \'content\': prompt})\n  yield gr.Textbox(interactive=False, value=\'\'), chatbot, gr.skip()\n  async with weather_agent.run_stream(\n    prompt, deps=deps, message_history=past_messages\n  ) as result:\n    for message in result.new_messages():\n      for call in message.parts:\n        if isinstance(call, ToolCallPart):\n          call_args = (\n            call.args.args_json\n            if hasattr(call.args, \'args_json\')\n            else json.dumps(call.args.args_dict)\n          )\n          metadata = {\n            \'title\': f\'🛠️ Using {Tt_lat_lng\': \'Geocoding API\', \'get_weather\': \'Weather API\'}\nclient = AsyncClient()\nweather_api_key = os.getenv(\'WEATHER_API_KEY\')\n# create a free API key at https://geocode.maps.co/\ngeo_api_key = os.getenv(\'GEO_API_KEY\')\ndeps = Deps(client=client, weather_api_key=weather_api_key, geo_api_key=geo_api_key)\n\nasync defstream_from_agent(prompt: str, chatbot: list[dict], past_messages: list):\n  chatbot.append({\'role\': \'user\', \'content\': prompt})\n  yield gr.Textbox(interactive=False, value=\'\'), chatbot, gr.skip()\n  async with weather_agent.run_stream(\n    prompt, deps=deps, message_history=past_messages\n  ) as result:\n    for message in result.new_messages():\n      for call in message.parts:\n        if isinstance(call, ToolCallPart):\n          call_args = (\n            call.args.args_json\n            if hasattr(call.args, \'args_json\')\n            else json.dumps(call.args.args_dict)\n          )\n          metadata = {\n            \'title\': f\'🛠️ Using {TTOOL_TO_DISPLAY_NAME[call.tool_name]}\',\n          }\n          if call.tool_call_id is not None:\n            metadata[\'id\'] = {call.tool_call_id}\n          gr_message = {\n            \'role\': \'assistant\',\n            \'content\': \'Parameters: \' + call_args,\n            \'metadata\': metadata,\n          }\n          chatbot.append(gr_message)\n        if isinstance(call, ToolReturnPart):\n          for gr_message in chatbot:\n            if (\n              gr_message.get(\'metadata\', {}).get(\'id\', \'\')\n              == call.tool_call_id\n            ):\n              gr_message[\'content\'] += (\n                f\'\\nOutput: {json.dumps(call.content)}\'\n              )\n        yield gr.skip(), chatbot, gr.skip()\n    chatbot.append({\'role\': \'assistant\', \'content\': \'\'})\n    async for message in result.stream_text():\n      chatbot[-1][\'content\'] = message\n      yield gr.skip(), chatbot, gr.skip()\n    past_messages = result.all_messages()\n    yield gr.Textbox(interactive=True), gr.skip(), past_messages\n\nasync defhandle_retry(chatbot, past_messages: list, retry_data: gr.RetryData):\n  new_history = chatbot[: retry_data.index]\n  previous_prompt = chatbot[retry_data.index][\'content\']\n  past_messages = past_messages[: retry_data.index]\n  async for update in stream_from_agent(previous_prompt, new_history, past_messages):\n    yield update\n\ndefundo(chatbot, past_messages: list, undo_data: gr.UndoData):\n  new_history = chatbot[: undo_data.index]\n  past_messages = past_messages[: undo_data.index]\n  return chatbot[undo_data.index][\'content\'], new_history, past_messages\n\ndefselect_data(message: gr.SelectData) -> str:\n  return message.value[\'text\']\n\nwith gr.Blocks() as demo:\n  gr.HTML(\n"""\n<div style="display: flex; justify-content: center; align-items: center; gap: 2rem; padding: 1rem; width: 100%">\n  <img src="https://ai.pydantic.dev/img/logo-white.svg" style="max-width: 200px; height: auto">\n  <div>\n    <h1 style="man result.stream_text():\n      chatbot[-1][\'content\'] = message\n      yield gr.skip(), chatbot, gr.skip()\n    past_messages = result.all_messages()\n    yield gr.Textbox(interactive=True), gr.skip(), past_messages\n\nasync defhandle_retry(chatbot, past_messages: list, retry_data: gr.RetryData):\n  new_history = chatbot[: retry_data.index]\n  previous_prompt = chatbot[retry_data.index][\'content\']\n  past_messages = past_messages[: retry_data.index]\n  async for update in stream_from_agent(previous_prompt, new_history, past_messages):\n    yield update\n\ndefundo(chatbot, past_messages: list, undo_data: gr.UndoData):\n  new_history = chatbot[: undo_data.index]\n  past_messages = past_messages[: undo_data.index]\n  return chatbot[undo_data.index][\'content\'], new_history, past_messages\n\ndefselect_data(message: gr.SelectData) -> str:\n  return message.value[\'text\']\n\nwith gr.Blocks() as demo:\n  gr.HTML(\n"""\n<div style="display: flex; justify-content: center; align-items: center; gap: 2rem; padding: 1rem; width: 100%">\n  <img src="https://ai.pydantic.dev/img/logo-white.svg" style="max-width: 200px; height: auto">\n  <div>\n    <h1 style="maata.index]\n  previous_prompt = chatbot[retry_data.index][\'content\']\n  past_messages = past_messages[: retry_data.index]\n  async for update in stream_from_agent(previous_prompt, new_history, past_messages):\n    yield update\n\ndefundo(chatbot, past_messages: list, undo_data: gr.UndoData):\n  new_history = chatbot[: undo_data.index]\n  past_messages = past_messages[: undo_data.index]\n  return chatbot[undo_data.index][\'content\'], new_history, past_messages\n\ndefselect_data(message: gr.SelectData) -> str:\n  return message.value[\'text\']\n\nwith gr.Blocks() as demo:\n  gr.HTML(\n"""\n<div style="display: flex; justify-content: center; align-items: center; gap: 2rem; padding: 1rem; width: 100%">\n  <img src="https://ai.pydantic.dev/img/logo-white.svg" style="max-width: 200px; height: auto">\n  <div>\n    <h1 style="maevious_prompt, new_history, past_messages):\n    yield update\n\ndefundo(chatbot, past_messages: list, undo_data: gr.UndoData):\n  new_history = chatbot[: undo_data.index]\n  past_messages = past_messages[: undo_data.index]\n  return chatbot[undo_data.index][\'content\'], new_history, past_messages\n\ndefselect_data(message: gr.SelectData) -> str:\n  return message.value[\'text\']\n\nwith gr.Blocks() as demo:\n  gr.HTML(\n"""\n<div style="display: flex; justify-content: center; align-items: center; gap: 2rem; padding: 1rem; width: 100%">\n  <img src="https://ai.pydantic.dev/img/logo-white.svg" style="max-width: 200px; height: auto">\n  <div>\n    <h1 style="madex]\n  past_messages = past_messages[: undo_data.index]\n  return chatbot[undo_data.index][\'content\'], new_history, past_messages\n\ndefselect_data(message: gr.SelectData) -> str:\n  return message.value[\'text\']\n\nwith gr.Blocks() as demo:\n  gr.HTML(\n"""\n<div style="display: flex; justify-content: center; align-items: center; gap: 2rem; padding: 1rem; width: 100%">\n  <img src="https://ai.pydantic.dev/img/logo-white.svg" style="max-width: 200px; height: auto">\n  <div>\n    <h1 style="mactData) -> str:\n  return message.value[\'text\']\n\nwith gr.Blocks() as demo:\n  gr.HTML(\n"""\n<div style="display: flex; justify-content: center; align-items: center; gap: 2rem; padding: 1rem; width: 100%">\n  <img src="https://ai.pydantic.dev/img/logo-white.svg" style="max-width: 200px; height: auto">\n  <div>\n    <h1 style="mar; gap: 2rem; padding: 1rem; width: 100%">\n  <img src="https://ai.pydantic.dev/img/logo-white.svg" style="max-width: 200px; height: auto">\n  <div>\n    <h1 style="margin: 0 0 1rem 0">Weather Assistant</h1>\n    <h3 style="margin: 0 0 0.5rem 0">\n      This assistant answer your weather questions.\n    </h3>\n  </div>\n</div>\n"""\rgin: 0 0 1rem 0">Weather Assistant</h1>\n    <h3 style="margin: 0 0 0.5rem 0">\n      This assistant answer your weather questions.\n    </h3>\n  </div>\n</div>\n"""\n  )\n  past_messages = gr.State([])\n  chatbot = gr.Chatbot(\n    label=\'Packing Assistant\',\n    type=\'messages\',\n    avatar_images=(None, \'https://ai.pydantic.dev/img/logo-white.svg\'),\n    examples=[\n      {\'text\': \'What is the weather like in Miami?\'},\n      {\'text\': \'What is the weather like in London?\'},\n    ],\n  )\n  with gr.Row():\n    prompt = gr.Textbox(\n      lines=1,\n      show_label=False,\n      placeholder=\'What is the weather like in New York City?\',\n    )\n  generation = prompt.submit(\n    stream_from_agent,\n    inputs=[prompt, chatbot, past_messages],\n    outputs=[prompt, chatbot, past_messages],\n  )\n  chatbot.example_select(select_data, None, [prompt])\n  chatbot.retry(\n    handle_retry, [chatbot, past_messages], [prompt, chatbot, past_messages]\n  )\n  chatbot.undo(undo, [chatbot, past_messages], [prompt, chatbot, past_messages])\n\nif __name__ == \'__main__\':\n  demo.launch()\n\n```\n\n© Pydantic Services Inc. 2024 to present \n'