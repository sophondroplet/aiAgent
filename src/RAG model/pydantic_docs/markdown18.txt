[ Skip to content ](https://ai.pydantic.dev/api/common_tools/<#pydantic_aicommon_tools>)
[ ![logo](https://ai.pydantic.dev/img/logo-white.svg) ](https://ai.pydantic.dev/api/common_tools/<../..> "PydanticAI")
PydanticAI 
pydantic_ai.common_tools 
Type to start searching
[ pydantic/pydantic-ai  ](https://ai.pydantic.dev/api/common_tools/<https:/github.com/pydantic/pydantic-ai> "Go to repository")
[ ![logo](https://ai.pydantic.dev/img/logo-white.svg) ](https://ai.pydantic.dev/api/common_tools/<../..> "PydanticAI") PydanticAI 
[ pydantic/pydantic-ai  ](https://ai.pydantic.dev/api/common_tools/<https:/github.com/pydantic/pydantic-ai> "Go to repository")
  * [ Introduction  ](https://ai.pydantic.dev/api/common_tools/<../..>)
  * [ Installation  ](https://ai.pydantic.dev/api/common_tools/install/>)
  * [ Getting Help  ](https://ai.pydantic.dev/api/common_tools/help/>)
  * [ Contributing  ](https://ai.pydantic.dev/api/common_tools/contributing/>)
  * [ Troubleshooting  ](https://ai.pydantic.dev/api/common_tools/troubleshooting/>)
  * Documentation  Documentation 
    * [ Agents  ](https://ai.pydantic.dev/api/common_tools/agents/>)
    * [ Models  ](https://ai.pydantic.dev/api/common_tools/models/>)
    * [ Dependencies  ](https://ai.pydantic.dev/api/common_tools/dependencies/>)
    * [ Function Tools  ](https://ai.pydantic.dev/api/common_tools/tools/>)
    * [ Common Tools  ](https://ai.pydantic.dev/api/common_tools/common_tools/>)
    * [ Results  ](https://ai.pydantic.dev/api/common_tools/results/>)
    * [ Messages and chat history  ](https://ai.pydantic.dev/api/common_tools/message-history/>)
    * [ Testing and Evals  ](https://ai.pydantic.dev/api/common_tools/testing-evals/>)
    * [ Debugging and Monitoring  ](https://ai.pydantic.dev/api/common_tools/logfire/>)
    * [ Multi-agent Applications  ](https://ai.pydantic.dev/api/common_tools/multi-agent-applications/>)
    * [ Graphs  ](https://ai.pydantic.dev/api/common_tools/graph/>)
    * [ Image and Audio Input  ](https://ai.pydantic.dev/api/common_tools/input/>)
  * [ Examples  ](https://ai.pydantic.dev/api/common_tools/examples/>)
Examples 
    * [ Pydantic Model  ](https://ai.pydantic.dev/api/common_tools/examples/pydantic-model/>)
    * [ Weather agent  ](https://ai.pydantic.dev/api/common_tools/examples/weather-agent/>)
    * [ Bank support  ](https://ai.pydantic.dev/api/common_tools/examples/bank-support/>)
    * [ SQL Generation  ](https://ai.pydantic.dev/api/common_tools/examples/sql-gen/>)
    * [ Flight booking  ](https://ai.pydantic.dev/api/common_tools/examples/flight-booking/>)
    * [ RAG  ](https://ai.pydantic.dev/api/common_tools/examples/rag/>)
    * [ Stream markdown  ](https://ai.pydantic.dev/api/common_tools/examples/stream-markdown/>)
    * [ Stream whales  ](https://ai.pydantic.dev/api/common_tools/examples/stream-whales/>)
    * [ Chat App with FastAPI  ](https://ai.pydantic.dev/api/common_tools/examples/chat-app/>)
    * [ Question Graph  ](https://ai.pydantic.dev/api/common_tools/examples/question-graph/>)
  * API Reference  API Reference 
    * [ pydantic_ai.agent  ](https://ai.pydantic.dev/api/common_tools/<../agent/>)
    * [ pydantic_ai.tools  ](https://ai.pydantic.dev/api/common_tools/<../tools/>)
    * pydantic_ai.common_tools  [ pydantic_ai.common_tools  ](https://ai.pydantic.dev/api/common_tools/<./>) Table of contents 
      * [ duckduckgo  ](https://ai.pydantic.dev/api/common_tools/<#pydantic_ai.common_tools.duckduckgo>)
      * [ duckduckgo_search_tool  ](https://ai.pydantic.dev/api/common_tools/<#pydantic_ai.common_tools.duckduckgo.duckduckgo_search_tool>)
      * [ tavily  ](https://ai.pydantic.dev/api/common_tools/<#pydantic_ai.common_tools.tavily>)
      * [ tavily_search_tool  ](https://ai.pydantic.dev/api/common_tools/<#pydantic_ai.common_tools.tavily.tavily_search_tool>)
    * [ pydantic_ai.result  ](https://ai.pydantic.dev/api/common_tools/<../result/>)
    * [ pydantic_ai.messages  ](https://ai.pydantic.dev/api/common_tools/<../messages/>)
    * [ pydantic_ai.exceptions  ](https://ai.pydantic.dev/api/common_tools/<../exceptions/>)
    * [ pydantic_ai.settings  ](https://ai.pydantic.dev/api/common_tools/<../settings/>)
    * [ pydantic_ai.usage  ](https://ai.pydantic.dev/api/common_tools/<../usage/>)
    * [ pydantic_ai.format_as_xml  ](https://ai.pydantic.dev/api/common_tools/<../format_as_xml/>)
    * [ pydantic_ai.models  ](https://ai.pydantic.dev/api/common_tools/<../models/base/>)
    * [ pydantic_ai.models.openai  ](https://ai.pydantic.dev/api/common_tools/<../models/openai/>)
    * [ pydantic_ai.models.anthropic  ](https://ai.pydantic.dev/api/common_tools/<../models/anthropic/>)
    * [ pydantic_ai.models.cohere  ](https://ai.pydantic.dev/api/common_tools/<../models/cohere/>)
    * [ pydantic_ai.models.gemini  ](https://ai.pydantic.dev/api/common_tools/<../models/gemini/>)
    * [ pydantic_ai.models.vertexai  ](https://ai.pydantic.dev/api/common_tools/<../models/vertexai/>)
    * [ pydantic_ai.models.groq  ](https://ai.pydantic.dev/api/common_tools/<../models/groq/>)
    * [ pydantic_ai.models.mistral  ](https://ai.pydantic.dev/api/common_tools/<../models/mistral/>)
    * [ pydantic_ai.models.test  ](https://ai.pydantic.dev/api/common_tools/<../models/test/>)
    * [ pydantic_ai.models.function  ](https://ai.pydantic.dev/api/common_tools/<../models/function/>)
    * [ pydantic_ai.models.fallback  ](https://ai.pydantic.dev/api/common_tools/<../models/fallback/>)
    * [ pydantic_graph  ](https://ai.pydantic.dev/api/common_tools/<../pydantic_graph/graph/>)
    * [ pydantic_graph.nodes  ](https://ai.pydantic.dev/api/common_tools/<../pydantic_graph/nodes/>)
    * [ pydantic_graph.state  ](https://ai.pydantic.dev/api/common_tools/<../pydantic_graph/state/>)
    * [ pydantic_graph.mermaid  ](https://ai.pydantic.dev/api/common_tools/<../pydantic_graph/mermaid/>)
    * [ pydantic_graph.exceptions  ](https://ai.pydantic.dev/api/common_tools/<../pydantic_graph/exceptions/>)


Table of contents 
  * [ duckduckgo  ](https://ai.pydantic.dev/api/common_tools/<#pydantic_ai.common_tools.duckduckgo>)
  * [ duckduckgo_search_tool  ](https://ai.pydantic.dev/api/common_tools/<#pydantic_ai.common_tools.duckduckgo.duckduckgo_search_tool>)
  * [ tavily  ](https://ai.pydantic.dev/api/common_tools/<#pydantic_ai.common_tools.tavily>)
  * [ tavily_search_tool  ](https://ai.pydantic.dev/api/common_tools/<#pydantic_ai.common_tools.tavily.tavily_search_tool>)


  1. [ Introduction  ](https://ai.pydantic.dev/api/common_tools/<../..>)
  2. [ API Reference  ](https://ai.pydantic.dev/api/common_tools/<../agent/>)


Version
Showing documentation for the latest release [v0.0.31 2025-03-03](https://ai.pydantic.dev/api/common_tools/<https:/github.com/pydantic/pydantic-ai/releases/tag/v0.0.31>).
# `pydantic_ai.common_tools`
###  duckduckgo_search_tool
```
duckduckgo_search_tool(
  duckduckgo_client: DDGS | None = None,
  max_results: int[](https://ai.pydantic.dev/api/common_tools/<https:/docs.python.org/3/library/functions.html#int>) | None = None,
)

```

Creates a DuckDuckGo search tool.
Parameters:
Name | Type | Description | Default  
---|---|---|---  
`duckduckgo_client` |  `DDGS | None` |  The DuckDuckGo search client. |  `None`  
`max_results` |  `int[](https://ai.pydantic.dev/api/common_tools/<https:/docs.python.org/3/library/functions.html#int>) | None` |  The maximum number of results. If None, returns results only from the first response. |  `None`  
Source code in `pydantic_ai_slim/pydantic_ai/common_tools/duckduckgo.py`
```
62
63
64
65
66
67
68
69
70
71
72
73
```
| ```
defduckduckgo_search_tool(duckduckgo_client: DDGS | None = None, max_results: int | None = None):
"""Creates a DuckDuckGo search tool.
  Args:
    duckduckgo_client: The DuckDuckGo search client.
    max_results: The maximum number of results. If None, returns results only from the first response.
  """
  return Tool(
    DuckDuckGoSearchTool(client=duckduckgo_client or DDGS(), max_results=max_results).__call__,
    name='duckduckgo_search',
    description='Searches DuckDuckGo for the given query and returns the results.',
  )

```
  
---|---  
###  tavily_search_tool
```
tavily_search_tool(api_key: str[](https://ai.pydantic.dev/api/common_tools/<https:/docs.python.org/3/library/stdtypes.html#str>))

```

Creates a Tavily search tool.
Parameters:
Name | Type | Description | Default  
---|---|---|---  
`api_key` |  `str[](https://ai.pydantic.dev/api/common_tools/<https:/docs.python.org/3/library/stdtypes.html#str>)` |  The Tavily API key. You can get one by signing up at <https://app.tavily.com/home>. |  _required_  
Source code in `pydantic_ai_slim/pydantic_ai/common_tools/tavily.py`
```
70
71
72
73
74
75
76
77
78
79
80
81
82
```
| ```
deftavily_search_tool(api_key: str):
"""Creates a Tavily search tool.
  Args:
    api_key: The Tavily API key.
      You can get one by signing up at [https://app.tavily.com/home](https://app.tavily.com/home).
  """
  return Tool(
    TavilySearchTool(client=AsyncTavilyClient(api_key)).__call__,
    name='tavily_search',
    description='Searches Tavily for the given query and returns the results.',
  )

```
  
---|---  
Â© Pydantic Services Inc. 2024 to present 
