[ Skip to content ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#pointers>)
[ ![logo](https://tritonuas.com/wiki/assets/tuas_2020_favicon_white.svg) ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/> "TritonUAS Wiki")
TritonUAS Wiki 
05. Pointers 
Initializing search 
[ GitHub  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/github.com/tritonuas/wiki/> "Go to repository")
  * [ Home ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/>)
  * [ General ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/general/town_hall_notes/>)
  * [ Onboarding ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/onboarding/foam_aircraft_project/>)
  * [ Hardware ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/hardware/wings/>)
  * [ Mechanical ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/mechanical/mechanical_home/>)
  * [ Electrical ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/electrical/electrical-overview/>)
  * [ Software ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/software_home/>)


[ ![logo](https://tritonuas.com/wiki/assets/tuas_2020_favicon_white.svg) ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/> "TritonUAS Wiki") TritonUAS Wiki 
[ GitHub  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/github.com/tritonuas/wiki/> "Go to repository")
  * [ Home  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/>)
  * General  General 
    * [ Town Hall Notes  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/general/town_hall_notes/>)
    * [ Test Flight  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/general/test_flight/>)
    * [ Repo Guide  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/general/repo_guide/>)
    * [ Useful Links  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/general/links/>)
    * [ Wiki Editing  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/general/wiki_editing/>)
    * [ Website Editing  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/general/website_editing/>)
  * Onboarding  Onboarding 
    * [ Foam Aircraft Project  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/onboarding/foam_aircraft_project/>)
    * [ Servos  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/onboarding/servos/>)
  * Hardware  Hardware 
    * [ Wings  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/hardware/wings/>)
    * [ Fuselage  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/hardware/fuselage/>)
    * [ VTOL  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/hardware/vtol/>)
    * [ Camera Gimbal  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/hardware/camera_gimbal/>)
    * [ Payload  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/hardware/payload/>)
    * [ GCS  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/hardware/gcs/>)
  * Mechanical  Mechanical 
    * [ Mechanical Home  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/mechanical/mechanical_home/>)
    * Competition Planes  Competition Planes 
      * [ Toothless  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/mechanical/toothless/toothless/>)
      * [ Duckasaurus  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/mechanical/duckasaurus/duckasaurus/>)
    * Onboarding Projects  Onboarding Projects 
      * [ The Marius  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/mechanical/onboarding-projects/the_marius/>)
    * Manufacturing  Manufacturing 
      * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/mechanical/manufacturing/manufacturing_overview/>)
      * [ Mold Manufacturing  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/mechanical/manufacturing/Mold_Manufacturing/>)
      * [ CNC Hot Wire Cutter  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/mechanical/manufacturing/CNC_hot_wire/>)
    * Design/Analysis  Design/Analysis 
      * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/mechanical/design-analysis/overview/>)
      * Optimization  Optimization 
        * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/mechanical/optimization/optimization_overview/>)
    * Tutorials  Tutorials 
      * [ Solidworks  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/mechanical/tutorials/solidworks/>)
      * [ Ansys  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/mechanical/tutorials/ansys/>)
      * [ Matlab/Optimization  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/mechanical/tutorials/matlab-optimization/>)
    * [ Mechanical Packing List  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/mechanical/packing_list/>)
  * Electrical  Electrical 
    * [ Electrical Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/electrical/electrical-overview/>)
    * [ Electronics Diagram  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/electrical/electronics-diagram/>)
    * Projects  Projects 
      * Airdrop  Airdrop 
        * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/electrical/projects/airdrop/overview/>)
        * [ Mechanism  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/electrical/projects/airdrop/drop_mechanism/>)
        * [ GPIO Setup  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/electrical/projects/airdrop/GPIO_setup/>)
        * [ Drop Calculation  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/electrical/projects/airdrop/drop_script/>)
      * [ Antenna Tracker  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/electrical/projects/antenna-tracker/>)
      * [ Power Board  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/electrical/projects/power-board/>)
      * Signals Board  Signals Board 
        * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/electrical/projects/signals-board/signals-board/>)
        * [ Sensor Input  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/electrical/projects/signals-board/sensor-input/>)
        * [ Signals Board Code  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/electrical/projects/signals-board/sigboard-code/>)
        * [ Signals Board Requirements  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/electrical/projects/signals-board/sigboard-reqs/>)
    * Communication  Communication 
      * [ CAN  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/electrical/communication/can/>)
      * [ I2C  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/electrical/communication/i2c/>)
      * [ MAVLink  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/electrical/communication/mavlink/>)
      * [ UART  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/electrical/communication/uart/>)
      * [ Wireless Communication  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/electrical/communication/wireless-comms/>)
    * Other Tutorials  Other Tutorials 
      * [ Fabrication  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/electrical/other-tutorials/fabrication/>)
      * [ Ardupilot/Pixhawk  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/electrical/other-tutorials/ardupilot-pixhawk/>)
  * Software  Software 
    * [ Software Home  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/software_home/>)
    * [ How to Contribute  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/how_to_contribute/>)
    * Reference  Reference 
      * [ Git  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/reference/git/>)
      * [ Computer Vision  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/reference/computer_vision/>)
      * [ Datahub  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/reference/datahub/>)
    * GCS  GCS 
      * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/gcs/gcs_overview/>)
      * [ Configuration  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/gcs/gcs_configuration/>)
      * Frontend  Frontend 
        * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/gcs/frontend/frontend_overview/>)
        * [ Pages  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/gcs/frontend/frontend_pages/>)
      * Backend  Backend 
        * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/gcs/backend/backend_overview/>)
        * [ Endpoints  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/gcs/backend/backend_endpoints/>)
    * OBC  OBC 
      * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/obc/obc_overview/>)
      * Pathing  Pathing 
        * [ RRT-Star  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/obc/pathing/rrt-star/>)
        * [ Coverage  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/obc/pathing/coverage/>)
      * Tick Architecture  Tick Architecture 
        * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/obc/tick_architecture/tick_overview/>)
        * [ Guide  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/obc/tick_architecture/guide/>)
        * Ticks  Ticks 
          * [ Mission Prep  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/missionprep/>)
          * [ Path Gen  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/pathgen/>)
          * [ Path Validate  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/pathvalidate/>)
          * [ Mav Upload  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/mavupload/>)
          * [ Takeoff  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/takeoff/>)
          * [ Fly Waypoints  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/flywaypoints/>)
          * [ Fly Search  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/flysearch/>)
          * [ CV Loiter  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/cvloiter/>)
          * [ Airdrop Prep  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/airdropprep/>)
          * [ Airdrop Approach  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/airdropapproach/>)
          * [ Manual Landing  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/manuallanding/>)
          * [ Auto Landing  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/autolanding/>)
          * [ Mission Done  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/missiondone/>)
    * Target Detection Team  Target Detection Team 
      * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/target_detection_team/target_detection_overview/>)
      * [ Saliency  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/target_detection_team/saliency/>)
      * [ Segmentation  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/target_detection_team/segmentation/>)
      * [ Classification  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/target_detection_team/classification/>)
    * Localization  Localization 
      * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/localization/localization_overview/>)
    * Dataset Generation  Dataset Generation 
      * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/dataset_generation/dataset_generation_overview/>)
    * Workshops  Workshops 
      * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/workshops_overview/>)
      * Contents  Contents 
        * [ 01. Unix/Command Line  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/01_unix_basics/>)
        * [ 02. Git/GitHub  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/02_git_deep_dive/>)
        * [ 03. HTTP/REST  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/03_http_and_rest/>)
        * [ 04. Docker  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/>)
        * 05. Pointers  [ 05. Pointers  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/>) Table of contents 
          * [ Why do we need pointers?  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#why-do-we-need-pointers>)
            * [ The Stack: Primitive Variables  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#the-stack-primitive-variables>)
            * [ A Program With Nondeterminable Size at Compile-Time  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#a-program-with-nondeterminable-size-at-compile-time>)
            * [ The Heap  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#the-heap>)
          * [ Introducing Pointers  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#introducing-pointers>)
          * [ Arrays of Values  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#arrays-of-values>)
          * [ A Note on Memory Leaks  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#a-note-on-memory-leaks>)
          * [ A Note on Strings  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#a-note-on-strings>)
          * [ Polymorphism: Back to C++  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#polymorphism-back-to-c>)
            * [ C++ Syntax  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#c-syntax>)
            * [ Pointers and Polymorphism  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#pointers-and-polymorphism>)
          * [ Another Example of Pointers: Linked Lists  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#another-example-of-pointers-linked-lists>)
          * [ Using Pointers to Resolve Circular Dependencies  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#using-pointers-to-resolve-circular-dependencies>)
          * [ Constructors & Destructors in C++  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#constructors-destructors-in-c>)
            * [ Constructor  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#constructor>)
            * [ Destructor  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#destructor>)
            * [ Caveat: Virtual Destructor  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#caveat-virtual-destructor>)
          * [ Conclusion  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#conclusion>)
        * [ 06. Unit Tests  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/06_unit_tests/>)
        * [ 07. Design Patterns  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/07_design_patterns/>)
        * [ 08. Async Programming  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/08_async_programming/>)
        * [ 09. Continuous Integration  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/09_continuous_integration/>)
    * Onboarding  Onboarding 
      * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/onboarding/onboarding_overview/>)
      * Level 0  Level 0 
        * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_overview/>)
        * [ Python Tutorial  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_python/>)
        * [ Go Tutorial  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_go/>)
        * [ C++ Tutorial  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/>)
      * Level 1  Level 1 
        * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/onboarding/level_1/level_1_overview/>)
      * Level 2  Level 2 
        * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/onboarding/level_2/level_2_overview/>)
    * Miscellaneous  Miscellaneous 
      * [ Design Proposals  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/misc/design_review/>)
      * [ Nanostation Setup  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/misc/nanostations/>)
      * [ Passwords  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/misc/passwords/>)
      * [ Test Flight Checklist  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/misc/test_flight_checklist/>)


Table of contents 
  * [ Why do we need pointers?  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#why-do-we-need-pointers>)
    * [ The Stack: Primitive Variables  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#the-stack-primitive-variables>)
    * [ A Program With Nondeterminable Size at Compile-Time  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#a-program-with-nondeterminable-size-at-compile-time>)
    * [ The Heap  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#the-heap>)
  * [ Introducing Pointers  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#introducing-pointers>)
  * [ Arrays of Values  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#arrays-of-values>)
  * [ A Note on Memory Leaks  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#a-note-on-memory-leaks>)
  * [ A Note on Strings  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#a-note-on-strings>)
  * [ Polymorphism: Back to C++  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#polymorphism-back-to-c>)
    * [ C++ Syntax  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#c-syntax>)
    * [ Pointers and Polymorphism  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#pointers-and-polymorphism>)
  * [ Another Example of Pointers: Linked Lists  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#another-example-of-pointers-linked-lists>)
  * [ Using Pointers to Resolve Circular Dependencies  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#using-pointers-to-resolve-circular-dependencies>)
  * [ Constructors & Destructors in C++  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#constructors-destructors-in-c>)
    * [ Constructor  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#constructor>)
    * [ Destructor  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#destructor>)
    * [ Caveat: Virtual Destructor  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#caveat-virtual-destructor>)
  * [ Conclusion  ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#conclusion>)


# Pointers
## Why do we need pointers?
This is a question that many people have when they first learn pointers. They might (at a high level) understand the _what_ , but not the _why_ or _how_.
To avoid this, before we even talk about pointers we will work through the reasoning for why they are useful. **Try to forget most of what you may already understand about what high level languages you may already be familiar with (e.g. Java, Python), and instead follow this line of thinking in the context of C++.**
### The Stack: Primitive Variables
For now, let's limit ourselves to **primitive** variable types only. In C++, this includes `int` (integer), `char`, (character), and `double` (decimal point number). This is not an exhaustive list, but will suffice for now.
In C++, you would define them like this in a basic main function.
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-0-1>)intmain(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-0-2>)intage=21;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-0-3>)charletter='a';
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-0-4>)doublefav_num=4.2;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-0-5>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-0-6>)return0;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-0-7>)}

```

But how does this program actually store all of these values? Where are these variables actually found in memory in your computer? To understand this, we need to talk about the stack.
When you run a program, there are two major _sections_ of memory that exist. They are called the **stack** and **heap**.
The heap is incredibly important, but we are going to forget about it right now. Eventually we will run into problems without it, but we'll talk about it then.
The Stack is where all of our **primitive** variables will be stored. All of your `int`, `char`, and `double` variables are going to be stored here.
Here is a diagram which shows how these regions of memory are laid out:
![Memory diagram in C](https://drive.google.com/uc?export=view&id=1GGIGvuW-TRiv52g7B_rQRgnts_UUqh4D)
_[Diagram Source](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/github.com/dks333/Study-Mobile-Development/blob/master/Swifty%20Notes/Memory%20Management.md>)_
You will note that there are other sections and annotations which we didn't mention. They aren't relevant for what we are talking about, but you can read more about them online if you are interested.
What we are interested in, however, are the relative positions of the stack and heap in this diagram. You'll notice that there are arrows from the stack and the heap pointing to each other. This means that as you declare more primitives, your stack will grow larger, and it will get closer to your heap.
Earlier we mentioned that **primitive** variables are what are stored on the stack. So, if you were to diagram the stack for our main function we wrote above, it would look something like this (a simplified view):
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-1-1>)------ Bottom of Stack
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-1-2>)age = 21
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-1-3>)letter = 'a'
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-1-4>)fav_num = 4.2
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-1-5>)------ Top of Stack
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-1-6>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-1-7>)...  (lots of empty space)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-1-8>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-1-9>)------ Top of Heap

```

So in our stack we have all of our primitive variables we defined. Note that the variable at the bottom of the stack is the first variable defined, and every subsequent variable gets "placed ontop of" the previous. This is a little confusing because in the diagram our stack is growing down, but just keep that in mind. You can imagine it like a stack of papers. Each variable we define is another paper we add to the stack, so the top variable is the most recently defined variable.
_(tangent: in modern compilers the ordering on the stack might not exactly line up with the ordering in your program, for security or optimization reasons, but for learning it is fine to imagine it this way.)_
In our sample program we never actually do anything with these variables, so let's extend the program slightly to print all of the values out to our terminal.
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-2-1>)#include<iostream>
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-2-2>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-2-3>)intmain(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-2-4>)intage=21;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-2-5>)charletter='a';
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-2-6>)doublefav_num=4.2;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-2-7>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-2-8>)std::cout<<"age = "<<age<<"\n";
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-2-9>)std::cout<<"letter = "<<letter<<"\n";
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-2-10>)std::cout<<"fav_num = "<<fav_num<<std::endl;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-2-11>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-2-12>)return0;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-2-13>)}

```

Running this program gives the following output, like we would expect:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-3-1>)age = 21
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-3-2>)letter = a
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-3-3>)fav_num = 4.200000

```

So remember, after we have defined all of our variables, our stack looks like this:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-4-1>)------ Bottom of Stack
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-4-2>)age = 21
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-4-3>)letter = 'a'
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-4-4>)fav_num = 4.2
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-4-5>)------ Top of Stack

```

Then, when the program gets to a line that is trying to access one of the values, it goes in the stack and is able to find the corresponding variable from the name in the program.
One important thing to note, however, is that the variable name is not stored anywhere on the stack. A more accurate (but still simplified) diagram would actually look like this:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-5-1>)------ Bottom of Stack
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-5-2>)21
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-5-3>)'a'
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-5-4>)4.2
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-5-5>)------ Top of Stack

```

So, on the stack it just has the literal values that are being stored. With this in mind, how does the program know where to get each value?
The answer is that the program remembers which variable is at which slot. So if we think of `age` as being in slot 0, then the program actually identifies age as the variable that is in slot 0. Then `letter` would correspond to slot 1, and `fav_num` to slot 2.
(This might make you wonder how the stack looks throughout various function calls. Essentially, at a high level the stack will be split up into different sections (called **stack frames**) which contain all of the primitives for that given function. This is incredibly important to understand, but for this workshop we are just going to be assuming we never call a function from `main`, so main's stack frame is the only one we have to worry about.)
Now, in preparation for something we are going to talk about in a moment, let's make our stack diagram a little more complicated. Ponder this statement:
**Different variable types have different sizes.**
Therefore, the amount of space that each of our primitive variables takes up on the stack will actually be different. Let's take a look at these:
The smallest of our primitives here is the `char`, which takes up 1 byte (8 bits). This is the smallest possible variable size, because your operating system cannot work with anything smaller at a time when it reads and writes to memory.
The next largest of our primitives here is the `int`, which takes up 4 bytes (32 bits). This is followed by the `double`, which takes up 8 bytes (64 bits).
Therefore, a more accurate depiction of our stack would look like the following:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-6-1>)------- Bottom of Stack
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-6-2>)21
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-6-3>)"
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-6-4>)"
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-6-5>)"
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-6-6>)'a'
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-6-7>)4.2
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-6-8>)"
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-6-9>)"
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-6-10>)"
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-6-11>)"
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-6-12>)"
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-6-13>)"
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-6-14>)"
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-6-15>)------- Top of Stack

```

In this diagram, each line corresponds to 1 byte. I am using the `"` character to signify that the byte at that location is being used to store the entirety of the above primitive variable.
Once you understand that different variables have different sizes, this explains many of the other primitive types in C. You can do a cursory google search if you want an exhaustive list. One of the most common, however, is the `float`, which is like a `double` but only takes up 4 bytes (32 bits). (You can think of a `double` as a float, but it takes up "double" the amount of space, hence the name).
Now that we have introduced the basics of storing primitive values on the stack, ponder this statement:
**The compiler must know the size of the stack at compile time.**
In our simple example, this is undoubtably true. The compiler can look at **the actual text of the program itself** and see that it will need 13 bytes for all of the variables on the stack (4 bytes for the `int`, 1 byte for the `char` and 8 bytes for the `double`).
Why is this the case? Well, to answer this it relies on a lower level understanding of how all of this memory is actually being laid out, but essentially the fact that your compiler knows the exact size the stack will be lets it lay out things in memory more efficiently.
Then how do we write programs where this is not the case? Does this ever actually happen?
### A Program With Nondeterminable Size at Compile-Time
While you can write a program which has non determinable stack size at compile time, it will not compile. (Ignore the exceptions we briefly mentioned exist earlier.)
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-7-1>)#include<iostream>
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-7-2>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-7-3>)intmain(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-7-4>)intsize;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-7-5>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-7-6>)// Read one integer from standard input
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-7-7>)// Ignore input validation to make this simpler
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-7-8>)std::cin>>size;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-7-9>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-7-10>)intarr[size];
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-7-11>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-7-12>)for(inti=0;i<size;i++){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-7-13>)arr[i]=i;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-7-14>)std::cout<<i<<", ";
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-7-15>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-7-16>)std::cout<<std::endl;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-7-17>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-7-18>)return0;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-7-19>)}

```

If you try to compile this program, you will get the following output:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-8-1>)tyler:~/test2$g++main.cpp-Werror=vla
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-8-2>)main.cpp:Infunction‘intmain()’:
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-8-3>)main.cpp:10:9:error:variablelengtharray‘arr’isused[-Werror=vla]
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-8-4>)10|intarr[size];
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-8-5>)|^~~
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-8-6>)cc1plus:somewarningsbeingtreatedaserrors

```

If you analyze this output, you'll realize that I actually passed an extra flag into `g++`. What this is doing is telling the compiler to error if it detects a vla (variable lengthed array). This is actually because by default `g++` will allow variable lengthed arrays, **even though they are not allowed by the C++ standard**. This means that on other compilers, this program would fail by default.
_Even if_ we were letting ourselves get away with variable length arrays, we would still run into problems if we made the example a little more complicated.
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-9-1>)intmain(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-9-2>)intsize;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-9-3>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-9-4>)std::cin>>size;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-9-5>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-9-6>)intarr[size];// variable length array
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-9-7>)for(inti=0;i<size;i++){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-9-8>)arr[i]=0;// Zero out the array
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-9-9>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-9-10>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-9-11>)// Do some stuff
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-9-12>)charc='c';
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-9-13>)doubled='d';
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-9-14>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-9-15>)// Now I want to resize arr
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-9-16>)// How should this work?
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-9-17>)// ...
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-9-18>)}

```

In this example, we create a variable length array (which again, you should not do, but let's assume you did), then we do some work which involves creating more primitive variables on the stack beneath the array. Then later on, how would we handle resizing the array? Imagine our stack frame looked like this:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-10-1>)------- Bottom of the Stack
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-10-2>)size
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-10-3>)arr[0]
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-10-4>)arr[1]
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-10-5>)...
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-10-6>)arr[size-1]
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-10-7>)c
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-10-8>)d
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-10-9>)------- Top of the Stack

```

Would we have to shift down `c` and `d` to make room for more elements in arr? Would it make sense for the compiler to put `c` and `d` before `arr` so that `arr` would have room to grow beneath? But then, what if we had two arrays we wanted to dynamically resize throughout the program that were right next to eachother? Would we have to shift around the arrays in memory every time we wanted to resize them? Then this isn't even considering the fact that the compiler needs to remember in what offset each variable is. If we keep shifting around variables on the stack it will make it extra complicated, if not impossible, to determine in what slot each variable is stored.
The whole point of this thought experiment is to drive in the point that having dynamically sized data on the stack is a _bad idea_. With the nature of how the stack shrinks and grows, it makes everything better if we know at compile time how large a stack frame for a certain function will be.
Therefore, we need another place in memory to store dynamically allocated values.
### The Heap
So, if you remember, our memory diagram from before looked like this:
![Memory diagram in C](https://drive.google.com/uc?export=view&id=1GGIGvuW-TRiv52g7B_rQRgnts_UUqh4D)
We have our stack with primitive values growing down. Now, we'll have another place in memory: **the heap** with values growing up towards the stack. There is plenty of empty space between these two places, so they will be able to grow for a while. This provides a great property, because if we isolate all of our dynamically allocated data on the heap, when we want to mess with it then it wont shift around things on the stack.
For the time being we will shift from C++ to C. This is mainly because C's memory management is slightly lower level than that in C++, and explaining the extra details will hopefully help your understanding. If you understand C's memory management, C++'s is just simpler.
In C, when you want to store data on the heap you use the `malloc` function. (Malloc = Manual Allocation). There are some other variations of `malloc`, but `malloc` is the most basic (and common).
For example, the following call to `malloc` will find a free 4 bytes on the heap for you. This would be enough to store a single integer, or possibly 4 characters.
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-11-1>)malloc(4);

```

Ok... so we now have 4 bytes to play with on the heap. How do we actually, y'know, work with this memory?
## Introducing Pointers
We have finally reached the point where we need pointers!
If you remember from earlier, all of our primitives are stored on the stack. When we want to access the value of a variable, behind the scenes the program translates the variable name into an offset, which it then uses to index into the stack.
So if the way we access variables is by offsets in the stack, how do we get all the way from the stack down into the heap? If you remember from the diagram, they are quite far from each other, and the programmer shouldn't really have to care about how far apart the stack and heap are. For the programmer, they should be two completely different things.
This is where pointers come in. Earlier we gave a non-exaustive list of primitive types, which included `int`, `char`, and `double`. Now, we can introduce another kind of primitives: **pointers**. A pointer is a variable which holds the **memory address** of another variable, which usually lives in the heap. (Although sometimes you have pointers to variables that live on the stack as well.) Using this memory address, you can find data on the heap.
Earlier, we showed a call to `malloc` for 4 bytes. However, we never actually did anything with it, and there was nothing we could do because we didn't get the address of the newly allocated memory. That line of code is actually the simplest example of a **memory leak** , since after calling it there is no way to later on tell the program "hey, I'm done with this memory, so you can have it back." We'll talk more about memory leaks later on, but for now just know that to actually do things with this new space on the heap, you need the address. To get the address, you have to access the return value of malloc.
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-12-1>)int*ptr=malloc(sizeof(int));

```

There are two pieces of new syntax here:
  1. Note the type of the variable: `int*`. The star specifies that it is a pointer. So you can read `int*` as "int pointer" or "pointer to an int"
  2. We use `sizeof(int)` instead of manually typing in 4 bytes. It is considered good practice to do this instead of typing out raw numbers, because it is clearer what you are trying to do, and on certain machines different variables might have different sizes. For example, on some older machines ints might only be 2 bytes, or 16 bits.


Earlier, we talked about the different sizes of primitives. If you remember, `int` was 4 bytes, `char` 1 byte, and `double` 8 bytes. Most modern systems are what we call 64 bit systems, so on these systems pointers will be 64 bits (8 bytes), the same size as a double. However, on some older 32 bit systems pointers will be 32 bits (4 bytes).
Now, our memory diagram will look something like this. Note that we are abstracting away the complexity of addresses and the varying sizes of things on the stack, but know in the back of your mind that it takes twice the size to store the pointer than the int in our example because the pointer takes up 8 bytes and the int takes up 4. Also, I am including the name of the stack variable for clarity, even though that would not actually be stored on the stack.
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-13-1>)--------------------- Bottom of Stack
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-13-2>)ptr = Address A
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-13-3>)--------------------- Top of Stack
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-13-4>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-13-5>)empty space 
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-13-6>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-13-7>)--------------------- Top (end) of Heap
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-13-8>)Address A | ???
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-13-9>)--------------------- Bottom (start) of Heap

```

Address A, in reality, would look like some hex number. In addition, the space in memory where `ptr` is stored would also have a memory address (everything in memory does), but it is not relevant here.
Also note that the value of the integer on the heap is currently undefined. This is because in C when you allocate space on the heap, it will be set to whatever value was already there. This _could_ be 0, but probably will be some arrangement of garbage bits.
Let's try to print out this garbage value on the heap. Using `printf`, you use `%d` to print a decimal integer, so your first attempt might look like this:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-14-1>)#include<stdio.h> // printf
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-14-2>)#include<stdlib.h> // malloc
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-14-3>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-14-4>)intmain(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-14-5>)int*ptr=malloc(sizeof(int));
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-14-6>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-14-7>)printf("%d\n",ptr);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-14-8>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-14-9>)return0;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-14-10>)}

```

Which when compiled tells you this:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-15-1>)tyler:/tmp$gcctest.c
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-15-2>)test.c:Infunction‘main’:
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-15-3>)test.c:7:14:warning:format‘%d’expectsargumentoftype‘int’,butargument2hastype‘int*’[-Wformat=]
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-15-4>)7|printf("%d",ptr);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-15-5>)|~^~~~
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-15-6>)|||
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-15-7>)|intint*
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-15-8>)|%ls

```

This is saying that when it parsed the format string passed into `printf` (which was set to "%d"), when it encountered the %d, it expected to find an integer to print in the following argument list, but instead it found a pointer to an integer.
This is because when you type `ptr`, you are referring to the **actual memory address** that is stored inside the primitive `ptr` on the stack. If _that_ was what we wanted to print out, then you would have to change the %d to %p (to tell printf to print out a pointer). This would look like:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-16-1>)#include<stdio.h> // printf
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-16-2>)#include<stdlib.h> // malloc
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-16-3>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-16-4>)intmain(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-16-5>)int*ptr=malloc(sizeof(int));
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-16-6>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-16-7>)printf("%p\n",ptr);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-16-8>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-16-9>)return0;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-16-10>)}

```

```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-17-1>)tyler:/tmp$./a.out
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-17-2>)0x5592b8ada2a0

```

Note that the output of the memory address is a 12 digit hex number: that is how memory addresses are represented.
(Brief Tangent: you might expect the addresses to be _16_ digits, because that would correspond to the 64 bits it takes to store the pointer. However, modern systems currently only use 48 of the 64 bits for the actual address since more bits aren't really needed, and 64 is a lot nicer to work with than 48. In addition, it also gives the benefit that in the future if we want to upgrade systems to use all 64 bits none of the underlying hardware will have to change.)
But that was all just to print the memory address that `ptr` contains, how do we actually get the value stored there?
This is where the **dereference operator** ( * ) comes in. Before, we saw that you use an asterisk in the type of a variable to specify that it is a pointer. In addition, you also use the asterisk on a variable itself to **dereference it**. In code, this looks like this:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-18-1>)#include<stdio.h> // printf
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-18-2>)#include<stdlib.h> // malloc
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-18-3>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-18-4>)intmain(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-18-5>)int*ptr=malloc(sizeof(int));
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-18-6>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-18-7>)printf("%d\n",*ptr);// Note: it is *ptr not ptr
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-18-8>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-18-9>)return0;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-18-10>)}

```

In essence, you can read `*ptr` as "take the memory address stored in `ptr`, go there, and pull out the value. However, earlier we saw that the memory address is just one byte, which is the starting byte the value is stored at. How does it know to read the full 4 bytes? It does that because we declared `ptr` as an `int*`, so when we dereference it, C knows to take 4 bytes because that is the size of an int. If we had declared a `char*`, it would know to only take that one byte.
Executing the above program gives me the following output (your output will vary, depending on what was already stored in that memory location).
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-19-1>)tyler:/tmp$./a.out
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-19-2>)0

```

In this case, the value was zero. But it is also possible it will be some random number.
## Arrays of Values
A very common use of manual memory allocation in C is for strings. In C, there is no String type like you would find in a higher level language, instead strings are just arrays of chars. But _even then_ , arrays are just pointers, so strings are actually just pointers to chars. To see what I mean, lets first talk about integer arrays.
We already know how to instantiate an array of static size, such that it can be determined at compile time and placed on the stack. This is an example of such a program:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-20-1>)#include<stdio.h>
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-20-2>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-20-3>)intmain(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-20-4>)intarray[]={1,2,3,4,5};
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-20-5>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-20-6>)for(inti=0;i<5;i++){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-20-7>)printf("%d\n",array[i]);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-20-8>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-20-9>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-20-10>)return0;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-20-11>)}

```

When running this program, it will print out the numbers 1-5, which are being accessed by indexing into the array. On the stack, it will look something like this:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-21-1>)-------- Bottom of the Stack (high addresses)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-21-2>)arr[4] = 5
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-21-3>)arr[3] = 4
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-21-4>)arr[2] = 3
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-21-5>)arr[1] = 2
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-21-6>)arr[0] = 1
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-21-7>)-------- Top of the Stack (low addresses)

```

Note that the array is filled upwards. The base index of the array has the lowest address. This will be relevant in a moment;
What would be the equivalent way to write this code, but by allocating the array on the heap? Well, it would look something like this:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-22-1>)#include<stdio.h> // printf
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-22-2>)#include<stdlib.h> // malloc
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-22-3>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-22-4>)intmain(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-22-5>)constintsize=5;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-22-6>)int*arr=malloc(sizeof(int)*size);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-22-7>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-22-8>)for(inti=0;i<size;i++){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-22-9>)arr[i]=i+1;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-22-10>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-22-11>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-22-12>)// Could do this all in one for loop, but want to mimic the
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-22-13>)// above example as close as possible
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-22-14>)for(inti=0;i<size;i++){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-22-15>)printf("%d\n",arr[i]);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-22-16>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-22-17>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-22-18>)return0;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-22-19>)}

```

This will output the same 1-5 as before, but this time our memory diagram will look something like this:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-23-1>)--------------------- Bottom of Stack
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-23-2>)ptr = Address A
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-23-3>)--------------------- Top of Stack
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-23-4>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-23-5>)empty space 
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-23-6>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-23-7>)--------------------- Top (end) of Heap
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-23-8>)Address E | 5
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-23-9>)Address D | 4
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-23-10>)Address C | 3
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-23-11>)Address B | 2
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-23-12>)Address A | 1
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-23-13>)--------------------- Bottom (start) of Heap

```

If we wanted to fill in example memory addresses instead of using arbitary A-E, then it would look like this:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-24-1>)--------------------- Bottom of Stack
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-24-2>)ptr = 0x55b863cfd2a0
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-24-3>)--------------------- Top of Stack
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-24-4>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-24-5>)empty space 
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-24-6>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-24-7>)--------------------- Top (end) of Heap
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-24-8>)0x55b863cfd2b0 | 5
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-24-9>)0x55b863cfd2ac | 4
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-24-10>)0x55b863cfd2a8 | 3
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-24-11>)0x55b863cfd2a4 | 2
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-24-12>)0x55b863cfd2a0 | 1
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-24-13>)--------------------- Bottom (start) of Heap

```

The first thing to note is that to create this array on the heap, we requested the amount of bytes necessary for an `int`, then multiplied that by 5 because we wanted enough space to store 5 ints. Then, once we did that, we could use the [] operator as normal to index into the array.
This works because of how the [] operator works behind the scenes. Essentially, the [] operator is equivalent to:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-25-1>)int*arr=malloc(sizeof(int)*5);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-25-2>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-25-3>)printf("%d\n",*arr);// arr[0]
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-25-4>)printf("%d\n",*(arr+4));// arr[1]
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-25-5>)printf("%d\n",*(arr+8));// arr[2]
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-25-6>)printf("%d\n",*(arr+12));// arr[3]
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-25-7>)printf("%d\n",*(arr+16));// arr[4]

```

Let's break this down.
When the program comes to the statement `*arr`, it interprets that as "take the memory address stored in `arr`, and dereference it. Because `arr` is of type `int*`, pull the next 4 bytes because that is how big an int is."
But then, when the program comes to the statement `*(arr + 4)`, it has to first add 4 to the memory address. Essentially, this moves us up one integer in the array, and then we dereference _that_ value.
Note that there is implicitly no bounds checking in this operation. Once you have used `malloc` to acquire the starting memory address, for the purposes of indexing C doesn't keep track of how big that original block of space actually was. Therefore, there in the above example there is nothing stopping you from doing
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-26-1>)*(arr+(1000*sizeof(int)))

```

and accessing the theoretical 1000th element in the array, which will be some random point of unallocated memory, so it will read garbage bytes and could be anything. Similarly, there is nothing stopping you from using a negative index either, and going backwards to even smaller addresses like so:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-27-1>)*(arr+(-5*sizeof(int)))

```

This above construction is exactly what the [] operator does. It takes the size of the variable type being stored in the array, and multiplies it by the index that you are trying to get, treating the 0th index as the the value stored at the starting pointer itself. Therefore, this is undefined behavior:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-28-1>)printf("%d",arr[-5]);

```

In _most_ implementations of C, this will just go 5 spaces back in memory to whatever is there, but that is **not guaranteed by anything in the C specification**. In other words, there is a formal specification for the C programming language, which says that accessing beyond (or before) the bounds of an array is **undefined behavior** , so any particular compiler could do whatever they want and still be accurately implementing C. In reality, however, most implementations will just do what we described above, because it is the simplest and quickest thing to do.
## A Note on Memory Leaks
Throughout all of the above examples, we called `malloc` to manually allocate data on the heap, but then we never actually told the program that we were done with it. This wasn't a problem for these toy examples because when the program exited all of the memory was reclaimed by the Operating System, but in larger programs this would lead to a **memory leak**. Essentially, the program was never told that that specific location of memory is no longer in use, so it didn't know it could reuse it. On a small scale you probably have enough memory so this isn't a problem. But if you have a larger application which has to run 24/7 (think a web server) then this can lead to a huge problem because eventually the program will run out of memory on the heap and crash.
Here is a simple example of a memory leak.
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-29-1>)#define TRUE 1
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-29-2>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-29-3>)voiddo_work(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-29-4>)int*arr=malloc(sizeof(int)*10000);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-29-5>)// do cool things with this value...
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-29-6>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-29-7>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-29-8>)intmain(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-29-9>)while(TRUE){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-29-10>)do_work();
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-29-11>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-29-12>)}

```

Let's imagine this program is running constantly. Each time the function `do_work` is called, it will allocate space in the heap for 100 integers. Eventually, however, there will not be enough space to get another 100 integers, so the program will crash. If you let this program run for long enough, it will eventually crash.
To fix this, you have to call a function called `free` and pass in the pointer. So the above example would be fine if we made it look like this:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-30-1>)#define TRUE 1
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-30-2>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-30-3>)voiddo_work(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-30-4>)int*arr=malloc(sizeof(int)*100);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-30-5>)// do cool things with this value...
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-30-6>)free(arr);// we are done with this int arr, so free it
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-30-7>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-30-8>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-30-9>)intmain(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-30-10>)while(TRUE){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-30-11>)do_work();
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-30-12>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-30-13>)}

```

The `free` function will be able to know that that block of space was for 100 ints, and it will mark all of that space as available for use in the future. (Note: it doesn't actually erase the values there, however, so if you then immediately after try to ask for space for another 100 integers, it is very likely that C will end up setting the new array to the same starting address as the old one! This should not be relied upon, however, since it is an effect of the C implementation (compiler) and not the C Standard.)
## A Note on Strings
Earlier I mentioned that strings in C are just arrays of chars, which meant that they are just pointers to chars. Hopefully, this makes sense now. Here is a common example of string manipulation in C. Note that now we are adding parameters to the main function to take in command line arguments. If you are familiar with Java, these parameters should look very similar.
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-31-1>)#include<stdio.h> // printf
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-31-2>)#include<string.h> // strlen
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-31-3>)#include<stdlib.h> // malloc
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-31-4>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-31-5>)intmain(intargc,char**argv){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-31-6>)// Not checking bounds in argv for brevity...
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-31-7>)// Assume the user passes in one command line arg, which
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-31-8>)// will be stored in argv[1] (argv[0] is the program name)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-31-9>)printf("%d\n",argc);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-31-10>)printf("%s\n",argv[0]);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-31-11>)printf("%s\n",argv[1]);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-31-12>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-31-13>)// + 1 to include null terminating character '\0'
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-31-14>)intstring_length=strlen(argv[1])+1;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-31-15>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-31-16>)char*buffer=malloc(sizeof(char)*string_length);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-31-17>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-31-18>)strncpy(buffer,argv[1],string_length);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-31-19>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-31-20>)printf("buffer: %s\n",buffer);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-31-21>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-31-22>)// do work on the buffer....
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-31-23>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-31-24>)free(buffer);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-31-25>)}

```

And here is example output of this program:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-32-1>)tyler:/tmp$./a.outHello!
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-32-2>)2
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-32-3>)./a.out
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-32-4>)Hello!
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-32-5>)buffer:Hello!

```

Let's break down this program.
First, we analyze the command line arguments passed through. In the example program, they are equal to the following values
value | reasoning  
---|---  
argc | 2 | One command line arg passed in, plus the implict name of the program.  
argv[0] | "./a.out" | The name of the program  
argv[1] | "Hello!" | The command line argument passed in  
argv[2] | undefined behavior | This is outside the bounds of the argv array, so it could be anything!  
In the code, I wrote the type of `argv` as `char** argv`. But, it could also be written as `char* argv[]`. Because arrays in C are just pointers, these are the same thing, but the latter may help you wrap your head around the concept. 
We know that `char*` is how we store strings, because the pointer is a pointer to the first byte of the string, and each subsequent byte is the next character in the string (with the last character being '\0', specifying the end of the string).
Therefore, `char* argv[]` is an array of strings. So the first indexing operating, if you were to index at index `i`, returns the `i`th string in the array. Then if you were to index further at index `j`, you would get the `j`th character in the `i`th string. In code, this is `argv[i][j]`. But most of the time you arent indexing into characters of strings, so `argv[i]` just gives you the `i`th string, which is of type `char*`. You can pass in this value to functions that expect string input, like `strlen`.
And coming full circle, since arrays are just pointers, you can rewrite `char* argv[]` as `char** argv`.
Now that we've explained how `argc` and `argv` work, we can move onto the actual logic of the program.
After printing the values of `argc` and `argv` for demonstration purposes, we get the length of `argv[1]`, which is what the user typed in. In the example, this was equal to `"Hello!"`. When we call `strlen` on this string, we get the expected value of 6, since there are 6 characters in the string.
**HOWEVER** , that is not the amount of bytes it takes to store a string in C! Remember, there is nothing on the stack or heap itself that says how large an array is. So, for strings, they are terminated by the **null terminator** character `\0`. The backslash is important here. If we just wrote `'0'`, then that would correspond to the ASCII value of 48, since that representing the digit 0. But `\0` literally means 0 in memory, that being a sequence of bits which looks like `0000 0000`. (Remember, 8 bits = 1 byte, so that is how many bits it takes to store a char). So when I typed in `"Hello!"` into the terminal, when that gets placed into `argv[1]`, in memory it actually looks like this:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-33-1>)argv[6] = '\0' (ASCII 0)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-33-2>)argv[5] = '!' (ASCII 33)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-33-3>)argv[4] = 'o' (ASCII 111)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-33-4>)argv[3] = 'l' (ASCII 108)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-33-5>)argv[2] = 'l' (ASCII 108)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-33-6>)argv[1] = 'e' (ASCII 101)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-33-7>)argv[0] = 'H' (ASCII 72)

```

With this in mind, that is why we add an additional 1 to the result of `strlen`, because we are going to create a **buffer** on the heap where we will store the string. A buffer is a general term we use when we have a space in memory where we hold some value temporarily as we either wait for more input, or perform operations on it. In this case, we are copying the command line argument into the buffer (that lives on the heap), and you could imagine later on we would do some string processing on this buffer and return some sort of result.
The size of this buffer will be 7, not 6, because it needs enough room to store the final `'\0` character. Forgetting this + 1 to the result of `strlen` is an incredibly common error in C.
The last piece of the puzzle is `strncpy`. This function takes in two pointers, `dest` and `src`, and copies `n` characters from `src` to `dest`. So we copy exactly the number of characters needed into this buffer.
## Polymorphism: Back to C++
So, all of this is fine and good for a lower level language like C, where we have to do a lot of pointer arithmetic manually to even use things like strings. But what about in a higher level lanaguage like C++, where you have an `std::string` type for strings, and `std::vector` for dynamically sized arrays? Well, pointers are (surprise!) still incredibly important in C++ for other reasons. We will go over one of them here that arises when doing Object Oriented Programming.
Before we do this however, a quick primer on C++ syntax and how it compares to C:
### C++ Syntax
To allocate memory on the heap:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-34-1>)int*num=newint;

```

This is equivalent to 
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-35-1>)intnum=malloc(sizeof(int));

```

This is nice because you don't have to specify the size.
To free memory on the heap:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-36-1>)deletenum;

```

which is equivalent to the following C code:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-37-1>)free(num);

```

### Pointers and Polymorphism
Consider the following C++ program. It is written in the context of a hypothetical game. There is an abstract base class `Enemy` from which `Skeleton` and `Zombie` derive from. Read through the comments in the code as they explain various parts of it. Note that various functions you would have for most classes (e.g. constructors and destructors) are not present to make the example more focused. 
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-1>)#include<iostream>
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-2>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-3>)classEnemy{
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-4>)public:
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-5>)// Virtual means that the function can be overridden by any deriving class. 
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-6>)// In Java, all methods are virtual by default, but in C++ you have to specify it.
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-7>)virtualvoidtalk(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-8>)std::cout<<"I am an enemy."<<std::endl;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-9>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-10>)};// don't forget semicolon after the class definition!
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-11>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-12>)// Note the syntax for inheritance: Skeleton "inherits" from Enemy. For normal cases this will always be public.
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-13>)classSkeleton:publicEnemy{
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-14>)public:
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-15>)// Note two things:
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-16>)// 1. the "override" keyword guarantees at compile time that this function is overriding a 
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-17>)//  virtual function from the base class. This helps improve code readability, and helps
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-18>)//  protect against errors where you might accidentally spell one of the function names
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-19>)//  wrong, because then it would be a compile error since the function names don't match up.
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-20>)// 2. note that this function is not virtual because it is not expected to be overridden again.
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-21>)voidtalk()override{
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-22>)std::cout<<"I am in eternal pain."<<std::endl;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-23>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-24>)};
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-25>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-26>)classZombie:publicEnemy{
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-27>)public:
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-28>)voidtalk()override{
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-29>)std::cout<<"Mmmmmmm Brains"<<std::endl;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-30>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-31>)};
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-32>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-33>)intmain(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-34>)Zombiezombie;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-35>)Skeletonskeleton;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-36>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-37>)zombie.talk();
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-38>)skeleton.talk();
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-38-39>)}

```

If we run this program, we get the following output:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-39-1>)Mmmmmmm Brains
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-39-2>)I am in eternal pain.

```

If you have seen object oriented programming before, this shouldn't be too groundbreaking. Some important things to note are:
  1. We are not using any pointers or manual memory management, which is why we aren't getting much benefit out of this object oriented structure.
  2. Therefore, everything we are doing is currently being stored on the stack. If you are familiar with Java, then you'll know that objects in Java are inherently stored on the heap. This is not true, however, for C++, as objects created in this manner will still be stored on the stack. This works because we are defining the variables as of types Zombie and Skeleton, and the compiler knows the relative sizes of those. (In this case they aren't storing much data, but you can imagine they might have many member variables). If you want to be convinced, you can do a simple experiment:


```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-40-1>)intmain(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-40-2>)Zombiezombie;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-40-3>)Skeletonskeleton;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-40-4>)intstackInt=0;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-40-5>)int*heapInt=newint;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-40-6>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-40-7>)std::cout<<"zombie address: "<<&zombie<<"\n";
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-40-8>)std::cout<<"skeleton address: "<<&skeleton<<"\n";
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-40-9>)std::cout<<"stackInt address: "<<&stackInt<<"\n";
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-40-10>)std::cout<<"heapInt address: "<<&heapInt<<"\n";
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-40-11>)std::cout<<"address of int that heapInt points to: "<<heapInt<<std::endl;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-40-12>)}

```

This program (when I ran it) gave the following output:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-41-1>)zombie address: 0x7ffdcccc7ca0
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-41-2>)skeleton address: 0x7ffdcccc7ca8
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-41-3>)stackInt address: 0x7ffdcccc7c9c
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-41-4>)heapInt address: 0x7ffdcccc7cb0
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-41-5>)address of int that heapInt points to: 0x558f9f478eb0

```

Now, the exact values here are not important. What is important to note is that the memory addresses for `zombie`, `skeleton`, `stackInt`, and `heapInt` are all close to each other, while the memory address for the integer pointed to by `heapInt` is far away. This lets us know that all of the memory addresses beginning with 0x7ffd are on the stack, while the address beginning with 0x558f is on the heap. (Note that the & syntax means "the address of." So `&zombie` means the memory address of the zombie object. When we say `&heapInt` we mean the address of the pointer that points to the int on the heap, so this gives the memory address on the stack that contains the memory address for an integer on the heap.) This is confusing, so if you're having trouble understanding this, take some time to digest it, or ask questions if needed.
If this were java, then the zombie and skeleton would implicitly be like the `heapInt` pointer. On the stack would be a pointer that points to the object in the heap. But this is C++, so since we didn't say `new` it lives on the stack in its entirety.
In this hypothetical game, imagine that we have a list of all the enemies which are currently alive. A naive approach would be to set up something like this. (Note we are using the standard library vector class, which is similar to ArrayList in Java, or any dynamic array in other languages).
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-42-1>)#include<vector>
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-42-2>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-42-3>)intmain(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-42-4>)// Just creating objects to place into the lists...
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-42-5>)// You can imagine this is done elsewhere by some game system that spawns enemies
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-42-6>)Zombiez1;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-42-7>)Zombiez2;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-42-8>)Zombiez3;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-42-9>)Skeletons1;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-42-10>)Skeletons2;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-42-11>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-42-12>)std::vector<Zombie>aliveZombies{z1,z2,z3};
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-42-13>)std::vector<Skeleton>aliveSkeletons{s1,s2};
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-42-14>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-42-15>)for(inti=0;i<aliveZombies.size();i++){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-42-16>)aliveZombies[i].talk();
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-42-17>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-42-18>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-42-19>)for(inti=0;i<aliveSkeletons.size();i++){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-42-20>)aliveSkeletons[i].talk();
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-42-21>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-42-22>)}

```

```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-43-1>)Mmmmmmm Brains
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-43-2>)Mmmmmmm Brains
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-43-3>)Mmmmmmm Brains
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-43-4>)I am in eternal pain.
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-43-5>)I am in eternal pain.

```

This works and prints the output you would expect, but still is obviously not ideal, because for every enemy we add to the game we still have to go through the code and add another entire list to deal with it. What we want is one list that can hold any enemy, so it makes the most sense to just have _one_ vector which holds a type `Enemy`, then to add any new enemy we just have to create a class that derives from `Enemy`. A first attempt would look like this:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-44-1>)#include<vector>
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-44-2>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-44-3>)intmain(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-44-4>)Skeletons1,s2,s3;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-44-5>)Zombiez1,z2,z3;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-44-6>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-44-7>)std::vector<Enemy>aliveEnemies;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-44-8>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-44-9>)// using push_back to add everything individually instead of an initializer list
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-44-10>)// another way to add things to a vector, probably the most common
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-44-11>)aliveEnemies.push_back(s1);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-44-12>)aliveEnemies.push_back(s2);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-44-13>)aliveEnemies.push_back(s3);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-44-14>)aliveEnemies.push_back(z1);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-44-15>)aliveEnemies.push_back(z2);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-44-16>)aliveEnemies.push_back(z3);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-44-17>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-44-18>)for(inti=0;i<aliveEnemies.size();i++){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-44-19>)aliveEnemies[i].talk();
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-44-20>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-44-21>)}

```

When we run this program, we get this:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-45-1>)I am an enemy.
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-45-2>)I am an enemy.
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-45-3>)I am an enemy.
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-45-4>)I am an enemy.
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-45-5>)I am an enemy.
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-45-6>)I am an enemy.

```

What's going on? Does inheritance just not work in C++?
Well, what's happening is that we defined the vector as a vector of `Enemy`, so when we placed the `Zombie` and `Skeleton` objects inside of it, from that point on we essentially lost a lot of information from the vector's point of view. In essence, the vector just knows that it has objects of type `Enemy` inside of it. To get the expected behavior for polymorphism, you need to use pointers. This is an example of how you would do it:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-46-1>)intmain(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-46-2>)Enemy*obj1=newSkeleton();
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-46-3>)Enemy*obj2=newZombie();
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-46-4>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-46-5>)std::vector<Enemy*>aliveEnemies;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-46-6>)aliveEnemies.push_back(obj1);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-46-7>)aliveEnemies.push_back(obj2);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-46-8>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-46-9>)for(inti=0;i<aliveEnemies.size();i++){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-46-10>)aliveEnemies[i]->talk();
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-46-11>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-46-12>)}

```

This gives the expected output:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-47-1>)I am in eternal pain.
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-47-2>)Mmmmmmm Brains

```

Lets break down what's going on here.
First, we defined our enemy objects a little differently. Before, we defined them like this:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-48-1>)Zombiez1;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-48-2>)Skeletons1;

```

This is how you create an object in C++ on the stack. Implicitly, we are calling the default constructor. If we had a constructor for these classes we needed to call (say, pass in an HP value), it would look like this:
(If you aren't familiar with constructors, we will talk about them in a bit.)
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-49-1>)Zombiez1(100);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-49-2>)Skeletons1(50);

```

We even could have used a slightly different syntax, which more closely resembles how we initialize data on the heap:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-50-1>)Zombiez1=Zombie();
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-50-2>)Skeletons1=Skeleton();

```

Note that for this last example, however, we are **NOT** using the keyword **new** , because we are not allocating memory on the heap. When creating an object like this, we are still placing it on the stack.
Let's take a look at how we created these objects dynamically in the example that worked:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-51-1>)Enemy*obj1=newZombie();
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-51-2>)Enemy*obj2=newSkeleton();

```

Remember, when you are doing dynamic memory allocation you are handling memory in two different places at once. You need memory in the stack to hold the pointer, and memory on the heap to store the object.
On the stack, we are creating a pointer of type `Enemy*`, which points to a location in memory which contains a `Zombie`. This means that whenever you use this pointer, you can only use this pointer to do things that the `Enemy` class can do! Say, we extended the `Zombie` class to have an additional `void` function called `eatBrains()`. We would **NOT** be able to write `obj1->eatBrains()` **EVEN THOUGH** the memory that the pointer points to on the heap is actually a `Zombie`! At _compile-time_ , the compiler wants to make sure the types all will work out, and it will see that you are using a pointer to an `Enemy` and calling a function that does not exist on `Enemy`, so it will lead to a compile time error. That specific error would look like this:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-1>)#include<iostream>
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-2>)#include<vector>
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-3>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-4>)classEnemy{
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-5>)public:
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-6>)virtualvoidtalk(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-7>)std::cout<<"I am an enemy."<<std::endl;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-8>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-9>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-10>)};
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-11>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-12>)classSkeleton:publicEnemy{
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-13>)public:
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-14>)voidtalk()override{
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-15>)std::cout<<"I am in eternal pain."<<std::endl;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-16>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-17>)};
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-18>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-19>)classZombie:publicEnemy{
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-20>)public:
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-21>)voidtalk()override{
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-22>)std::cout<<"Mmmmmmm Brains"<<std::endl;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-23>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-24>)voideatBrains(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-25>)// do something, like perhaps eating brains
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-26>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-27>)};
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-28>)intmain(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-29>)Enemy*obj1=newZombie();
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-30>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-31>)obj1->eatBrains();
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-52-32>)}

```

```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-53-1>)test.cpp:Infunction‘intmain()’:
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-53-2>)test.cpp:41:11:error:‘classEnemy’hasnomembernamed‘eatBrains’
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-53-3>)41|obj1->eatBrains();
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-53-4>)|^~~~~~~~~

```

BUT if we did change the declaration of `obj1` to look like this:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-54-1>)Zombie*obj1=newZombie();

```

Then the call to `eatBrains()` would be allowed because the compiler knows that `obj1` is a pointer to a zombie.
Let's get back to the original example. So far we've worked out explanation up until this point:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-55-1>)Enemy*obj1=newSkeleton();
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-55-2>)Enemy*obj2=newZombie();
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-55-3>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-55-4>)std::vector<Enemy*>aliveEnemies;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-55-5>)aliveEnemies.push_back(obj1);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-55-6>)aliveEnemies.push_back(obj2);

```

Now we are creating a `vector` of `Enemy*`. This means that every item inside of the `vector` has to be a pointer to an enemy. This works, because we defined `obj1` and `obj2` to be `Enemy*`, so we can slot them inside of the vector no problem. 
It is important to note, however, that if we had defined these pointers like this instead
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-56-1>)Skeleton*obj1=newSkeleton();
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-56-2>)Zombie*obj2=newZombie();

```

Then we still would have been able to slot them into the vector fine because when the compiler sees that a `Zombie*` is being placed inside of a `vector` that holds `Enemy*`, it knows that is okay because `Zombie` inherits from `Enemy`. (`Zombie` **is an** `Enemy`, if you rememeber your inheritance relationships.) However, once you are inside of the vector and indexing from it, you can only treat the pointer as if it were an `Enemy*` pointer. 
And this makes sense. Imagine you wrote a piece of code that randomly generated enemies and then placed them in the vector. Later on, when you are iterating through the vector each individual enemy could be either a `Zombie` or a `Skeleton`, and you would have no way of knowing at compile time which was which.
Of course, however, if you were unable to get different behavior based on what kind of enemy was in the vector then that wouldn't be very useful, which is why we have `virtual` functions and polymorphism. **Because the vector contains`Enemy*` , you are able to call `talk()` beacuse it exists as a function on `Enemy`. When you call the `talk` function it is able at runtime to call the correct version of the `talk` function based on what actual object exists on the heap.**
So, if we are in an iteration of the for loop at the bottom of the example, we have a given `Enemy*` in the form of `aliveEnemies[i]`. This we are able to dereference and follow the pointer to the heap (`aliveEnemies[i]->`). Then, when we call the `talk` function using `aliveEnemies[i]->talk()` it is able to call the correct overridden function based on the data it found on the heap.
You do not get this behavior when you don't use pointers, like in the above example where it just printed out "I am an Enemy" repeatedly.
## Another Example of Pointers: Linked Lists
Let's say I wanted to make my own linked list data structure, but didn't know about pointers. This would also lead me down another pitfall, and understanding why this doesn't work will give you more insight on why pointers are extremely useful.
If you are not familiar with a linked list, a linked list is another type of structure, like an array, which lets you store a series of values. The main distinguishing feature about linked lists, however, is that they are a loose collection of "nodes" which only know about the nodes around it.
Consider this list:
1, 10, 5, 7
The first item is 1. This would be the `head` node. The head node would know it's own value (1) and how to get to the next node (using a pointer). This would continue on until the last node, where you could have the final pointer be `nullptr`, signifying there is no additional item in the list.
But what if we didn't want to use pointers? What would a potential `Node` struct definition look like?
_(tangent: in C you only have structs, but in C++ you have structs and classes. The main difference is that structs are by default public, while classes are by default private. So I'm just using a struct here because it is easier to write without having to specify things as public or private or define propper getter/setters because everything is just public.)_
Well, it would look something like this:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-57-1>)structNode{
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-57-2>)intvalue;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-57-3>)Nodenext;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-57-4>)};

```

If you try to compile this, your compiler will yell at you. 
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-58-1>)test.cpp:6:10:error:field‘next’hasincompletetype‘Node’
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-58-2>)6|Nodenext;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-58-3>)|^~~~
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-58-4>)test.cpp:4:8:note:definitionof‘structNode’isnotcompleteuntiltheclosingbrace
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-58-5>)4|structNode{
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-58-6>)|^~~~
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-58-7>)test.cpp:7:2:error:expected‘;’afterstructdefinition
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-58-8>)7|}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-58-9>)|^
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-58-10>)|;

```

You can conceptualize why this doesn't work by following this line of logic: the compiler needs to know the size of `Node`, so it goes in and figures out the following:
  * "Oh, there's an `int`, so I know that will take up 4 bytes. Good, let's write that down"
  * "Oh, there's a `Node`, let me go check how large a `Node` should be.... Oh wait, I'm currently defining a `Node`, so I don't know how large this should be...."


And then it errors. If you were to put a size to this struct, it would actually be infinity because each `Node` contains a `Node` which contains a `Node` which contains a `Node`....
If we switch it to use a pointer, then everything works, and we get our nice little linked list.
Final Note: If you want a linked list in C++, don't write one yourself. There are much better ways to set up linked lists than the bare bones basic one described here (e.g. a `tail` node and `prev` pointers, to start), and they get complicated. Also, C++ gives you a Linked List for free in the form of `std::list`. Just `#include <list>` and you are good to go.
If you are using C, then try to find somebody who has already written a linked list in some library online. The only case I can think of for why you might write a linked list yourself would be if 1. You are doing it for learning (Pop off) 2. You are doing a class assignment and are not allowed to use outside code.
But either way, you might make your own data structure which requires pointers for a similar reason, so it's useful to understand the mechanics behind them.
## Using Pointers to Resolve Circular Dependencies
Another reason to use pointers in C++ is to resolve something called a circular dependency. So far, all the code examples have been given as if they were written in one file, but most of the time that is not true. It is good to split code into multiple files so that no one individual file is too big to browse, and so that you have modular pieces of code which can be slotted into other programs if you so desire.
But when you start writing bigger programs, you might run into something confusing like this:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-59-1>)// A.h
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-59-2>)#pragma once // or equivalent header guard
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-59-3>)#include"B.h"
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-59-4>)structA{
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-59-5>)Bb;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-59-6>)};
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-59-7>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-59-8>)// B.h
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-59-9>)#pragma once // or equivalent header guard
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-59-10>)#include"A.h"
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-59-11>)structB{
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-59-12>)Aa;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-59-13>)};
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-59-14>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-59-15>)// main.cpp
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-59-16>)#include"A.h"
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-59-17>)#include"B.h"
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-59-18>)intmain(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-59-19>)// do stuff
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-59-20>)}

```

If you try to compile this program, you get the following output:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-60-1>)tyler:/tmp$g++main.cpp
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-60-2>)InfileincludedfromA.h:3,
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-60-3>)frommain.cpp:1:
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-60-4>)B.h:5:5:error:‘A’doesnotnameatype
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-60-5>)5|Aa;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-60-6>)|^

```

Let's trace the compilation of the program and understand why this happens and what is wrong.
  1. You start compiling `main.cpp`. The first thing you do is `#include "A.h"` This literally copies the contents of `A.h` into `main.cpp`, but for now we will imagine it as we are going to that file to compile that code.
  2. We are now in `A.h` The first thing we do is `#include "B.h"`.
  3. We are now in `B.h`. We are defining a struct `B`. But `B` needs to know about `A`, and `A` hasn't been defined yet. ERROR!


This is a circular dependency. `A` needs to know about `B`, while at the same time `B` needs to know about `A`. How do we solve this? Is this even something that can be solved? 
(Is this something that ever would actually happen? -> The answer to this is yes, but here is just a distilled version with the simplest possible setup.)
The first way you might think to solve this, considering this is a pointer workshop, is by changing the types of the data members in the structs to be pointers. So, our code would look like:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-61-1>)// A.h
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-61-2>)#pragma once // or equivalent header guard
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-61-3>)#include"B.h"
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-61-4>)structA{
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-61-5>)B*b;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-61-6>)};
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-61-7>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-61-8>)// B.h
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-61-9>)#pragma once // or equivalent header guard
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-61-10>)#include"A.h"
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-61-11>)structB{
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-61-12>)A*a;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-61-13>)};
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-61-14>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-61-15>)// main.cpp
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-61-16>)#include"A.h"
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-61-17>)#include"B.h"
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-61-18>)intmain(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-61-19>)// do stuff
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-61-20>)}

```

This will give the same error, because inherently we have the same problem: `A` is not a defined type when we are trying to compile `B`, so we can't compile B.
But to compile it just generally needs to know the size and types of things, and the compiler shouldn't need to know anything about the specifics of `A` to allow `B` to contain an `A*` inside of it. So, we can play a little game and trick the compiler. Look at this code:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-62-1>)// A.h
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-62-2>)#pragma once // or equivalent header guard
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-62-3>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-62-4>)structB;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-62-5>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-62-6>)structA{
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-62-7>)B*b;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-62-8>)};
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-62-9>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-62-10>)// B.h
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-62-11>)#pragma once // or equivalent header guard
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-62-12>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-62-13>)structA;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-62-14>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-62-15>)structB{
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-62-16>)A*a;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-62-17>)};
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-62-18>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-62-19>)// main.cpp
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-62-20>)#include"A.h"
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-62-21>)#include"B.h"
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-62-22>)intmain(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-62-23>)// do stuff
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-62-24>)}

```

This will actually work. But why?
Essentially, we replaced our `#include` with just an empty struct definition. Then, you use that empty struct definition as a valid type for a pointer. What you are saying, basically, is "Hey compiler, this struct `B` here needs inside of it an `A*`, but you don't really need to know much about `A` for this to compile, so I'm just going to put a dummy definition for `A` so that this type is valid. Later on, I'll actually define the real definition for `A`, and you'll overwrite my dummy definition which does nothing."
Therefore, we aren't `#include`ing anything, and there is no longer a circular dependency.
This is actually a good pattern to follow for anytime you are defining a class that only needs pointers to certain things. If you can get away with `#include`ing something in a header file by doing this empty struct/class definition, you should.
## Constructors & Destructors in C++
Constructors and destructors in C++ are very useful tools for managing memory at the object level. Remember, to prevent memory leaks you need to make sure you `delete` any memory that you have manually allocated with `new`.
But often times this can get tricky, especially in the context of C programs where you do not have classes. You might have random functions allocating memory and deallocating memory, and it can become hard to keep track of who is responsible for freeing and taking care of everything.
With classes in C++, however, it becomes a lot simpler. Let's tackle this through an example `Location` class which you imagine could be used in a video game to encapsulate all of the logic and data needed for a specific location in the world.
### Constructor
To start, what is a constructor? A constructor defines how you create and initialize an object.
By default, every class and struct has a default constructor, which takes no arguments and does nothing.
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-63-1>)classLocation{
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-63-2>)// Implicitly has a default constructor, which can be called
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-63-3>)// with either of these statements;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-63-4>)//   Location loc = Location();
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-63-5>)//   Location loc;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-63-6>)};

```

But perhaps a location has certain attributes associated with it that should be initialized on creation.
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-64-1>)// Location.h
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-64-2>)#ifndef LOCATION_H
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-64-3>)#define LOCATION_H
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-64-4>)#include<string>
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-64-5>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-64-6>)classLocation{
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-64-7>)public:
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-64-8>)Location(std::stringname,intaltitude){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-64-9>)// Note usually you would define this in a separate cpp file,
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-64-10>)// not in the header file
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-64-11>)this->name=name;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-64-12>)this->altitude=altitude;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-64-13>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-64-14>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-64-15>)private:
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-64-16>)std::stringname;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-64-17>)intaltitude;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-64-18>)};
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-64-19>)#endif LOCATION_H

```

Now you could create a location like this:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-65-1>)#include"Location.h"
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-65-2>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-65-3>)intmain(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-65-4>)// both valid
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-65-5>)Locationloc1=Location("Mountain",5000);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-65-6>)Locationloc2("Beach",0);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-65-7>)}

```

But the default constructor would no longer exist:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-66-1>)#include"Location.h"
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-66-2>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-66-3>)intmain(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-66-4>)// both valid
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-66-5>)Locationloc1=Location("Mountain",5000);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-66-6>)Locationloc2("Beach",0);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-66-7>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-66-8>)Locationloc3;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-66-9>)}

```

```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-67-1>)main.cpp:23:14:error:nomatchingfunctionforcallto‘Location::Location()’
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-67-2>)23|Locationloc3;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-67-3>)|^~~~
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-67-4>)main.cpp:5:9:note:candidate:‘Location::Location(std::string,int)’
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-67-5>)5|Location(std::stringname,intaltitude){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-67-6>)|^~~~~~~~
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-67-7>)main.cpp:5:9:note:candidateexpects2arguments,0provided
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-67-8>)main.cpp:3:7:note:candidate:‘Location::Location(constLocation&)’
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-67-9>)3|classLocation{
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-67-10>)|^~~~~~~~
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-67-11>)main.cpp:3:7:note:candidateexpects1argument,0provided
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-67-12>)main.cpp:3:7:note:candidate:‘Location::Location(Location&&)’
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-67-13>)main.cpp:3:7:note:candidateexpects1argument,0provided

```

So, if you still wanted there to be a default constructor, you would have to explicitly define one:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-68-1>)// Location.h
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-68-2>)#ifndef LOCATION_H
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-68-3>)#define LOCATION_H
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-68-4>)#include<string>
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-68-5>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-68-6>)classLocation{
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-68-7>)public:
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-68-8>)Location(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-68-9>)// set some default values...
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-68-10>)this->name="";
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-68-11>)this->altitude=0;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-68-12>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-68-13>)Location(std::stringname,intaltitude){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-68-14>)this->name=name;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-68-15>)this->altitude=altitude;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-68-16>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-68-17>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-68-18>)private:
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-68-19>)std::stringname;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-68-20>)intaltitude;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-68-21>)};
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-68-22>)#endif LOCATION_H

```

Now, lets do some manual memory allocation in the constructor:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-1>)// Location.h
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-2>)#ifndef LOCATION_H
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-3>)#define LOCATION_H
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-4>)#include<string>
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-5>)#include<vector>
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-6>)#include"Enemy.h" // imagine we have our enemies from earlier defined here...
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-7>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-8>)classLocation{
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-9>)public:
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-10>)// removed the default constructor to force you to specify
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-11>)// value when created
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-12>)Location(std::stringname,intaltitude){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-13>)this->name=name;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-14>)this->altitude=altitude;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-15>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-16>)for(inti=0;i<10;i++){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-17>)// You could imagine these are random
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-18>)// for a real game, and that there is 
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-19>)// more complicated spawning logic
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-20>)enemies.push_back(newSkeleton(100));
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-21>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-22>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-23>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-24>)private:
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-25>)std::stringname;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-26>)intaltitude;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-27>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-28>)std::vector<Enemy*>enemies;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-29>)};
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-69-30>)#endif LOCATION_H

```

....So using this location might look like this:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-70-1>)// assume we have proper includes
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-70-2>)intmain(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-70-3>)Location*loc=newLocation("Mountain",10000);
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-70-4>)// Do stuff with location...
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-70-5>)// Now it has 10 skeletons inside of it
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-70-6>)}

```

So we placed the call to `new` inside of the constructor for `Location`, and we know that every call to `new` should have a corresponding call to `delete`. So where do we put the delete calls? Do you have to manually figure out where the `Location` is going to go out of scope and then clear out the `std::vector` of enemies? What if we don't want this vector to be public to outside code?
The simplest answer, of course, is destructors.
### Destructor
A correct destructor for our `Location` would look like this:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-1>)// Location.h
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-2>)#ifndef LOCATION_H
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-3>)#define LOCATION_H
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-4>)#include<string>
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-5>)#include<vector>
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-6>)#include"Enemy.h" // imagine we have our enemies from earlier defined here...
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-7>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-8>)classLocation{
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-9>)public:
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-10>)// removed the default constructor to force you to specify
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-11>)// value when created
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-12>)Location(std::stringname,intaltitude){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-13>)this->name=name;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-14>)this->altitude=altitude;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-15>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-16>)for(inti=0;i<10;i++){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-17>)// You could imagine these are random
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-18>)// for a real game, and that there is 
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-19>)// more complicated spawning logic
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-20>)this->enemies.push_back(newSkeleton(100));
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-21>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-22>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-23>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-24>)~Location(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-25>)for(inti=0;i<enemies.size();i++){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-26>)if(this->enemies[i]!=nullptr){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-27>)deletethis->enemies[i];
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-28>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-29>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-30>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-31>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-32>)private:
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-33>)std::stringname;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-34>)intaltitude;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-35>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-36>)std::vector<Enemy*>enemies;
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-37>)};
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-71-38>)#endif LOCATION_H

```

Note the syntax for a destructor is exactly like a constructor (in that it has the same name as the class), but with a tilde (~) infront of it. This function will be run automatically when the object goes out of scope (if on the stack) or when manually deleted (if on the heap). Also note that destructors, unlike constructors, cannot have parameters as they are implicitly called.
### Caveat: Virtual Destructor
When using destructors with classes that might be overwritten, make sure to declare your destructor as `virtual`, which would look something like this:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-72-1>)classBase{
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-72-2>)Base(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-72-3>)// constructor
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-72-4>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-72-5>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-72-6>)virtual~Base(){
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-72-7>)// destructor, destroy things relevant to Base
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-72-8>)}
[](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/#__codelineno-72-9>)};

```

This will allow subclasses to write their own destructors, which will be correctly called in addition to the Base class's destructor when the object goes out of scope.
[This](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/stackoverflow.com/questions/461203/when-to-use-virtual-destructors>) stack overflow response explains this a little more in depth, but still concisely.
## Conclusion
Hopefully through this workshop you have gotten the hang of the "why" of pointers, and perhaps have started to get familiar with using them as well.
The only way to really get comfortable with pointers is to write programs that use them, so don't feel bad if this still is a little abstract. This knowledge can take a long time to really soak in and understand, and if you want practice I would recommend trying to write a C++ (or even C) program yourself that needs pointers. 
You can find many project ideas online, or potentially even find some work to be done in our Onboard Computer here in TUAS, which is currently written in C++.
November 9, 2023
Back to top 
Made with [ Material for MkDocs ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/squidfunk.github.io/mkdocs-material/>)
[ ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/github.com/tritonuas> "github.com") [ ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/gitlab.com/tuas> "gitlab.com") [ ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/hub.docker.com/orgs/tritonuas> "hub.docker.com") [ ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/medium.com/tuas> "medium.com") [ ](https://tritonuas.github.io/wiki/software/workshops/contents/05_pointers/<https:/facebook.com/tritonuas> "facebook.com")
