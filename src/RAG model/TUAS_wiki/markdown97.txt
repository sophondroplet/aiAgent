[ Skip to content ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#docker-and-virtualization>)
[ ![logo](https://tritonuas.com/wiki/assets/tuas_2020_favicon_white.svg) ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/> "TritonUAS Wiki")
TritonUAS Wiki 
04. Docker 
Initializing search 
[ GitHub  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/github.com/tritonuas/wiki/> "Go to repository")
  * [ Home ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/>)
  * [ General ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/general/town_hall_notes/>)
  * [ Onboarding ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/onboarding/foam_aircraft_project/>)
  * [ Hardware ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/hardware/wings/>)
  * [ Mechanical ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/mechanical/mechanical_home/>)
  * [ Electrical ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/electrical/electrical-overview/>)
  * [ Software ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/software_home/>)


[ ![logo](https://tritonuas.com/wiki/assets/tuas_2020_favicon_white.svg) ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/> "TritonUAS Wiki") TritonUAS Wiki 
[ GitHub  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/github.com/tritonuas/wiki/> "Go to repository")
  * [ Home  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/>)
  * General  General 
    * [ Town Hall Notes  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/general/town_hall_notes/>)
    * [ Test Flight  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/general/test_flight/>)
    * [ Repo Guide  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/general/repo_guide/>)
    * [ Useful Links  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/general/links/>)
    * [ Wiki Editing  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/general/wiki_editing/>)
    * [ Website Editing  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/general/website_editing/>)
  * Onboarding  Onboarding 
    * [ Foam Aircraft Project  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/onboarding/foam_aircraft_project/>)
    * [ Servos  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/onboarding/servos/>)
  * Hardware  Hardware 
    * [ Wings  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/hardware/wings/>)
    * [ Fuselage  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/hardware/fuselage/>)
    * [ VTOL  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/hardware/vtol/>)
    * [ Camera Gimbal  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/hardware/camera_gimbal/>)
    * [ Payload  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/hardware/payload/>)
    * [ GCS  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/hardware/gcs/>)
  * Mechanical  Mechanical 
    * [ Mechanical Home  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/mechanical/mechanical_home/>)
    * Competition Planes  Competition Planes 
      * [ Toothless  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/mechanical/toothless/toothless/>)
      * [ Duckasaurus  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/mechanical/duckasaurus/duckasaurus/>)
    * Onboarding Projects  Onboarding Projects 
      * [ The Marius  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/mechanical/onboarding-projects/the_marius/>)
    * Manufacturing  Manufacturing 
      * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/mechanical/manufacturing/manufacturing_overview/>)
      * [ Mold Manufacturing  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/mechanical/manufacturing/Mold_Manufacturing/>)
      * [ CNC Hot Wire Cutter  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/mechanical/manufacturing/CNC_hot_wire/>)
    * Design/Analysis  Design/Analysis 
      * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/mechanical/design-analysis/overview/>)
      * Optimization  Optimization 
        * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/mechanical/optimization/optimization_overview/>)
    * Tutorials  Tutorials 
      * [ Solidworks  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/mechanical/tutorials/solidworks/>)
      * [ Ansys  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/mechanical/tutorials/ansys/>)
      * [ Matlab/Optimization  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/mechanical/tutorials/matlab-optimization/>)
    * [ Mechanical Packing List  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/mechanical/packing_list/>)
  * Electrical  Electrical 
    * [ Electrical Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/electrical/electrical-overview/>)
    * [ Electronics Diagram  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/electrical/electronics-diagram/>)
    * Projects  Projects 
      * Airdrop  Airdrop 
        * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/electrical/projects/airdrop/overview/>)
        * [ Mechanism  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/electrical/projects/airdrop/drop_mechanism/>)
        * [ GPIO Setup  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/electrical/projects/airdrop/GPIO_setup/>)
        * [ Drop Calculation  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/electrical/projects/airdrop/drop_script/>)
      * [ Antenna Tracker  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/electrical/projects/antenna-tracker/>)
      * [ Power Board  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/electrical/projects/power-board/>)
      * Signals Board  Signals Board 
        * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/electrical/projects/signals-board/signals-board/>)
        * [ Sensor Input  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/electrical/projects/signals-board/sensor-input/>)
        * [ Signals Board Code  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/electrical/projects/signals-board/sigboard-code/>)
        * [ Signals Board Requirements  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/electrical/projects/signals-board/sigboard-reqs/>)
    * Communication  Communication 
      * [ CAN  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/electrical/communication/can/>)
      * [ I2C  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/electrical/communication/i2c/>)
      * [ MAVLink  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/electrical/communication/mavlink/>)
      * [ UART  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/electrical/communication/uart/>)
      * [ Wireless Communication  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/electrical/communication/wireless-comms/>)
    * Other Tutorials  Other Tutorials 
      * [ Fabrication  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/electrical/other-tutorials/fabrication/>)
      * [ Ardupilot/Pixhawk  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/electrical/other-tutorials/ardupilot-pixhawk/>)
  * Software  Software 
    * [ Software Home  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/software_home/>)
    * [ How to Contribute  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/how_to_contribute/>)
    * Reference  Reference 
      * [ Git  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/reference/git/>)
      * [ Computer Vision  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/reference/computer_vision/>)
      * [ Datahub  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/reference/datahub/>)
    * GCS  GCS 
      * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/gcs/gcs_overview/>)
      * [ Configuration  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/gcs/gcs_configuration/>)
      * Frontend  Frontend 
        * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/gcs/frontend/frontend_overview/>)
        * [ Pages  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/gcs/frontend/frontend_pages/>)
      * Backend  Backend 
        * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/gcs/backend/backend_overview/>)
        * [ Endpoints  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/gcs/backend/backend_endpoints/>)
    * OBC  OBC 
      * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/obc/obc_overview/>)
      * Pathing  Pathing 
        * [ RRT-Star  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/obc/pathing/rrt-star/>)
        * [ Coverage  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/obc/pathing/coverage/>)
      * Tick Architecture  Tick Architecture 
        * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/obc/tick_architecture/tick_overview/>)
        * [ Guide  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/obc/tick_architecture/guide/>)
        * Ticks  Ticks 
          * [ Mission Prep  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/missionprep/>)
          * [ Path Gen  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/pathgen/>)
          * [ Path Validate  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/pathvalidate/>)
          * [ Mav Upload  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/mavupload/>)
          * [ Takeoff  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/takeoff/>)
          * [ Fly Waypoints  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/flywaypoints/>)
          * [ Fly Search  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/flysearch/>)
          * [ CV Loiter  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/cvloiter/>)
          * [ Airdrop Prep  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/airdropprep/>)
          * [ Airdrop Approach  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/airdropapproach/>)
          * [ Manual Landing  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/manuallanding/>)
          * [ Auto Landing  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/autolanding/>)
          * [ Mission Done  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/missiondone/>)
    * Target Detection Team  Target Detection Team 
      * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/target_detection_team/target_detection_overview/>)
      * [ Saliency  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/target_detection_team/saliency/>)
      * [ Segmentation  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/target_detection_team/segmentation/>)
      * [ Classification  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/target_detection_team/classification/>)
    * Localization  Localization 
      * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/localization/localization_overview/>)
    * Dataset Generation  Dataset Generation 
      * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/dataset_generation/dataset_generation_overview/>)
    * Workshops  Workshops 
      * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/workshops_overview/>)
      * Contents  Contents 
        * [ 01. Unix/Command Line  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/01_unix_basics/>)
        * [ 02. Git/GitHub  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/02_git_deep_dive/>)
        * [ 03. HTTP/REST  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/03_http_and_rest/>)
        * 04. Docker  [ 04. Docker  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/>) Table of contents 
          * [ Setup  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#setup>)
            * [ Install Docker  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#install-docker>)
              * [ Note for Mac users  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#note-for-mac-users>)
              * [ Note for Linux users  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#note-for-linux-users>)
            * [ Hello World  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#hello-world>)
          * [ Deeper Dive  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#deeper-dive>)
            * [ What is Docker?  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#what-is-docker>)
            * [ Image vs Container?  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#image-vs-container>)
            * [ Image  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#image>)
            * [ Container  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#container>)
          * [ Ubuntu Container  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#ubuntu-container>)
          * [ Custom Image  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#custom-image>)
          * [ Docker Compose  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#docker-compose>)
          * [ Dev Containers  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#dev-containers>)
          * [ Summary  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#summary>)
        * [ 05. Pointers  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/>)
        * [ 06. Unit Tests  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/06_unit_tests/>)
        * [ 07. Design Patterns  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/07_design_patterns/>)
        * [ 08. Async Programming  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/08_async_programming/>)
        * [ 09. Continuous Integration  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/09_continuous_integration/>)
    * Onboarding  Onboarding 
      * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/onboarding/onboarding_overview/>)
      * Level 0  Level 0 
        * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_overview/>)
        * [ Python Tutorial  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_python/>)
        * [ Go Tutorial  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_go/>)
        * [ C++ Tutorial  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/>)
      * Level 1  Level 1 
        * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/onboarding/level_1/level_1_overview/>)
      * Level 2  Level 2 
        * [ Overview  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/onboarding/level_2/level_2_overview/>)
    * Miscellaneous  Miscellaneous 
      * [ Design Proposals  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/misc/design_review/>)
      * [ Nanostation Setup  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/misc/nanostations/>)
      * [ Passwords  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/misc/passwords/>)
      * [ Test Flight Checklist  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/misc/test_flight_checklist/>)


Table of contents 
  * [ Setup  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#setup>)
    * [ Install Docker  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#install-docker>)
      * [ Note for Mac users  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#note-for-mac-users>)
      * [ Note for Linux users  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#note-for-linux-users>)
    * [ Hello World  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#hello-world>)
  * [ Deeper Dive  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#deeper-dive>)
    * [ What is Docker?  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#what-is-docker>)
    * [ Image vs Container?  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#image-vs-container>)
    * [ Image  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#image>)
    * [ Container  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#container>)
  * [ Ubuntu Container  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#ubuntu-container>)
  * [ Custom Image  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#custom-image>)
  * [ Docker Compose  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#docker-compose>)
  * [ Dev Containers  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#dev-containers>)
  * [ Summary  ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#summary>)


# Docker and Virtualization
Docker is a tool we use extensively at Triton UAS, and in general it and similar container tools are very useful for making a consistent development or production environment in which a program can run. If you have ever tried to run a program that worked on your friend's computer but not yours, then you have felt the pain that Docker can solve.
## Setup
To get setup with Docker we will download Docker and run a simple "Hello World" container.
### Install Docker
If you don't already have Docker installed, follow the steps on [this page](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/docs.docker.com/get-docker/>) for your operating system.
To check if you have it installed, open a terminal and run `docker --version`. On Windows you can open Command Prompt, Powershell or the Windows Terminal. On macOS you can use the built in Terminal application. On Linux you can use whatever terminal app your distribution ships with.
Once you have Docker installed, you should see something like this: 
docker --version```
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-0-1>)Docker version 24.0.6, build ed223bc820

```

#### Note for Mac users
Make sure to download the correct version of Docker Desktop for your CPU architecture. If you have an Apple Sillicon processor (such as the M1 or M2 chips), download the Apple Sillicon version. If you have an older Mac with an Intel chip, download the Intel version. You can check this by clicking on the Apple logo on the top left and clicking on "About this Mac".
#### Note for Linux users
If you previously had Docker Engine installed, you dont need to install Docker Desktop for Linux. Read this [page](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/docs.docker.com/desktop/faqs/linuxfaqs/#what-is-the-difference-between-docker-desktop-for-linux-and-docker-engine>) if you're interested in learning the differences. You can continue to use the same commands mentioned in this tutorial. If you would like to use one over the other you can switch using the following commands:
Run `docker context ls` to see your installed docker contexts: 
docker context ls```
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-1-1>)NAME      DESCRIPTION                DOCKER ENDPOINT                    ERROR
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-1-2>)default *    Current DOCKER_HOST based configuration  unix:///var/run/docker.sock
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-1-3>)desktop-linux  Docker Desktop              unix:///home/atarbinian/.docker/desktop/docker.sock

```

Then do `docker context use <context-name>` to switch between them.
For example, if you wanted to switch to Docker Desktop: 
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-2-1>)dockercontextusedesktop-linux

```

### Hello World
To test that our Docker installation works, we're going to pull a simple image and run it as a container.
First, open a terminal window on your computer.
  * **Mac** : Open the built-in Terminal application
  * **Windows** : Open either Command Prompt, Powershell or Windows Terminal.
  * **Linux** : Open any terminal emulator that you have installed. Most distributions ship with one. 


Next, run the following command: 
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-3-1>)dockerrunhello-world

```

You should see Docker pull the image and print out the following message: 
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-4-1>)Hello from Docker!
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-4-2>)This message shows that your installation appears to be working correctly.
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-4-3>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-4-4>)To generate this message, Docker took the following steps:
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-4-5>) 1. The Docker client contacted the Docker daemon.
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-4-6>) 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-4-7>)  (amd64)
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-4-8>) 3. The Docker daemon created a new container from that image which runs the
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-4-9>)  executable that produces the output you are currently reading.
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-4-10>) 4. The Docker daemon streamed that output to the Docker client, which sent it
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-4-11>)  to your terminal.
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-4-12>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-4-13>)To try something more ambitious, you can run an Ubuntu container with:
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-4-14>) $ docker run -it ubuntu bash
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-4-15>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-4-16>)Share images, automate workflows, and more with a free Docker ID:
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-4-17>) https://hub.docker.com/
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-4-18>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-4-19>)For more examples and ideas, visit:
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-4-20>) https://docs.docker.com/get-started/

```

If you see this message, you're good to move onto the next steps. If not, ask a software lead for help.
## Deeper Dive
### What is Docker?
As mentioned at the start, Docker is a **containerization technology** that creates an environment for isolated applications to run in. Think of if you started up a program on your computer that was isolated to it's own sandbox. The application would have it's own file system and have no knowledge of the host system. As far as it's concerned, it's running in this isolated environment. 
Why would we want this? Doesn't this sound like it just increases the complexity of running our applciation?
To name a few benefits, Docker provides us isolation, reproducibility, and security.
  * Isolation
    * When you are running an application within a Docker container, it exists within the isolated environment of the container. This means that the application can only modify the files within the container. If it modifies some system path or needs some extra configuration, those changes are isolated to the sandbox of the container and will not pollute your host system.
  * Reproducibility 
    * With Docker images we can share the same environemnt between multiple hosts, regardless of the host's operating system and configuration. This means that you don't need to run any setup on the host system. The Docker container should execute the same way regardless of where it is running.
  * Security
    * As mentioned, the containers are running inside their own isolated environment. This means that if there was a malicuous application, it would only be able to compromise the container itself and not your host system.
  * Performance
    * Since each container is not running as a virtual machine, the performance is generally better than a virtual machine.


### Image vs Container?
So far we've been talking about images and containers without explaining them. You might think these are interchangable terms, however they are completely different entities.
### Image
An image is where we can define what should be included in the sandboxed environment. It includes an operating system, any system packages, other configuration, and any application code/binaries. You can think of them as a filesystem that includes everything you need to run your application. 
Let's say I want to create an image for my web server. Well, the image must include the binary or code of the server itself. The web server can't run on it's own. It needs to run within a operating system. We might also have some configuration file that details how the server should work. One can encapsulate all these things into a Docker image and we will explore exactly how to do that in the section on building a [Custom Image](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#custom-image>).
### Container
A container is the runtime environemnt where an application runs within. It takes the specification described by the image and actually starts up the required processes and sets up the specified filesystem.
## Ubuntu Container
Let's try to run a more complicated container than the hello-world one. 
Ubuntu is a popular distribution of Linux that publishes Docker images that we can run as containers.
Let's pull the Ubuntu image and run it as a container.
To pull the Ubuntu image we can use the `docker pull` command: 
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-5-1>)dockerpullubuntu:latest

```

Let's figure out what's happening here. 
`docker pull` will pull any given image from a registry. A registry is just a place where images are hosted on the Internet. By default, Docker will pull images from an image registry called [Docker Hub](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/hub.docker.com/>).
Next we specify the argument `ubuntu:latest`. This means that we want to pull the Ubuntu iamge that exists on Docker Hub. [Here](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/hub.docker.com/_/ubuntu>) is the page for the Ubuntu image. On Docker Hub you can find many types of images that will have various pieces of software available. 
The next part of this argument after the colon, is the tag. A tag is a way of speciying what type of image we want. In this case we want the `latest` tag. If you visit the [Docker Hub page](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/hub.docker.com/_/ubuntu>) for the Ubuntu image, you'll see many other tags that are available to use.
Now that we've pulled our image, let's verify that Docker has it stored on our computer. You can see all Docker images that are availalbe locally with the `docker images` command. 
docker images```
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-6-1>)ubuntu          latest    e4c58958181a  3 weeks ago   77.8MB

```

You might see other images on your computer if you've used Docker before. If you pulled hello-world from earlier, it should show up here as well.
Now that we've pulled this image, we can start up a container.
To run a container, we can use the `docker run` command.
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-7-1>)dockerrun--rm--interactive--ttyubuntu:latest/bin/bash

```

What's happening in this command? Let's dissect every part of the command. 
The first flag `--rm` is to tell Docker to clean up the container after we are finished running it. This isn't strictly necessary but it just makes our lives easier once we're done with the container.
The next two flags `--interactive` and `--tty` gives us a terminal interface to interact with the container. You could abbreviate this to just `-it` and your command would be: 
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-8-1>)dockerrun--rm-itubuntu:latest/bin/bash

```

Next, we specify the image name and the image tag. This should be familiar since it's the same syntax we used when running `docker pull` to download the image earlier.
Finally we have the argument `/bin/bash`. This just specifies what program the container should run. In this case, we specify it to run the `bash` shell. `/bin/bash` is just an absolute file path to the `bash` executable program. If you need a reminder, a shell is a way for humans to interface with the underlying system. We can issue text-based commands to have programs be executed. All the Docker commands we've been running have been input to a shell. 
If all went well, you should see something like this: 
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-9-1>)root@2058b33c6b10:/#

```

This is our shell prompt where we can issue commands inside the container. Feel free to poke around the container to see what's available. If you forgot how to use some of the command line programs, feel free to check back at our [Unix Basics workshop](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/01_unix_basics/>).
Let's run a few commands to see what's inside the container.
ls /```
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-10-1>)bin boot dev etc home lib lib32 lib64 libx32 media mnt opt proc root run sbin srv sys tmp usr var

```

Running `ls` at the root directory should show us that we have what looks like a standard Linux file system. 
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-11-1>)ls~/

```

Running `ls` in the home directory should show us nothing in an unmodified container.
Once you're done playing around, you can close the container by just hitting Ctrl-C and close it like any other program. If for some reason you didn't run the command with the same flags provided you might end up having the container not shut down even after hitting Ctrl-C. You can also kill the container by exiting the bash process. To do so, you can type the `exit` command or hit Ctrl-D. You can also kill it with the keyboard combination Ctrl-P and Ctrl-Q. To force kill the container, run `docker ps` to get the container ID and then run `docker stop <container-id>` to kill it. 
Ok so, it seems we have succesfully started up an Ubuntu container. As mentioned previously, this is useful for isolating our application from our host system. It has it's own Linux sandbox where it can do whatever it wants and not endanger our host system.
## Custom Image
Let's do something more interesting than just a base Ubuntu image. Let's define our own image to ping the TUAS website.
Find a directory on your host system where you're ok with creating a new file. In this directory, create a new file called `Dockerfile`.
Open this `Dockerfile` in your favorite text editor. This can be VS Code, Nano, Vim, TextEdit or even Notepad.
This Dockerfile will be the definition of the custom image that we'll be creating. If you remember what an image is, it's a predefined representation of what's included in our sandboxed environment. We will define the image's underlying operating system, any extra packages and other configuration.
On the first line of the Dockerfile write the following line:
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-12-1>)FROMubuntu:latest

```

This `FROM` line defines what image our custom image should be based on. In this case, we are basing our image on top of Ubuntu. This means that we will inherit all the files and resources associated with the Ubuntu docker image. We didn't have to base our image on top of Ubuntu, we could have chosen any other image. One popular choice is [Alpine Linux](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/hub.docker.com/_/alpine>) which is a more minimal Linux distribution than Ubuntu. There are other popular base images that provide tools for working with certain programming languages such as the [Python](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/hub.docker.com/_/python>) and [Golang](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/hub.docker.com/_/golang>) images. 
Now that we have our base image, let's install any packages we might need. 
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-13-1>)RUNapt-getupdate
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-13-2>)RUNapt-getinstall-yiputils-ping

```

These `RUN` lines will run any commands we provide and modify the contents of the image that's being built. In this case we run the two commands `apt-get update` and `apt-get install -y iputils-ping`. What these commands do is not crucial to understanding Docker. These are just the way that we obtain packages on Ubuntu and other Debian-based Linux distributions. The first line update's the system's list of packages by checking the Ubuntu servers for any updates. The second command will install the package that we specify, in this case `iputils-ping` which will give us the `ping` command we care about.
Finally, let's finish our image definition by specifying what action the image should perform when it's run as a container. As we mentioned, we want this container to ping the `TUAS` website. We can specify what application should be run in the container with the `CMD` keyword. Here we run `ping` with the arguments `-c 10` which will ping the TUAS website 10 times and exit. 
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-14-1>)CMDping-c10tuas.ucsd.edu

```

The final Dockerfile should look like this: 
Dockerfile```
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-15-1>)FROMubuntu:latest
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-15-2>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-15-3>)RUNapt-getupdate
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-15-4>)RUNapt-getinstall-yiputils-ping
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-15-5>)
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-15-6>)CMDping-c10tuas.ucsd.edu

```

Now that we've defined our image in a Dockerfile, we must build it to create the image itself. This can be done with the `docker build` command.
Open your terminal and ensure that you're in the same directory as the Dockerfile that you just created.
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-16-1>)dockerbuild--tagcustom-ping.

```

The `--tag custom-ping` is how we specify the name of the image and any additional tags. Remember how when we were pulling ubuntu, we pulled it as `ubuntu:latest`. `ubuntu` was the image name and `latest` was the tag. Here we are tagging our image to have the name `custom-ping`. We don't explicitly specify a tag but it should have a default tag of `latest`. 
The next part is the `.` which specifies the build context directory. The build context is used by the build process to know where to refer to paths on the host system from. We didn't go over them, but there are parts of the Dockerfile which can interact with files on the host system. Those lines would use paths that are relative from the build context. 
Now that the image is build, you should see it on your system with the `docker images` command.
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-17-1>)dockerimages

```

Next, let's run our container and see how it works. 
The syntax will be similar to how we ran the Ubuntu container.
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-18-1>)dockerrun--rm-itcustom-ping

```

You should see output to your terminal that indicates that the TUAS website is being pinged. 
```
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-19-1>)64 bytes from acsweb.ucsd.edu (128.54.65.138): icmp_seq=20 ttl=47 time=102 ms
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-19-2>)64 bytes from acsweb.ucsd.edu (128.54.65.138): icmp_seq=21 ttl=47 time=125 ms
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-19-3>)64 bytes from acsweb.ucsd.edu (128.54.65.138): icmp_seq=22 ttl=47 time=44.5 ms
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-19-4>)64 bytes from acsweb.ucsd.edu (128.54.65.138): icmp_seq=23 ttl=47 time=66.6 ms
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-19-5>)64 bytes from acsweb.ucsd.edu (128.54.65.138): icmp_seq=24 ttl=47 time=89.5 ms
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-19-6>)64 bytes from acsweb.ucsd.edu (128.54.65.138): icmp_seq=25 ttl=47 time=112 ms
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-19-7>)64 bytes from acsweb.ucsd.edu (128.54.65.138): icmp_seq=26 ttl=47 time=32.0 ms
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-19-8>)64 bytes from acsweb.ucsd.edu (128.54.65.138): icmp_seq=27 ttl=47 time=54.4 ms
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-19-9>)64 bytes from acsweb.ucsd.edu (128.54.65.138): icmp_seq=28 ttl=47 time=76.5 ms
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-19-10>)64 bytes from acsweb.ucsd.edu (128.54.65.138): icmp_seq=29 ttl=47 time=98.8 ms

```

If you see this output then the image we defined was correct and works fine when run as a container.
To see what else you can do inside a Dockerfile, you can check the [reference](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/docs.docker.com/engine/reference/builder/>). You can also see one of the Dockerfiles we use on the [GCS repository](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/github.com/tritonuas/gcs/blob/master/build/package/Dockerfile>).
## Docker Compose
Docker Compose is a tool used to make it easy to have multiple Docker container be run simultaneously. 
You might be wondering why we'd want that. There are many types of software where this is necessary. Let's say I am creating a web server. The web server doesn't exist in isolation. It might need to talk to a database to save/query data. We can have the web server run in one container and the database in another. Docker compose makes it easy to do so and have the two containers communicate to each other. 
Even on our GCS, we use Docker Compose to run the GCS server, a [database](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/www.influxdata.com/>), a [simulated plane](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/ardupilot.org/dev/docs/sitl-simulator-software-in-the-loop.html>), and more. You can see this Docker Compose definition [here](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/github.com/tritonuas/gcs/blob/master/deployments/docker-compose.yml>). 
To define how containers should run with Docker Compose, the configuration is stored in a YAML file usually called `docker-compose.yml`
Let's look at a simplified version of our GCS Docker Compose.
docker-compose.yml```
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-20-1>)version:"3"
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-20-2>)services:
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-20-3>)gcs:
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-20-4>)image:tritonuas/gcs
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-20-5>)ports:
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-20-6>)-5000:5000
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-20-7>)environment:
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-20-8>)-INFLUXDB_URI=http://influxdb:8086
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-20-9>)influxdb:
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-20-10>)image:influxdb:2.0-alpine
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-20-11>)ports:
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-20-12>)-8086:8086
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-20-13>)volumes:
[](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/#__codelineno-20-14>)-influxdb_data:/var/lib/influxdb

```

Here we define two services, `gcs` and `influxdb`. `gcs` is our backend web server and `influxdb` is our database.
There's a few things happening in this compose specification, but let's focus on one thing. How do these containers communicate with each other? As mentioned, previously, each container runs inside it's own isolated environment. How would they be able to talk to other containers they're running besides.
To get around this, Docker has a network that they all share and Docker Compose will allow each container to easily access each other. To access another container across the network, a container can use the container's service name from the YAML file. This means that if the `gcs` wants to send a network request to `influxdb`, it can use the string `influxdb` as the domain name. We see this in the example where the environment variable for the GCS called `INFLUXDB_URI` is defined as `http://influxdb:8086`. When the GCS makes network requests to that address, Docker Compose will know that it's trying to contact the `influxdb` container.
To try out using compose you can follow along [this official guide](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/docs.docker.com/compose/gettingstarted/>) from Docker.
[Here](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/docs.docker.com/compose/compose-file/>) is the complete specification for how you can configure a compose YAML file.
## Dev Containers
Dev Containers are not a feature build into Docker itself, but is a feature that can be added to VS Code that uses Docker under the hood. 
The idea is to have the same development environment between multiple people working on the same project. Each developer can take a shared Dockerfile and spawn up the same development environment as their peers.
Dev Containers are a useful resource for us at Triton UAS since we have so many members with wildly different host systems. It also makes it easier to get set up since you don't need to worry about downloading many dependencies to your host system. You just need to start up the container and everything should start up.
To use Dev Containers you'll need two things:
  * [VS Code](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/code.visualstudio.com/>)
  * [VS Code Dev Containers extension](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers>)


Once you have these, you can open any repository with a Dev Container and open the project in the container environment (assuming the project has a Dockerfile defined).
If you aren't prompted to open the project in a Dev Container, you can manually do so via the VS Code command pallette. Hit the keyboard combination Ctrl-Shift-P or Cmd-Shift-P on macOS. This should open a little text box with options. Select the option that says `Dev Containers: Open Folder in Container...` and follow the prompts. It may ask you to locate a Dockerfile where you'll have to point to the project's Dockerfile. 
![vscode-command-pallete](https://drive.google.com/uc?export=view&id=1SkIF82W0KqC9cnZT24rmh-I3beMzIWBD)
## Summary
At this point, you should be familiar with what Docker is, why it's useful, how to pull images, write our own images, run containers, define docker compose configurations, and use VS Code Dev Containers. Docker will be an indespensible tool that you are likely to run into with any large scale software you ever come across.
November 1, 2023
Back to top 
Made with [ Material for MkDocs ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/squidfunk.github.io/mkdocs-material/>)
[ ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/github.com/tritonuas> "github.com") [ ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/gitlab.com/tuas> "gitlab.com") [ ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/hub.docker.com/orgs/tritonuas> "hub.docker.com") [ ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/medium.com/tuas> "medium.com") [ ](https://tritonuas.github.io/wiki/software/workshops/contents/04_docker/<https:/facebook.com/tritonuas> "facebook.com")
