[ Skip to content ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#level-0-c-tutorial>)
[ ![logo](https://tritonuas.com/wiki/assets/tuas_2020_favicon_white.svg) ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/> "TritonUAS Wiki")
TritonUAS Wiki 
C++ Tutorial 
Type to start searching
[ GitHub  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/github.com/tritonuas/wiki/> "Go to repository")
  * [ Home ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/>)
  * [ General ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/general/town_hall_notes/>)
  * [ Onboarding ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/onboarding/foam_aircraft_project/>)
  * [ Hardware ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/hardware/wings/>)
  * [ Mechanical ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/mechanical/mechanical_home/>)
  * [ Electrical ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/electrical/electrical-overview/>)
  * [ Software ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/software_home/>)


[ ![logo](https://tritonuas.com/wiki/assets/tuas_2020_favicon_white.svg) ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/> "TritonUAS Wiki") TritonUAS Wiki 
[ GitHub  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/github.com/tritonuas/wiki/> "Go to repository")
  * [ Home  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/>)
  * General  General 
    * [ Town Hall Notes  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/general/town_hall_notes/>)
    * [ Test Flight  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/general/test_flight/>)
    * [ Repo Guide  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/general/repo_guide/>)
    * [ Useful Links  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/general/links/>)
    * [ Wiki Editing  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/general/wiki_editing/>)
    * [ Website Editing  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/general/website_editing/>)
  * Onboarding  Onboarding 
    * [ Foam Aircraft Project  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/onboarding/foam_aircraft_project/>)
    * [ Servos  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/onboarding/servos/>)
  * Hardware  Hardware 
    * [ Wings  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/hardware/wings/>)
    * [ Fuselage  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/hardware/fuselage/>)
    * [ VTOL  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/hardware/vtol/>)
    * [ Camera Gimbal  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/hardware/camera_gimbal/>)
    * [ Payload  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/hardware/payload/>)
    * [ GCS  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/hardware/gcs/>)
  * Mechanical  Mechanical 
    * [ Mechanical Home  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/mechanical/mechanical_home/>)
    * Competition Planes  Competition Planes 
      * [ Toothless  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/mechanical/toothless/toothless/>)
      * [ Duckasaurus  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/mechanical/duckasaurus/duckasaurus/>)
    * Onboarding Projects  Onboarding Projects 
      * [ The Marius  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/mechanical/onboarding-projects/the_marius/>)
    * Manufacturing  Manufacturing 
      * [ Overview  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/mechanical/manufacturing/manufacturing_overview/>)
      * [ Mold Manufacturing  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/mechanical/manufacturing/Mold_Manufacturing/>)
      * [ CNC Hot Wire Cutter  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/mechanical/manufacturing/CNC_hot_wire/>)
    * Design/Analysis  Design/Analysis 
      * [ Overview  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/mechanical/design-analysis/overview/>)
      * Optimization  Optimization 
        * [ Overview  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/mechanical/optimization/optimization_overview/>)
    * Tutorials  Tutorials 
      * [ Solidworks  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/mechanical/tutorials/solidworks/>)
      * [ Ansys  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/mechanical/tutorials/ansys/>)
      * [ Matlab/Optimization  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/mechanical/tutorials/matlab-optimization/>)
    * [ Mechanical Packing List  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/mechanical/packing_list/>)
  * Electrical  Electrical 
    * [ Electrical Overview  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/electrical/electrical-overview/>)
    * [ Electronics Diagram  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/electrical/electronics-diagram/>)
    * Projects  Projects 
      * Airdrop  Airdrop 
        * [ Overview  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/electrical/projects/airdrop/overview/>)
        * [ Mechanism  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/electrical/projects/airdrop/drop_mechanism/>)
        * [ GPIO Setup  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/electrical/projects/airdrop/GPIO_setup/>)
        * [ Drop Calculation  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/electrical/projects/airdrop/drop_script/>)
      * [ Antenna Tracker  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/electrical/projects/antenna-tracker/>)
      * [ Power Board  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/electrical/projects/power-board/>)
      * Signals Board  Signals Board 
        * [ Overview  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/electrical/projects/signals-board/signals-board/>)
        * [ Sensor Input  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/electrical/projects/signals-board/sensor-input/>)
        * [ Signals Board Code  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/electrical/projects/signals-board/sigboard-code/>)
        * [ Signals Board Requirements  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/electrical/projects/signals-board/sigboard-reqs/>)
    * Communication  Communication 
      * [ CAN  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/electrical/communication/can/>)
      * [ I2C  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/electrical/communication/i2c/>)
      * [ MAVLink  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/electrical/communication/mavlink/>)
      * [ UART  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/electrical/communication/uart/>)
      * [ Wireless Communication  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/electrical/communication/wireless-comms/>)
    * Other Tutorials  Other Tutorials 
      * [ Fabrication  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/electrical/other-tutorials/fabrication/>)
      * [ Ardupilot/Pixhawk  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/electrical/other-tutorials/ardupilot-pixhawk/>)
  * Software  Software 
    * [ Software Home  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/software_home/>)
    * [ How to Contribute  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/how_to_contribute/>)
    * Reference  Reference 
      * [ Git  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/reference/git/>)
      * [ Computer Vision  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/reference/computer_vision/>)
      * [ Datahub  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/reference/datahub/>)
    * GCS  GCS 
      * [ Overview  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/gcs/gcs_overview/>)
      * [ Configuration  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/gcs/gcs_configuration/>)
      * Frontend  Frontend 
        * [ Overview  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/gcs/frontend/frontend_overview/>)
        * [ Pages  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/gcs/frontend/frontend_pages/>)
      * Backend  Backend 
        * [ Overview  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/gcs/backend/backend_overview/>)
        * [ Endpoints  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/gcs/backend/backend_endpoints/>)
    * OBC  OBC 
      * [ Overview  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/obc/obc_overview/>)
      * Pathing  Pathing 
        * [ RRT-Star  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/obc/pathing/rrt-star/>)
        * [ Coverage  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/obc/pathing/coverage/>)
      * Tick Architecture  Tick Architecture 
        * [ Overview  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/obc/tick_architecture/tick_overview/>)
        * [ Guide  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/obc/tick_architecture/guide/>)
        * Ticks  Ticks 
          * [ Mission Prep  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/missionprep/>)
          * [ Path Gen  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/pathgen/>)
          * [ Path Validate  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/pathvalidate/>)
          * [ Mav Upload  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/mavupload/>)
          * [ Takeoff  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/takeoff/>)
          * [ Fly Waypoints  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/flywaypoints/>)
          * [ Fly Search  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/flysearch/>)
          * [ CV Loiter  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/cvloiter/>)
          * [ Airdrop Prep  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/airdropprep/>)
          * [ Airdrop Approach  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/airdropapproach/>)
          * [ Manual Landing  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/manuallanding/>)
          * [ Auto Landing  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/autolanding/>)
          * [ Mission Done  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/obc/tick_architecture/ticks/missiondone/>)
    * Target Detection Team  Target Detection Team 
      * [ Overview  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/target_detection_team/target_detection_overview/>)
      * [ Saliency  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/target_detection_team/saliency/>)
      * [ Segmentation  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/target_detection_team/segmentation/>)
      * [ Classification  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/target_detection_team/classification/>)
    * Localization  Localization 
      * [ Overview  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/localization/localization_overview/>)
    * Dataset Generation  Dataset Generation 
      * [ Overview  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/dataset_generation/dataset_generation_overview/>)
    * Workshops  Workshops 
      * [ Overview  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/workshops/workshops_overview/>)
      * Contents  Contents 
        * [ 01. Unix/Command Line  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/workshops/contents/01_unix_basics/>)
        * [ 02. Git/GitHub  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/workshops/contents/02_git_deep_dive/>)
        * [ 03. HTTP/REST  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/workshops/contents/03_http_and_rest/>)
        * [ 04. Docker  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/workshops/contents/04_docker/>)
        * [ 05. Pointers  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/workshops/contents/05_pointers/>)
        * [ 06. Unit Tests  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/workshops/contents/06_unit_tests/>)
        * [ 07. Design Patterns  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/workshops/contents/07_design_patterns/>)
        * [ 08. Async Programming  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/workshops/contents/08_async_programming/>)
        * [ 09. Continuous Integration  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/workshops/contents/09_continuous_integration/>)
    * Onboarding  Onboarding 
      * [ Overview  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/onboarding_overview/>)
      * Level 0  Level 0 
        * [ Overview  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_overview/>)
        * [ Python Tutorial  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_python/>)
        * [ Go Tutorial  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_go/>)
        * C++ Tutorial  [ C++ Tutorial  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/>) Table of contents 
          * [ A Note on C++  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#a-note-on-c>)
          * [ 1. "Hello World!" Program  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#1-hello-world-program>)
            * [ 1.1 Overview  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#11-overview>)
            * [ 1.2 Installing C++  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#12-installing-c>)
              * [ Linux  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#linux>)
              * [ Mac  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#mac>)
            * [ 1.3 Setting up a Development Environment  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#13-setting-up-a-development-environment>)
            * [ 1.4 Writing and Running Hello World  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#14-writing-and-running-hello-world>)
            * [ 1.5 Analyzing Hello World  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#15-analyzing-hello-world>)
            * [ 1.6 Hello World Finished  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#16-hello-world-finished>)
          * [ 2. Getting User Input  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#2-getting-user-input>)
            * [ 2.1 Overview  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#21-overview>)
            * [ 2.2 Echoing User Input  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#22-echoing-user-input>)
            * [ 2.3 Doing More With User Input  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#23-doing-more-with-user-input>)
          * [ 3. Making a Character Guessing Game  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#3-making-a-character-guessing-game>)
            * [ 3.1 Before we Start: Control Structures  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#31-before-we-start-control-structures>)
              * [ 3.1.1 If Statement  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#311-if-statement>)
              * [ 3.1.2 If, Else Statements  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#312-if-else-statements>)
              * [ 3.1.3 If, Else If, Else Statements  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#313-if-else-if-else-statements>)
              * [ 3.1.4 Switch Statement  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#314-switch-statement>)
              * [ 3.1.5 While Loop  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#315-while-loop>)
              * [ 3.1.6 Do-While Loops  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#316-do-while-loops>)
              * [ 3.1.7 For Loops  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#317-for-loops>)
              * [ 3.1.8 Break and Continue  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#318-break-and-continue>)
              * [ 3.1.9 Try-Catch & Exceptions  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#319-try-catch-exceptions>)
              * [ 3.1.10 Goto  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#3110-goto>)
            * [ 3.2 Keeping Track of Guesses Remaining  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#32-keeping-track-of-guesses-remaining>)
            * [ 3.3 Randomly Selecting a Character  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#33-randomly-selecting-a-character>)
              * [ 3.3.1 How to Define a Function  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#331-how-to-define-a-function>)
              * [ 3.3.2 Writing the getRandomLetter Function  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#332-writing-the-getrandomletter-function>)
            * [ 3.4 Refactor to Use Header Files  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#34-refactor-to-use-header-files>)
              * [ 3.4.1 Only Using Header Files  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#341-only-using-header-files>)
              * [ 3.4.2 Using Header and Source Files  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#342-using-header-and-source-files>)
          * [ 4. From Characters to Words  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#4-from-characters-to-words>)
            * [ 4.1 Pseudocode  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#41-pseudocode>)
            * [ 4.2 std::string generateRandomWord()  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#42-stdstring-generaterandomword>)
            * [ 4.3 void outputCurrentStatus(???)  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#43-void-outputcurrentstatus>)
              * [ 4.3.1 The Problem  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#431-the-problem>)
              * [ 4.3.2 C-style Arrays  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#432-c-style-arrays>)
              * [ 4.3.3 std::array  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#433-stdarray>)
              * [ 4.3.4 std::vector  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#434-stdvector>)
              * [ 4.3.5 std::list  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#435-stdlist>)
              * [ 4.3.6 std::map and std::unordered_map  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#436-stdmap-and-stdunordered_map>)
              * [ 4.3.7 Sets vs. Maps  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#437-sets-vs-maps>)
              * [ 4.3.8 What Data Stucture to Use?  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#438-what-data-stucture-to-use>)
              * [ 4.3.9 Keeping Track of the Letters Guessed  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#439-keeping-track-of-the-letters-guessed>)
            * [ 4.4 getLetterInput(???)  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#44-getletterinput>)
            * [ 4.5 getNumOccurrences(char letter, std::string word)  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#45-getnumoccurrenceschar-letter-stdstring-word>)
            * [ 4.6 bool isEntireWordGuessed(???);  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#46-bool-isentirewordguessed>)
            * [ 4.7 Putting it all Together  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#47-putting-it-all-together>)
              * [ 4.7.1 utilities.hpp  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#471-utilitieshpp>)
              * [ 4.7.2 utilities.cpp  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#472-utilitiescpp>)
              * [ 4.7.3 main.cpp  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#473-maincpp>)
          * [ 5. File Input  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#5-file-input>)
            * [ 5.3.1 Problem Description  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#531-problem-description>)
            * [ 5.3.2 File input  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#532-file-input>)
            * [ 5.3.3 Command Line Arguments  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#533-command-line-arguments>)
          * [ 6. Conclusion  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#6-conclusion>)
      * Level 1  Level 1 
        * [ Overview  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_1/level_1_overview/>)
      * Level 2  Level 2 
        * [ Overview  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_2/level_2_overview/>)
    * Miscellaneous  Miscellaneous 
      * [ Design Proposals  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/misc/design_review/>)
      * [ Nanostation Setup  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/misc/nanostations/>)
      * [ Passwords  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/misc/passwords/>)
      * [ Test Flight Checklist  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/misc/test_flight_checklist/>)


Table of contents 
  * [ A Note on C++  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#a-note-on-c>)
  * [ 1. "Hello World!" Program  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#1-hello-world-program>)
    * [ 1.1 Overview  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#11-overview>)
    * [ 1.2 Installing C++  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#12-installing-c>)
      * [ Linux  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#linux>)
      * [ Mac  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#mac>)
    * [ 1.3 Setting up a Development Environment  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#13-setting-up-a-development-environment>)
    * [ 1.4 Writing and Running Hello World  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#14-writing-and-running-hello-world>)
    * [ 1.5 Analyzing Hello World  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#15-analyzing-hello-world>)
    * [ 1.6 Hello World Finished  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#16-hello-world-finished>)
  * [ 2. Getting User Input  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#2-getting-user-input>)
    * [ 2.1 Overview  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#21-overview>)
    * [ 2.2 Echoing User Input  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#22-echoing-user-input>)
    * [ 2.3 Doing More With User Input  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#23-doing-more-with-user-input>)
  * [ 3. Making a Character Guessing Game  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#3-making-a-character-guessing-game>)
    * [ 3.1 Before we Start: Control Structures  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#31-before-we-start-control-structures>)
      * [ 3.1.1 If Statement  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#311-if-statement>)
      * [ 3.1.2 If, Else Statements  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#312-if-else-statements>)
      * [ 3.1.3 If, Else If, Else Statements  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#313-if-else-if-else-statements>)
      * [ 3.1.4 Switch Statement  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#314-switch-statement>)
      * [ 3.1.5 While Loop  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#315-while-loop>)
      * [ 3.1.6 Do-While Loops  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#316-do-while-loops>)
      * [ 3.1.7 For Loops  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#317-for-loops>)
      * [ 3.1.8 Break and Continue  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#318-break-and-continue>)
      * [ 3.1.9 Try-Catch & Exceptions  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#319-try-catch-exceptions>)
      * [ 3.1.10 Goto  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#3110-goto>)
    * [ 3.2 Keeping Track of Guesses Remaining  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#32-keeping-track-of-guesses-remaining>)
    * [ 3.3 Randomly Selecting a Character  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#33-randomly-selecting-a-character>)
      * [ 3.3.1 How to Define a Function  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#331-how-to-define-a-function>)
      * [ 3.3.2 Writing the getRandomLetter Function  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#332-writing-the-getrandomletter-function>)
    * [ 3.4 Refactor to Use Header Files  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#34-refactor-to-use-header-files>)
      * [ 3.4.1 Only Using Header Files  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#341-only-using-header-files>)
      * [ 3.4.2 Using Header and Source Files  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#342-using-header-and-source-files>)
  * [ 4. From Characters to Words  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#4-from-characters-to-words>)
    * [ 4.1 Pseudocode  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#41-pseudocode>)
    * [ 4.2 std::string generateRandomWord()  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#42-stdstring-generaterandomword>)
    * [ 4.3 void outputCurrentStatus(???)  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#43-void-outputcurrentstatus>)
      * [ 4.3.1 The Problem  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#431-the-problem>)
      * [ 4.3.2 C-style Arrays  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#432-c-style-arrays>)
      * [ 4.3.3 std::array  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#433-stdarray>)
      * [ 4.3.4 std::vector  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#434-stdvector>)
      * [ 4.3.5 std::list  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#435-stdlist>)
      * [ 4.3.6 std::map and std::unordered_map  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#436-stdmap-and-stdunordered_map>)
      * [ 4.3.7 Sets vs. Maps  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#437-sets-vs-maps>)
      * [ 4.3.8 What Data Stucture to Use?  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#438-what-data-stucture-to-use>)
      * [ 4.3.9 Keeping Track of the Letters Guessed  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#439-keeping-track-of-the-letters-guessed>)
    * [ 4.4 getLetterInput(???)  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#44-getletterinput>)
    * [ 4.5 getNumOccurrences(char letter, std::string word)  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#45-getnumoccurrenceschar-letter-stdstring-word>)
    * [ 4.6 bool isEntireWordGuessed(???);  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#46-bool-isentirewordguessed>)
    * [ 4.7 Putting it all Together  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#47-putting-it-all-together>)
      * [ 4.7.1 utilities.hpp  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#471-utilitieshpp>)
      * [ 4.7.2 utilities.cpp  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#472-utilitiescpp>)
      * [ 4.7.3 main.cpp  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#473-maincpp>)
  * [ 5. File Input  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#5-file-input>)
    * [ 5.3.1 Problem Description  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#531-problem-description>)
    * [ 5.3.2 File input  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#532-file-input>)
    * [ 5.3.3 Command Line Arguments  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#533-command-line-arguments>)
  * [ 6. Conclusion  ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#6-conclusion>)


# Level 0 C++ Tutorial
As a note, this tutorial assumes that you are using a Unix-based machine. If you are using a Windows machine, you will need to install a Linux virtual machine or use the Windows Subsystem for Linux (WSL). Instructions for this are provided [here](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/how_to_contribute/#11-important-setup>). 
## A Note on C++
C++ is a complicated language, and probably the most technically demanding of the 4 we use at TUAS. Pointers and manual memory management can be incredibly difficult to understand, and even more difficult to debug. This is probably why more modern languages, and even modern C++ itself, have introduced features like garbage collection (e.g. Java, Python, Go...) and smart pointers (e.g. C++, Rust somewhat) to get away from manual memory management. Even with smart pointers and more modern features, however, C++ is still a very complicated language, and possibly even more so because of them. However, it is also incredibly powerful in that it provides great performance and low level control. It is for this reason that we use it on our onboard computer, where hardware interopability and performance are more relatively important than our software that runs on the ground.
If this previous paragraph meant nothing to you, then don't worry! You will learn all of this in time. For now, just focus on the very basics by following this tutorial. And like all good tutorials, we'll start with a Hello World example.
## 1. "Hello World!" Program
### 1.1 Overview
This first section will deal with getting a working C++ program up and running. Once this is up and running, you may wish the either continue following the tutorial, or perhaps go off on your own. Another option would even be to try each section on your own by reading the overview at the beginning, and then comparing it with the code provided before moving on. Either way, by the end of this section you will have a working C++ skeleton program to build off of.
### 1.2 Installing C++
Most linux distributions should come installed with `g++`, a C++ compiler. I am unsure if Mac's come with it pre-installed. To check if you have it installed, you can run the following command in your terminal: 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-0-1>)g++--version

```

If you have it installed, then you should see something like this: 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-1-1>)g++ (GCC) 12.2.1 20221121 (Red Hat 12.2.1-4)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-1-2>)Copyright (C) 2022 Free Software Foundation, Inc.
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-1-3>)This is free software; see the source for copying conditions. There is NO
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-1-4>)warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

```

If you already have it installed, that's great! If not, then you will need to install it. 
#### Linux
To install `g++` on Ubuntu or any Debian-based system, you can run the following commands: 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-2-1>)sudoaptupdate
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-2-2>)sudoaptinstallg++

```

If you are running a non-Debian system, then you should Google the instructions for your respective system.
#### Mac
To install `g++` on a Mac, you can run the following homebrew command: `brew install gcc`. (Note: this hasn't been verified on a Mac system yet, so if someone could check to see if this works that would be great). You can also use another compiler, as I believe gcc/g++ is less commonly used on Mac. If so, just know that the tutorial will contain commands for gcc, so you'll have to find the equivalent command for what compiler you choose.
### 1.3 Setting up a Development Environment
Now that you have `g++` installed, you can start to create a working development environment. To do this, you will need to create a directory for your project. I would recommend creating a directory called `tritonuas` or `tuas` in your home directory, and then putting it somewhere inside of them. For my running example, I will be doing it inside of `~/tuas/onboarding/level_0/cpp`. Since you probably won't be implementing this in four different languages, something like `~/tuas/level_0_cpp` would probably be fine. But it literally does not matter, so do whatever you want.
To set up your directory, you can run the following commands: 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-3-1>)cd# Go to your home directory (Equivalent to cd ~)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-3-2>)mkdirtuas# if it does not already exist
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-3-3>)cdtuas# Go to your tuas directory. 
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-3-4>)mkdirlevel_0_cpp# make directory for this project
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-3-5>)cdlevel_0_cpp# go into the level_0_cpp directory

```

You could have done this all in two command like this, no matter if you already had the directories or not, by entering the following commands: 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-4-1>)mkdir-p~/tuas/level_0_cpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-4-2>)cd~/tuas/level_0_cpp

```

  * **Side Note:** I will not be explaining every detail of the commands I run. If you are confused about what a command does or what a command's argument does, like for example the `-p`, a great resource is the `man` command. To use it on `mkdir`, enter the following command 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-5-1>)manmkdir

```

This will give output like this: 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-1>)  mkdir - make directories
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-2>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-3>)SYNOPSIS
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-4>)  mkdir [OPTION]... DIRECTORY...
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-5>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-6>)DESCRIPTION
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-7>)  Create the DIRECTORY(ies), if they do not already exist.
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-8>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-9>)  Mandatory arguments to long options are mandatory for short options too.
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-10>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-11>)  -m, --mode=MODE
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-12>)     set file mode (as in chmod), not a=rwx - umask
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-13>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-14>)  -p, --parents
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-15>)     no error if existing, make parent directories as needed, with their file modes unaffected by any -m option.
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-16>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-17>)  -v, --verbose
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-18>)     print a message for each created directory
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-19>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-20>)  -Z   set SELinux security context of each created directory to the default type
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-21>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-22>)  --context[=CTX]
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-23>)     like -Z, or if CTX is specified then set the SELinux or SMACK security context to CTX
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-24>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-25>)  --help display this help and exit
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-26>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-27>)  --version
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-28>)     output version information and exit
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-29>)AUTHOR
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-6-30>)  Written by David MacKenzie.

```

Which lets us know that `-p` creates directories if they do not exist.


Now that you are in your directory, it would be a good idea to set up a git repository. This is not necessary since you are likely working alone, but it is still good practice so we recommend doing it. To do this, you can run the following command: 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-7-1>)gitinit

```

Then go to Github and create a new repository. You can name it whatever you want. You should be able to follow the instructions on the website for how to connect it with your local repository you just created. 
With Git now in place, you're almost ready to start writing code. First, enter the following command: 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-8-1>)touchmain.cpp

```

This will create an empty file caled `main.cpp`. Now, to open the current directory in VSCode, enter the following command: 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-9-1>)code.

```

This will open the current directory in VSCode. With VSCode open, you can open the main.cpp file you created.
**Note:** You probably already knew how to create a file and open VSCode on your open without this tutorial telling you how, but I wanted to do it entirely with the command line to start normalizing the experience. If you were really hardcore, you could do this entire project in something like `vim` and never even use an editor with a GUI. But learning to use VSCode on its own is a skill, and is greatly beneficial in larger code bases. So, I would recommend learning how to use it, or at least something with LSP (Language Server Protocol) support. If you don't know what it is, it is essentially what all modern IDE's and editors use to provide things like syntax highlighting, code completion, and other useful features for a variety of languages.
With the mention of LSP, before starting to code you will probably want to install the C++ VSCode extension. Just search `C++` in the extensions tab and install the most popular one provided by Microsoft. This will provide you with syntax highlighting and other useful features.
### 1.4 Writing and Running Hello World
Now with that we are actually ready to start coding. I'm just going to provide an entire Hello World example here, because it makes more sense to just provide it and then analyze it.
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-10-1>)#include<iostream>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-10-2>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-10-3>)intmain(){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-10-4>)std::cout<<"Hello World!"<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-10-5>)return0;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-10-6>)}

```

Before we analyze it, however, let's make sure we can run it. To compile the program, you can run the following command: 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-11-1>)g++main.cpp

```

This will create an executable called `a.out`. To run it, you can run the following command: 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-12-1>)./a.out

```

If you wanted to give the executable a different name, like `hello_world.out`, you could have done this instead: 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-13-1>)g++main.cpp-ohello_world.out

```

Which then would have been followed by: 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-14-1>)./hello_world.out

```

If all is correct, "Hello World!" should have been outputted to your terminal. If not, then there are some possible things that could have gone wrong.
  1. Make sure your code is exactly the same as the code provided above. If you are missing a semicolon or something, then it will not compile.
  2. Make sure you are in the same directory as your `main.cpp` file. If you are not, then you should move into that directory, or provide the full path to the file relative to where you are
  3. Make sure you have `g++` installed. If you don't, then you will need to install it. See the section above on how to do this.
  4. Make sure that your executable file is marked as executable. To do this, enter `chmod +x a.out`, or whatever name you gave it.


If none of these solves your problem, then I would try Googling the error message you are getting. If you are still stuck, then feel free to ask for help on Slack or Discord.
### 1.5 Analyzing Hello World
By this point, you should have a working "Hello World!" program. Now, let's analyze it.
The first line looks like this: 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-15-1>)#include<iostream>

```

This includes a library from the **standard library** called **iostream** into your code. Iostream is short for "input and output stream," which means it allows you to write and read from/to the input and output streams of your program. If this talk of streams doesn't make sense, don't worry. For now, just know that this line allows you to use the `std::cout` function, which we'll talk about in a bit. 
The standard library is a collection of libraries that come with every C++ compiler. This means that you can use them without having to install anything. This is in contrast to third party libraries, which you will need to install. The standard library is incredibly useful, and you will likely use it in every C++ program you write. You can view the documentation for the standard library [here](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/en.cppreference.com/w/cpp/header>). For now, don't worry too much about everything it provides. Just know that it provides a lot of useful stuff.
The next line looks like this: 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-16-1>)intmain(){

```

This defines a function called `main` which serves as the entry point into the program. If you have programmed in other languages, especially Java, this probably looks familiar. The `int` means that the function returns an integer, the `()` means that it takes no parameters, and the `{` begins the function body. The `}` ends the function body. We'll go more in depth about functions later, so for now it's fine to just know that everything inside `main` is where your code goes. 
The next line looks like this: 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-17-1>)std::cout<<"Hello World!"<<std::endl;

```

This is the line that actually outputs the text "Hello World!" to the terminal. The first part, `std::cout` means that we are using a funtion from the standard library called `cout`. Any function you use from the standard library has to be prefaced by `std::` to specify that you are referring to the version of the function defined in the standard library. However, for most functions you probably won't have any namespace collisions (i.e. two functions with the same name, like if you defined your own cout function), so you might think that this is extremely annoying to have to type out every time. And for such a small program like this, you are right. However, for larger programs, it is very useful to know exactly where a function is coming from, and it is also useful to know that you are using the standard library version of the function. And if you were writing your own third party library for others to use, it gets a lot more complicated. 
For this tutorial, I will be explicitly typing out `std::` every time so it is very clear what functions are from the standard library. This is also the rule we follow for all of our C++ projects at TUAS. However, for this tutorial and other small programs you write, it is totally fine to do what I am about to show. If you want to use `cout` without having to type `std::` every time, you can add the following line to the top of your file: 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-18-1>)usingnamespacestd;

```

With this, your Hello World would look like this: 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-19-1>)#include<iostream>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-19-2>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-19-3>)usingnamespacestd;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-19-4>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-19-5>)intmain(){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-19-6>)cout<<"Hello World!"<<endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-19-7>)return0;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-19-8>)}

```

Notice that now you do not need the `std::` before `cout` and `endl`. This is because you are now telling the compiler that you want to use the `std` namespace for everything in this file. So, if the compiler finds a function that does not exist in your file, it will look in the `std` namespace for it. 
Now that we have the `std::` prefix out of the way, we can talk about what the line actually is doing. The `<<` is called the **stream insertion operator**. It is used to insert things into the output stream. In contrast, the `>>` is called the **stream extraction operator**. It is used to extract things from the input stream. We will talk more about streams later, but for now just know that `<<` is used to output things to the terminal, and `>>` is used to get input from the terminal. We'll see the `>>` operator in a little bit.
So in total, the line is putting the string "Hello World" into the output stream (outputting it to your terminal), and then sending the `std::endl` to the output stream. The `std::endl` is also from the standard library, and it is used to insert a newline character into the output stream. This is why "Hello World" is on its own line. If you wanted to output "Hello World" without a newline character, you could have omitted the `std::endl` and just done `std::cout << "Hello World!";` However, in this case that doesn't really make sense because if you didn't output a newline, the next terminal prompt would appear right after the Hello World, like this:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-20-1>)<tyler cpp> $ ./a.out 
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-20-2>)Hello World!<tyler cpp> $ 

```

There are situations where you would want to do this, like if you were planning to output text to the terminal later on that you wanted to be on the same line.
If you have used other languages, you probably have seen the `\n` character before. This is the general newline character, and you could have also used it instead of `std::endl`, and it would have done _basically_ the same thing. However, there is one main difference. When using `std::endl`, it **flushes** the output stream after inserting the newline. To fully understand what this means you would need to have a knowledge of streams, but at a high level when you put text to an output stream with `std::cout` it doesn't necessarily output it to the terminal immediately. It might wait until it has a lot of text to output, or it might wait until it can squeeze it between other things going on. However, when you use `std::endl`, it will output everything in the output stream immediately: it "**flushes** " the output stream.
The main takeaway from this is that as a new C++ programmer you don't really need to care right now about the difference between `std::endl` and `\n`, but you should know that if you are about to output many newlines then you probably don't want to use `std::endl` until the end because it is more efficient to flush the output stream once at the end than to flush it every time you output a newline.
Lastly, the final line is this: 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-21-1>)return0;

```

If you remember when we talked about the `main` function earlier, we said that the `int` meant the function returns an integer. This is what `return 0` is doing: it is returning the value `0`. When you write functions in your own code, you yourself will usually use the return value in some way. However, the `main` function is called by your system when you run the executable, or possibly by another program, so `main`'s return value tells your system or that other program something about the execution of your program: whether or not an error occurred. If the return value is `0`, then it means that the program ran successfully. If it is anything else, then it means that an error occurred. This is why you will often see programs that return `1` when an error occurs. Any program can define whatever encoding scheme it wants for error values, as long as `0` means that it was successful.
And one last thing: you probably noticed that every line was ended by a semicolon. Unlike Go, Python, or Javascript, this is required in C++ and is probably one of the most common errors in the language. So while it isn't that complicated, it's still important to point out.
So... that was an awful lot of words to explain a very simple program. But, I think it is important to not skip over the small details because as you learn more and more of the language you will start to see how everything fits together. For now, however, it's enough to just know that the more complex things mentioned here, like streams and functions, are something that exist in C++ and that you will learn about them in time.
### 1.6 Hello World Finished
With that we have finished the Hello World program At this point you will probably want to make a git commit. To do this, you can run the following commands: 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-22-1>)gitaddmain.cpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-22-2>)gitcommit-m"Add Hello World program"

```

**Note:** G++ will have created the `a.out` executable. You should add this to a `.gitignore` file so that it is not tracked by git. To do this, you can run the following command: 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-23-1>)echo"*.out">>.gitignore

```

Essentially this will automatically ignore any file that ends in `.out`. You can also just create a .gitignore file manually and add it all through VSCode, but the above command is how you would do it all in the command line. 
This will allow you to run commands like
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-24-1>)gitadd.

```

without also adding the executable files. Generally, you should not push build files to a repository, as they can be generated from the source code and there may be differences between executables on different operating systems.
## 2. Getting User Input
### 2.1 Overview
Now that we have a working skeleton program, we can start to incrementally add new functionality. Generally when you are working on a project or task like this, you want to break it up into pieces like we are doing here. Right now these steps are very small because this tutorial is assuming this is your first time using C++. But if you were an experienced C++ programmer, your steps would likely be much wider in scope since you already have all the base knowledge you need. But for now, we will continue to break it down into small steps.
Instead of trying to implement all of the user input exactly described in the project writeup, we will even break that down into smaller steps, incrementally building up knowledge as we go.
### 2.2 Echoing User Input
To start, we will just echo back the user input we recieve. We will need to use the `std::cin` function, which is the input counterpart to `std::cout`.
Here is a sample code snippet that gets the user input and then outputs it back to the terminal:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-25-1>)#include<iostream>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-25-2>)#include<string>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-25-3>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-25-4>)intmain(){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-25-5>)std::stringinput;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-25-6>)std::cout<<"Enter a string: ";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-25-7>)std::cin>>input;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-25-8>)std::cout<<"You entered: "<<input<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-25-9>)return0;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-25-10>)}

```

To start, we define a variable of type `std::string` called `input`. This is where we will store the user input. It is important to note that the string type in C++ is defined in the standard library, so we need to `#include <string>` at the top of the file. This lets us use the `std::string` type, and like other languages we use it to store sequences of characters.
If you are familiar with C you will know that in C you use the `char**` type to store strings. In C++ you should basically never do this, but with some rare exceptions as the `std::string` type is much more powerful and easier to use than the C string type. If you don't know what `char**` means, don't worry.
It is also important to point out the difference between the `int` type and the `std::string` type. The `int` type is a primitive because it is defined by the language itself. The `std::string` type, like we mentioned, is not a primitive because it is defined in the standard library. There is an annoying amount of primitive types in C++, and they're all basically just variations on the ones you would expect, so I won't list them all here, but the most relevant are these:
  * `int`: integer (32 bits)
    * e.g. `5`
  * `float`: floating point number (32 bits)
    * e.g. `5.1`
  * `double`: floating point number (64 bits)
    * e.g. `5.1`
    * You should basically always use `double` unless you're trying to optimize memory usage, probably on some sort of embedded system.
  * `char`: character
    * e.g. `'A'`
  * `bool`: boolean
    * e.g. `true` and `false`


You'll notice that under `char` I wrote `'A'` and not `"A"`. This is intentional. In other languages like Python and Javascript, there is no difference between using single quotes and double quotes unless you are trying to include some kind of quotation inside of another. However, in C++ this is not the case. If you use single quotes, then it is a character. If you use double quotes, then it is a string. So `"A"` is valid, because it is a string containing one character `'A'`, but `'ABC'` is invalid because a character can only be one letter.
Also, you should know that there are pointer versions of all of these types, denoted by an `*`. For example, `int*` is a pointer to an integer. We won't even use pointers in this tutorial, but you should know that they are something that exists and that they are important to learn later on.
And one last thing which is especially important for those who are familiar with Java: in Java there is a distinction between objects and primitives, where objects are stored on the Heap and primitives are stored on the stack. If you're unfamiliar about what the stack and heap are, in general the stack is where local variables are stored while the heap is where dynamically allocated objects reside in memory. This is not the case in C++. Both `int` and `std::string` will be stored on the stack, and if you pass an `std::string` into a function then it will be copied by value, not reference. The way you pass by reference in C++ is by using pointers (and references), which are beyond the scope of this tutorial.
Now that we have `input` defined as a variable of type `std::string`, which is currently set to the empty string `""`, we can store user input inside of it. First, we output a message `"Enter a String: "` without a newline to the user to make sure they know that the program is expecting input. Then, we have the following line:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-26-1>)std::cin>>input;

```

If you remember from earlier, the `>>` operator is the stream extraction operator. It is used to extract things from the input stream. In this case, we are extracting the user input from the input stream and storing it in the `input` variable. This also implicitly waits until a newline is entered by the user, so it will take everything the user types up until they press `Enter` and then store it in the `input` variable.
Lastly, we output back the user input to the terminal with the following line: 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-27-1>)std::cout<<"You entered: "<<input<<std::endl;

```

You'll notice that we use the `<<` operator multiple times to chain together different values. This is very common when using `std::cout` and `std::cin`. And again, we end with an `std::endl` to make sure we flush the output stream.
Running this program will produce something like the following: 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-28-1>)<tylercpp>$g++main.cpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-28-2>)<tylercpp>$./a.out
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-28-3>)Enterastring:C++
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-28-4>)Youentered:C++
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-28-5>)<tylercpp>$

```

### 2.3 Doing More With User Input
Now that we can get user input, let's try to do some operations on it like we will need to do in our final program. If you remember, in the project writeup we said that the user will input a file that contains a list of valid words, and then the program will randomly select one of those words. However, this would involve learning many new things: most notably parsing command line arguments, reading from a file, and generating random numbers. We'll get to that all later, but for now we'll just pretend that we have ready done all of that and picked out a random word from the file. This is actually a really good thing to do when writing programs: try to simplify it down so that you're only figuring out one thing at a time. We could have done this by doing it all in the order that the actual program will do it (i.e. parsing command line arguments -> reading from a file - generating a random number -> THEN getting user input), but instead I am showing it this way because some of those tasks are more difficult, and it makes sense to go from easier to harder.
To simulate everything that happens before user input, we'll save the word the user has to guess in an `std::string` variable directly.
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-29-1>)#include<iostream>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-29-2>)#include<string>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-29-3>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-29-4>)intmain(){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-29-5>)std::stringword_to_guess="apple";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-29-6>)// ...
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-29-7>)}

```

Now we can write code that deals with this hardcoded value, and we can deal with the actual logic of the hangman game itself.
Towards this, first thing we want to do is get user input. We can plug in similar code to what we wrote in the previous section:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-30-1>)#include<iostream>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-30-2>)#include<string>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-30-3>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-30-4>)intmain(){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-30-5>)std::stringword_to_guess="apple";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-30-6>)std::stringinput;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-30-7>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-30-8>)std::cout<<"Welcome to Hangman!\n";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-30-9>)std::cout<<"_ _ _ _ _"<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-30-10>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-30-11>)std::cout<<"Guess a letter: ";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-30-12>)std::cin>>input;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-30-13>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-30-14>)// ...
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-30-15>)}

```

Right now, we're ignoring number of guesses, and the line telling how many unknown letters are in the word is hardcode. We'll get to that later. For now, we'll just focus on getting user input and checking if it is correct.
But with that, we immediately reach a roadblock. How do we check if the user inputted the correct letter? We have to look through the string variable somehow and see if it contains the letter. This is a little complicated, so lets see if we can first simplify it down to something easier. We'll simplify down `word_to_guess` to just be a letter;
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-31-1>)#include<iostream>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-31-2>)#include<string>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-31-3>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-31-4>)intmain(){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-31-5>)std::stringletter_to_guess="A";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-31-6>)std::stringinput;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-31-7>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-31-8>)std::cout<<"Welcome to Hangman!\n";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-31-9>)std::cout<<"_"<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-31-10>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-31-11>)std::cout<<"Guess a letter: ";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-31-12>)std::cin>>input;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-31-13>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-31-14>)if(input==letter_to_guess){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-31-15>)std::cout<<"You guessed correctly!"<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-31-16>)}else{
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-31-17>)std::cout<<"You guessed incorrectly! The letter was "<<letter_to_guess<<"."<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-31-18>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-31-19>)// ...
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-31-20>)}

```

You'll notice that this is the first place in which we are using an if statement. This program basically says "If the value stored in the variable `input` is equal to the value stored in the variable `letter_to_guess`, then print out `You guessed correctly!`. Otherwise, print out `You guessed incorrectly! The letter was A.`"
You might be wondering why we didn't define `letter_to_guess` as a `char` when it is only one character. The reason we did this is that you cannot compare `char` variables with `std::string` variables. Some types that aren't the same can still be compared, but that is on a type-by-type basis.
**Note for Java programmers** : If you are familiar with Java, seeing `==` being used to compare strings might trigger alarm bells in your head, as in Java this will return false even if the text inside of the string objects is the same because in Java the `==` operator only compares addresses of objects. In C++, the `==` operator will only have this behavior if the type of the variables are pointers, so the type would be `std::string*` (with an asterisk) instead of `std::string`. We won't really be dealing with pointers with this program, but in the level 1 project we will.
Running this program a couple of times:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-32-1>)<tylercpp>$g++main.cpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-32-2>)<tylercpp>$./a.out
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-32-3>)WelcometoHangman!
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-32-4>)_
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-32-5>)Guessaletter:f
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-32-6>)Youguessedincorrectly!TheletterwasA.
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-32-7>)<tylercpp>$./a.out
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-32-8>)WelcometoHangman!
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-32-9>)_
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-32-10>)Guessaletter:a
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-32-11>)Youguessedincorrectly!TheletterwasA.
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-32-12>)<tylercpp>$./a.out
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-32-13>)WelcometoHangman!
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-32-14>)_
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-32-15>)Guessaletter:A
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-32-16>)Youguessedcorrectly!
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-32-17>)<tylercpp>$

```

Immediately, you'll notice that the characters are case sensitive. This is definitely something we want to fix. You might think we can fix this by just changing `letter_to_guess` to lowercase `"a"`, but then if the user typed in an upper case `"A"` there would still be a problem.
Luckily, the standard library gives us a function to convert characters to their lower case equivalent. We can use it like this
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-33-1>)#include<iostream>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-33-2>)#include<string>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-33-3>)#include<cctype> // new
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-33-4>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-33-5>)intmain(){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-33-6>)charletter_to_guess="a";// modified
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-33-7>)std::stringinput;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-33-8>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-33-9>)std::cout<<"Welcome to Hangman!\n";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-33-10>)std::cout<<"_"<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-33-11>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-33-12>)std::cout<<"Guess a letter: ";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-33-13>)std::cin>>input;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-33-14>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-33-15>)charletter_guessed=tolower(input[0]);// new
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-33-16>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-33-17>)if(letter_guessed==letter_to_guess){// modified
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-33-18>)std::cout<<"You guessed correctly!"<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-33-19>)}else{
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-33-20>)std::cout<<"You guessed incorrectly! The letter was "<<letter_to_guess<<"."<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-33-21>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-33-22>)}

```

Running this:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-34-1>)<tyler cpp> $ ./a.out 
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-34-2>)Welcome to Hangman!
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-34-3>)_
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-34-4>)Guess a letter: A
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-34-5>)You guessed correctly!

```

Let's take a look at the modifications we made.
  * First, we inluded the `<cctype>` library. This lets us use the `tolower` function, which we use later.
  * Then, we changed `letter_to_guess` to be a `char` instead of a `std::string`. This will make it easier to compare to the user input, because of the next change we made.
  * Next, we use the `tolower` function, and pass in `input[0]` as an argument. This introduces two new kinds of syntax, so lets go over them one by one.


When we say `input[0]`, we are accessing the `0th` character in the string stored in `input`. If you are famililar with lists or arrays in other languages, you are probably famililar with the concept of 0-based indexing. If not, then just know that for any "container" of elements in C++ and most programming languages, the first item is actually stored at the 0th index. This might seem odd at first, but it makes more sense with the most common operations you tend to do. The square brackets `[]` are what you use to index containers that support arbitrary indexing (i.e. get any value you want). 
For this purpose, you can consider `std::string`s as a container of characters. If we had a string defined like this: `std::string word = "Hello"` then `word[0]` will be `'H'`, `word[1]` will be `'e'`, ..., until you get to `word[4]` which will be `'o'`. If you tried to index beyond the end of the string, or any container, it is undefined behavior—which means that basically anything could happen, your program crashing one of the most preferable as it is better to know there is a problem then be unaware of it. With that in mind, our above program is not very safe, as before you index into a container you should probably make sure it at least has that many elements. For example, if we wanted to make sure the string at least had one element, we could do
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-35-1>)std::cout<<"Guess a letter: ";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-35-2>)std::cin>>input;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-35-3>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-35-4>)if(input.size()>0){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-35-5>)// input[0] guaranteed to have a value: i.e. it is defined behavior
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-35-6>)}

```

In this case, the size function (we'll talk about functions in the next paragraph) is being called to check that the string has at least 1 character inside of it. If you want to see what kinds of functions are available on all sorts of different values, including `std:string`, you can visit [this website](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/en.cppreference.com/w/>) and specifically [this page](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/en.cppreference.com/w/cpp/string/basic_string>) if you want to read more about `std::string`.
The second new kind of syntax we introduced is function calling. This is what we are doing when we say `char letter_guessed = tolower(input[0])`, and when we say `input.size()`. Between these two examples, there is are some slight differences that demonstrate something important. We'll start with `tolower`.
If you visit the [cppreference page](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/en.cppreference.com/w/cpp/string/byte/tolower>) on `tolower`, you will see the following information:
![cppreference documentation on tolower](https://drive.google.com/uc?export=view&id=16MoJbzZ_3uQ6vZijUgyn7rK0Ur0_fEM9)
It's important to be able to pick out relevant information from official documentation, since it often can contain more information than is needed for someone new to the language. I've already chopped off a lot of unimportant (for now) information by only including the top of the page, but even in here it's important to be able to parse the information.
Probably the most important piece of information is near the top where it says
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-36-1>)inttolower(intch)

```

This says that `tolower` is a function which takes one parameter of type `int`, called `ch`, and returns an `int` value. This means that you give an `int` value to the function, and it gives back another `int` value. You might be confused why this function is taking integers and not character values, but for now just squint and pretend that instead of `int` it is actually `char`. The reason for this is beyond the scope of this tutorial, but since `int`'s and `char`'s are very similiar you can pretend they are the same for the purposes of this hangman game.
To conceptualize return values, you can pretend that the entire expression `tolower(input[0])` gets replaced with the returned value. So if `input[0]` was `'A'`, then the entire expression gets replaced with `'a'`, which means the entire line ends up becoming `char letter_guessed = 'a'`.
The second example of a function call is when we said `input.size()`. This function call is different from the previous in two main ways:
  1. It does not take any parameters. This is why the open and close parentheses `()` do not contain any values inside of them. Depending on how many parameters a function takes, you will have that many comma-separated values between the parentheses.
  2. It is preceded by `input.`. This is because it is a function that is defined on `std::string` itself. While `tolower` is just a function that doesn't have any extrinsic connection any value other than the parameters passed in, `size` depends on the `std::string` that it was called from. In Java everything is a class, so if you are coming from that background this is probably more familiar, as Java doesn't have any functions that are not a part of classes. We'll talk more about classes in the level 1 tutorial, so for now it is enough to understand the `size` function gives the number of characters in the string it is called on with the dot `.` operator.


Now we should have enough knowledge to understand the program, up to this point, in its entirety.
  1. We import all necessary libraries
  2. We hardcode the character the user needs to guess (currently `'a'`) in the `char` variable `letter_to_guess`
  3. We create an empty `std::string` called `input` in which we will store the user input in its entirety
  4. We output a prompt to the user using `cout`
  5. We get user input using `cin` and store it in `input`
  6. We convert the first character of `input` into its lowercase equivalent, and then store it in the `char` variable `letter_guessed`
  7. We use an if statement to see if the user guessed the correct letter, outputting the relevant victory/loss message.


The obvious extension right now would be to change the code logic to let the user guess an entire word instead of just one character, but before we do that let's create a fully functioning character guessing game with limited guesses.
## 3. Making a Character Guessing Game
Right now, the code looks like this
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-37-1>)#include<iostream>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-37-2>)#include<string>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-37-3>)#include<cctype>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-37-4>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-37-5>)intmain(){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-37-6>)charletter_to_guess='a';
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-37-7>)std::stringinput;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-37-8>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-37-9>)std::cout<<"Welcome to Hangman!\n";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-37-10>)std::cout<<"_"<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-37-11>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-37-12>)std::cout<<"Guess a letter: ";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-37-13>)std::cin>>input;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-37-14>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-37-15>)charletter_guessed=tolower(input[0]);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-37-16>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-37-17>)if(letter_guessed==letter_to_guess){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-37-18>)std::cout<<"You guessed correctly!"<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-37-19>)}else{
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-37-20>)std::cout<<"You guessed incorrectly! The letter was "<<letter_to_guess<<"."<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-37-21>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-37-22>)}

```

By the end of this section, the game will let the user guess a randomly generated character, with a limited number of guesses.
### 3.1 Before we Start: Control Structures
If you think about the general program flow of this character guessing game, you can break it down into a flowchart.
This diagram is a natural way to represent how the program logic works. But because there is an edge that goes backwards up the diagram to a previous point in time, if we were to write this without loops, we would have to manually express the logic using deeply nested if statements, creating a new branch for every possibility. ehis obviously is not sustainable for any program of more than basic length, so this naturally implies that all programming languages must have something that makes this not needed, and [nobody would ever think otherwise](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/www.reddit.com/r/programminghorror/comments/4dguj8/dev_didnt_know_about_for_or_while_loops/>).
We already talked about if statements, but didn't really go into depth. And we haven't talked about loops at all, or any other control structures that will make this program much easier to write. To make sure everyone following this tutorial is on the same page, in this section we'll just go over the different types of loops and control structures available in C++. If you're familiar with other languages, then this will seem very familiar because C++ was heavily based on C, and nearly all languages are inspired from C in some way.
When we say **control structures** , this refers to all of the different ways of structuring the flow of control in a program. In other words, they are instructions in code that let you choose how or when to run other lines of code. Probably the most basic is the if statement, which allows you to conditionally run a piece of code according to the status of variables. Without control structures, programs would be very uninteresting.
If you already know all of this, feel free to skim or skip this section.
#### 3.1.1 If Statement
If statements have the following basic form:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-38-1>)if(<boolean_expression>){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-38-2>)// code that only runs if <boolean_expression> is true
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-38-3>)}

```

A boolean expression is something that evaluates to true or false. Here are some examples of boolean expressions
  * `x > y`
  * `x >= y`
  * `x < y`
  * `x <= y`
  * `x == y`


You can chain together multiple boolean expressions with the boolean **and** (`&&`) and **or** (`||`) operators. And requires that both expressions be true for the entire expression to be true, while or requires that at least one of the expressions to be true for the entire expression to be true. So `x == y && a == b` requires that `x` equals `y` and `a` equals `b`.
Also, you can negate a boolean expression by using the **negation operator** (`!`). So `!(x == y)` is only true if `x` and `y` are not equal. For this simple case, it is equivalent to `x != y`.
#### 3.1.2 If, Else Statements
An if, else statement has the following basic form
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-39-1>)if(<boolean_expression>){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-39-2>)// code if the expression is true
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-39-3>)}else{
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-39-4>)// code if the expression is false
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-39-5>)}

```

Even with simple if, else statements, we already start to see some interesting scoping rules. By **scope** , we mean the context in which a variable is "active." So if a variable is out of scope, you cannot access it.
A simple demonstration of this can be shown with one if, else statement:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-40-1>)#include<iostream>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-40-2>)#include<string>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-40-3>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-40-4>)intmain(){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-40-5>)std::stringinput;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-40-6>)std::cin>>input;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-40-7>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-40-8>)if(input=="hello"){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-40-9>)intx=5;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-40-10>)}else{
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-40-11>)intx=6;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-40-12>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-40-13>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-40-14>)std::cout<<x<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-40-15>)}

```

While a similar program would give the expected output in Python (printing 5 if the user enters "hello" or 6 if the user enters anything else), in C++ if you try to compile this it will give the following error
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-41-1>)test.cpp: In function ‘int main()’:
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-41-2>)test.cpp:14:16: error: ‘x’ was not declared in this scope
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-41-3>)  14 |  std::cout << x << std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-41-4>)   |        ^

```

The error `'x' was not declared in this scope`. This is because of how scope works. When you enter a section of code surrounded by a curly brace, you enter a new block of code. Any variables that were defined outside of that block can still be used, but when you exit that block of code any variables that were defined are no longer in scope, and therefore can not be used anymore. Because the variable `x` is defined within the curly braces, `x` has no meaning once you exit that block. To get the expected behavior, you would have to alter the program to be like this:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-42-1>)// ...
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-42-2>)intx;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-42-3>)if(input=="hello"){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-42-4>)x=5;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-42-5>)}else{
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-42-6>)x=6;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-42-7>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-42-8>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-42-9>)std::cout<<x<<std::endl;

```

Taking this another level, when you enter the main function you are entering a new level of scope. So, any variables that were defined outside and before the main function can also be used and modified inside main. These are called **global variables** and they are generally discouraged since they can be mutated (modified) in many different places, which can lead to code that is harder to understand and maintain. This doesn't really matter right now because we just have one main function, but you can imagine if you had multiple functions in a file then it would be hard to keep track of what variables were used by which functions. If you even feel like you need a global variable, there is probably a way to structure your program such that you don't need it.
#### 3.1.3 If, Else If, Else Statements
Else if statements are also very similar to if and else if statements.
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-43-1>)if(<boolean_expression_1>){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-43-2>)// if boolean expression 1 is true
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-43-3>)}elseif(<boolean_expression_2>){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-43-4>)// if boolean expression 1 is false and 2 is true
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-43-5>)}elseif(<boolean_expression_3>){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-43-6>)// if boolean expressions 1 and 2 are false, and 3 is true
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-43-7>)}else{
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-43-8>)// if all of the previous expressions are false
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-43-9>)}

```

You can use these for more complicated logic chains, and you can chain together as many as you want.
However, if you use too many it can become hard to track what is going on. The next control structure can help with that.
#### 3.1.4 Switch Statement
You can think of switch statements as similar to else if chains, but slightly easier to follow, and slightly less powerful.
Their general syntax looks like this:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-44-1>)switch(<expression>){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-44-2>)case<possible_value_1>:
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-44-3>)// if <expression> == <possible_value_1>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-44-4>)break;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-44-5>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-44-6>)// ...
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-44-7>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-44-8>)case<possible_value_n>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-44-9>)// if <expression == <possible_value_2>>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-44-10>)break;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-44-11>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-44-12>)default:
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-44-13>)// if <expression> does not equal any of the previous possible values
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-44-14>)break;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-44-15>)}

```

You'll notice that at the end of each case statement there is a `break` statement. This is not required, but if you did not have it then you would "fall through" to the next case. This might be what you want, but most of the time it isn't.
Before, I said that switch statements were slightly less powerful than if else chains. This is because each possible value must be the same type as the expression, and you can't do any arbitrary boolean expression inside the case statement. In addition, you cannot use switch statements on `std::string`'s, or any non-primitive type. 
#### 3.1.5 While Loop
Everything up until this point has had to deal with basic decision making. Now, we enter the realm of loops, which will help write repeated code. Loops are one of the most powerful basic construct in programming, and almost every program will have at least one. We'll start with one type of loop: while loops.
While loops have the following form:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-45-1>)while(<boolean-expression>){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-45-2>)// loop body
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-45-3>)}

```

Before entering the loop, the boolaen expression will be evaluated. If true, then the flow of execution will enter the loop body. If false, the entire loop body will be skipped. At the end of the block, the expresion will be evaluated again. If it is true, then the loop repeats itself, and if it is false then it continues after the loop.
#### 3.1.6 Do-While Loops
Do-while loops are very similar to while loops, with one exception. They look like this:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-46-1>)do{
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-46-2>)// loop body
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-46-3>)}while(<boolean-expression>)

```

As you may be able to guess from the structure of the code, the boolean expression in a do-while loop does not evaluate when you enter the loop for the first time. Instead, it only gets evaluated after the body is done. Therefore, a do-while loop will always execute at least once, whereas a while loop may never execute.
#### 3.1.7 For Loops
For loops are another type of loop, and they are incredibly common. In C++ there are two main types of for loops: **C-style for loops** and **foreach loops**. We wil start with C-style for loops because they are more traditional and are generally more flexible. Most people consider these "normal" for loops, and they are called c-style because they originate from C.
A c-style for loop has the following syntax:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-47-1>)for(<initialization-statement>;<loop-condition>;<update-statement>){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-47-2>)// loop body
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-47-3>)}

```

As you can see, there are 3 main parts to a for loop (4 if you include the loop body): the **initialization statement** , the **loop condition** , and the **update statement**. The precise names are not important, but knowing what each part does is. It becomes a little more clear with the canonical example:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-48-1>)for(inti=0;i<5;i++){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-48-2>)std::cout<<i<<"\n";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-48-3>)}

```

In this example, the program will output the numbers 0-4 all on separate lines. The initialization statement is `int i = 0;` This defines a variable named `i` for the duration of the for loop and sets it to 0. This is the first thing that is run. Then, the loop condition `i < 5` is checked. Because `0 < 5` evaluates to true, the loop body is entered, where the number 0 is outputted to standard output alonside a newline. Lastly, the update statement is run, increasing the variable `i` by 1. Once again the loop condition is checked, and because `1 < 5` is still true, the loop body is run again. This continues until `i` becomes 5, and since `i` is only printed out if `i < 5`, the number 5 is never printed out.
This format of creating a variable `i` and using it to count to a specific number is a very common programming idiom in C++ and other C-based languages. Using `i` is arbitrary, and is generally popular because often times the brevity you get from having a one letter variable outweighs any clarity you get from using a longer, more descriptive name (because usually it is just used to signify an arbitrary iteration count). However, sometimes it makes more sense to use a more descriptive name, such as `row` or `column` if you are doing something more specific. The "canonical" variable names that follow `i` if you are using nested for loops are `j` and `k`, such as in the following example:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-49-1>)for(inti=0;i<10;i++){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-49-2>)for(intj=0;j<10;j++){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-49-3>)for(intk=0;k<10;k++){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-49-4>)// do something
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-49-5>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-49-6>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-49-7>)}

```

While this C-style of for loop is very flexible and allows you to do a lot, the most common use case historically has been to iterate through a container of elements. We haven't covered containers of elements yet in this tutorial, so just know that later on in this tutorial this is something we will talk about, and when that comes we will introduce the other kind of for loop: a foreach loop. This is useful because it removes all the boilerplate a C-style for loop forces you to write out.
#### 3.1.8 Break and Continue
In all of the above loop constructions, there two additional keywords that allow you more flexibility with your flow of control. They are the **break** statement and the **continue** statement.
The break statement is slightly simpler, so we will start with it. Essentially, if a break statement is executed, the inner-most loop is immediately exited, no matter what the loop's boolean condition is. This is very commonly used in conjunction with an infinite loop, like in the below example, but it does not have to be.
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-50-1>)while(true){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-50-2>)// normally, an infinite loop since true always evaluates to true... however,
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-50-3>)boolflag=false;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-50-4>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-50-5>)// do computations, setting the flag value accordingly
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-50-6>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-50-7>)if(flag){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-50-8>)break;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-50-9>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-50-10>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-50-11>)// do more computations, setting the flag value accordingly
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-50-12>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-50-13>)if(flag){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-50-14>)break;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-50-15>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-50-16>)}

```

As you can see, there are two possible ways to leave this for loop: either through the first if statement or through the second one. A similar effect could be achieved by moving the flag variable to the boolean condition and morphing the code like so:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-51-1>)boolflag=false;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-51-2>)while(!flag){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-51-3>)// do computations, setting flag
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-51-4>)if(!flag){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-51-5>)// do more computations, seting flag as appropriate
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-51-6>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-51-7>)}

```

This acheives the same exact behavior as the above example, but it is arguable more complicated to understand. One measurable way the previous example with breaks is better than this example is that the majority of the logic is only at one level of indentation, while in this example much of the code is at two levels of indentation.
Similar to the break statement is also the continue statement. The continue statement works exactly as a break statement, except instead of exiting the loop entirely it returns to the top of the loop to run the loop condition. If that is true, then it goes into the body like normal, and if false it exits the loop like normal.
#### 3.1.9 Try-Catch & Exceptions
Try-catch blocks are used in conjunction with exceptions to provide error handling. We won't really go in much depth here, but if you have time you may want to look into it on your own. The general syntax is as follows:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-52-1>)try{
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-52-2>)// block of code you think might error
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-52-3>)}catch(ExceptionTypeexception){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-52-4>)// error handling
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-52-5>)}

```

You can also catch other types of values instead of exceptions, but generally it is recommended to reserve try-catch for error handling with exceptions, and not to throw around actual values you program needs to run.
#### 3.1.10 Goto
Goto is a keyword which exists in C and C++, alongside some other lower level languages, which has been greatly disparaged in modern times. It essentially allows you to jump to any other point in a program at will. This is widely frowned upon because it can make your code harder to understand. Codebases which relied upon them heavily in the past are actually where the term "spaghetti code" originates from, because the flow of execution was all over the place like the noodles in spaghetti. So while you should almost never use a goto statement in your code, there are _some_ places where it actually can be helpful.
For example, since `break` statements only allow you to break out of the innermost loop, you can use a goto to break out of nested loops like so:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-53-1>)intsecret_number=/* user input */;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-53-2>)while(true){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-53-3>)for(inti=0;i<10;i++){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-53-4>)if(secret_number+i==10){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-53-5>)gotoloop_end;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-53-6>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-53-7>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-53-8>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-53-9>)// update secret number based on user input
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-53-10>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-53-11>)loop_end:
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-53-12>)// code continues

```

Syntactically, note that `goto` depends on labels, in this case `loop_end:`. Note that it ends in a colon. You should also note that the label could have been anywhere in the file, even before the `goto`.
This specific example makes it so you don't have to have multiple break statements, and include a separate condition variable to detect if you need to break multiple times. While it looks silly here, in more complicated nested loops this can make it a lot simpler to understand.
### 3.2 Keeping Track of Guesses Remaining
With this knowledge on control structures, we can make the character guessing game based off of the flow chart from earlier.
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-1>)#include<iostream>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-2>)#include<string>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-3>)#include<cctype>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-4>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-5>)intmain(){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-6>)intguesses_remaining=5;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-7>)charletter_to_guess='a';
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-8>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-9>)std::cout<<"Welcome to Hangman!\n";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-10>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-11>)while(guesses_remaining>0){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-12>)std::cout<<"\nYou have "<<guesses_remaining<<" guesses remaining.\n";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-13>)std::cout<<"_"<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-14>)std::cout<<"Guess a letter: ";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-15>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-16>)std::stringinput;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-17>)std::cin>>input;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-18>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-19>)if(input.size()!=1){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-20>)std::cout<<"Please enter a single letter."<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-21>)continue;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-22>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-23>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-24>)charletter_guessed=tolower(input[0]);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-25>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-26>)if(letter_guessed==letter_to_guess){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-27>)std::cout<<"You guessed correctly! Congratulations"<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-28>)break;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-29>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-30>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-31>)std::cout<<"You guessed incorrectly."<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-32>)guesses_remaining--;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-33>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-34>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-35>)if(guesses_remaining==0){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-36>)std::cout<<"You are out of guesses! The letter was "<<letter_to_guess<<"."<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-37>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-38>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-39>)return0;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-54-40>)}

```

Note that the while loop's condition is `(guesses_remaining > 0)`, and that there is one `break` statement inside of the loop, so there are two ways to leave the loop: either by making the loop's condition false (having no guesses left) or by guessing the correct letter.
Note that there are many ways you could structure this loop, and this is just one possibility. Other ways might be cleaner or more preferable for some people (e.g. `while (true)` vs. `while (<condition>)`, but these are generally personal preference).
### 3.3 Randomly Selecting a Character
Now, we'll take another small step and randomly select a character to guess. In doing this, we will talk about how to write our own functions.
#### 3.3.1 How to Define a Function
Up until this point, we have only been using functions that were defined in the standard library (e.g. `std::tolower`). This is very convenient for C++ programmers because they do not need to rewrite these lower level functions that are very commonly used (that is why they are in the standard library). However, not every possible function you may want to use is defined in the standard library. For example, and where we are going with this, there is no standard library function which gives a random lowercase character. This is an example of a case when you would want to write your own function.
At a high level, functions are an example of an **abstraction**. In this case, we say that the implementation level details of `std::tolower` have been **abstracted away** from the C++ programmer. You need not know the ASCII representation of chars in C++ and how to manipulate them. You only need to know the **interface** of the function to use it. That is, you only need to know the parameters to the function and the return type, and how they are related, to use the function.
When you are planning out a program, it can be useful to think at a high level and delegate out functionality to functions. Currently in our program, we are currently hardcoding the `letter_to_guess` to be `'a'`. But, if we had a function called `getRandomLetter` which took no parameters and returned a character, then we could write a line that looks like this:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-55-1>)charletter_to_guess=getRandomLetter();

```

Now, as long as we had a function with this declaration
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-56-1>)chargetRandomLetter();

```

which returned a random lowercase ASCII character, then our program would work. So, let's create this function.
To start, we'll assume we want to keep all of our code inside of our `main.cpp` file. Later on, we'll talk about how to separate code into different files, if only to make sure we talk about how to do it, as this program probably isn't complicated enough to necessitate it.
To define a function, you follow this general format:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-57-1>)<return-type><function-name>(<param_1-type><param_1-name>,...,<param_n-type><param_n-name>){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-57-2>)// code here
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-57-3>)}

```

With this, if you are familiar with more modern languages like Python, you might expect this to work:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-58-1>)// #includes for standard library
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-58-2>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-58-3>)int main() {
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-58-4>)  // ...
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-58-5>)  char letter_to_guess = getRandomLetter();
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-58-6>)  // ...
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-58-7>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-58-8>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-58-9>)char getRandomLetter() {
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-58-10>)  // definition here
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-58-11>)}

```

However, if you do this you will get the following compile time error:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-59-1>)main.cpp: In function ‘int main()’:
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-59-2>)main.cpp:7:28: error: ‘getRandomLetter’ was not declared in this scope
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-59-3>)  7 |   char letter_to_guess = getRandomLetter();
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-59-4>)   |              ^~~~~~~~~~~~~~~

```

The reason this error is because the function `getRandomLetter` hasn't been defined by the time it is trying to be called inside `main`. This reveals something important: when you are calling a function in C++ it must have already been defined by the time that point in the program has been reached.
Your first instinct to solve this might be to put the function definition before `main`. While this would work, it can lead to complications when you are calling functions from other functions, since you will need to make sure a function is defined before you use it.
To solve this, you can write a **forward declaration**. The best way to illustrate this is by an example:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-60-1>)// #includes for standard library
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-60-2>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-60-3>)chargetRandomLetter();// NEW: forward declaration
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-60-4>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-60-5>)intmain(){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-60-6>)// ...
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-60-7>)charletter_to_guess=getRandomLetter();
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-60-8>)// ...
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-60-9>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-60-10>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-60-11>)chargetRandomLetter(){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-60-12>)// definition here
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-60-13>)}

```

This works because before we enter the main function, we are telling the compiler that there is a function `getRandomLetter` which takes no parameters and returns a `char`. When it reaches the call to `getRandomLetter` in `main`, it knows that there is a function by that name, and it is able to confirm that the return type of the function matches the variable we are assigning it into. When the function is actually called, it correctly will go to the definition at the end of the file to execute that code.
If you had multiple functions, you would put all of the forward declarations at the beginning of the file—not having to worry about their order—and then all of their definitions at the end—also not having to worry about the order.
Also to make sure this is clear, there is no rule that the `main` function has to go after the forward declarations but before the definitions. You can basically do anything that compiles, but I think this organization makes since if you are defining functions like this inside of a one-file program.
Now that we've talked about how to define a general function, we can delve into the specific implementation for `getRandomLetter`. The easiest way to implement this 
#### 3.3.2 Writing the `getRandomLetter` Function
The easiest way to write this function is to understand how ASCII values work.
Under the hood, `char`'s are actually just `int`'s but with two main differences: 1. They are encoded using the ASCII encoding scheme 2. In accordance with ASCII, a `char` is only 1 byte, unlike an `int` which is 4 bytes. (Technically on some compilers/systems an `int` might not be 4 bytes, but on any modern compiler it should be, not that this matters right now).
So, if we understand how ASCII works, we can selectively generate random integers with the correct ASCII encodings, and then convert them to chars.
The ASCII table looks like this:
![ASCII Table](https://drive.google.com/uc?export=view&id=1ifkazE5a22WOJR4OXk95pZDMC9NFewWT)
From this, we can see that all of the lowercase ASCII letters `'a'` through `'z'` are in the range `97` through `122`. Therefore, if we generate a random number between those two bounds inclusive, then we will have a random lowercase character.
To generate random integers, first include `<random>` from the standard library like so
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-61-1>)#include<random>

```

Now, this library is actually fairly complicated and provides a surprising amount of configurability for pseudorandom number generation, but for now we'll just focus on a simplified view of it:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-62-1>)// ...
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-62-2>)chargetRandomLetter(){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-62-3>)constcharASCII_LOWER_A=97;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-62-4>)constcharASCII_LOWER_Z=122;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-62-5>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-62-6>)// Only create these objects once: they are static
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-62-7>)staticstd::random_devicerd;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-62-8>)staticstd::mt19937mt(rd());
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-62-9>)staticstd::uniform_int_distribution<int>dist(ASCII_LOWER_A,ASCII_LOWER_Z);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-62-10>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-62-11>)returndist(mt);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-62-12>)}

```

Let's break this down.
  * First, I create two constants for the ASCII values of `'a'` and `'z'`. This makes the code more readable, and generally if it makes sense to label constant numbers like this, you should.
  * Then, I create an `std::random_device`. If you have heard of pseudorandom number generation, then you know that when you generate pseudorandom numbers you have to provide a "seed" for the algorithm. Commonly, this is the current UNIX timestamp (seconds since January 1st, 1970), but the `std::random_device` class cleverly requests some information from the operating system to formulate this seed relatively randomly. This means you don't have to manually create the seed, unless you want to for testing purposes.
  * Next, I create an `std::mt19937`, which is a pseudorandom number generator which uses the Mersenne Twister algorithm to generate random numbers. We pass in the random device to provide the seed.
  * To finish the `static` variables we need, I create an `std::uniform_int_distribution` which represents a uniform distribution from `97` to `122`, or all the lowercase ASCII letters.
  * Lastly, to actually use these values, we use the `std::uniform_int_distribution` as if it were a function and pass in the pseudorandom generator to generate pseudorandom numbers within the distribution and using the given generator.


As for what the `static` means inside infront of the type of these variables, this is something unrelated to the `<random>` standard library features, and is a part of C++ itself (and other languages like Java).
Basically, a `static` variable is like a global variable, but one that can only be accessed within the scope it is defined. It is global because it gets allocated once at the beginning of the program, and persists across function calls. Therefore, in this context the static variables we define are created once at the start of the program, and every time we enter the `getRandomLetter` function these variables refer to the same exact objects as before.
The prototypical example of a `static` variable would be like follows:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-63-1>)voidtestFunction(){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-63-2>)staticintcount=0;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-63-3>)count++;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-63-4>)std::cout<<"testFunction() has been called "<<count<<" times"<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-63-5>)}

```

This is a simple function that keeps track of how many times it has been called and prints out this number. This works because the `count` variable is declared as `static`: it is set to 0 once at the start of the program, and every time the function is called the value is the same as it was before the previous call to the function exited.
We use `static` in our random example because we don't want to create a new seed and random number generator every time we call the `getRandomLetter` function. We could achieve the same thing by making these `static` variables global variables instead, but in this case it is a little better to have them as `static` variables because they only need to be accessed inside of the `getRandomLetter` function, and generally it is better to limit the scope of your variables as much as possible while still being usable.
Now, if we put everything all together the program looks like this:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-1>)#include<iostream>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-2>)#include<string>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-3>)#include<cctype>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-4>)#include<random>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-5>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-6>)chargetRandomLetter();
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-7>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-8>)intmain(){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-9>)intguesses_remaining=5;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-10>)charletter_to_guess=getRandomLetter();
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-11>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-12>)std::cout<<"Welcome to Hangman!\n";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-13>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-14>)while(guesses_remaining>0){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-15>)std::cout<<"\nYou have "<<guesses_remaining<<" guesses remaining.\n";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-16>)std::cout<<"_"<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-17>)std::cout<<"Guess a letter: ";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-18>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-19>)std::stringinput;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-20>)std::cin>>input;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-21>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-22>)if(input.size()!=1){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-23>)std::cout<<"Please enter a single letter."<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-24>)continue;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-25>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-26>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-27>)charletter_guessed=tolower(input[0]);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-28>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-29>)if(letter_guessed==letter_to_guess){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-30>)std::cout<<"You guessed correctly! Congratulations"<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-31>)break;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-32>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-33>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-34>)std::cout<<"You guessed incorrectly."<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-35>)guesses_remaining--;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-36>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-37>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-38>)if(guesses_remaining==0){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-39>)std::cout<<"You are out of guesses! The letter was "<<letter_to_guess<<"."<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-40>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-41>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-42>)return0;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-43>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-44>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-45>)chargetRandomLetter(){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-46>)constcharASCII_LOWER_A=97;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-47>)constcharASCII_LOWER_Z=122;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-48>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-49>)// Only create these objects once: they are static
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-50>)staticstd::random_devicerd;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-51>)staticstd::mt19937mt(rd());
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-52>)staticstd::uniform_int_distribution<int>dist(ASCII_LOWER_A,ASCII_LOWER_Z);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-53>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-54>)returndist(mt);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-64-55>)}

```

This program now accurately creates a letter guessing game where the letter you have to guess is randomized. Now, if we were actually creating a letter guessing game, we might consider adding in hints that tell you if the actual letter is further forward or back in the alphabet, but since our end product is a word guessing game we will not worry about making this intermediate program fun/fair.
### 3.4 Refactor to Use Header Files
Often when writing larger programs, it becomes imperative to organize separate functions (and classes) in different files so that it is easier to navigate the codebase. This is hardly necessary for this file, but it is still important to know how to do, so we'll talk about how to do this here.
When writing C++ programs, there are two different kinds of files: **header files** and **source files**. Source files are what we have been dealing with so far, and they end in the `.cpp` extension. Header files are another kind of file, and they end in the `.h` extension. Sometimes you might see people use the `.hpp` extension to distinguish between C and C++ header files. You can use either extension but you should try to be consistent.
Earlier, we talked about the difference between forward declarations and actual function definitions. You can envision a similar distinction for header and source files. If we wanted to refactor out our helper generate random character function to a separate file that defines all of our utility functinos, then we could create two files: `utilities.hpp` and `utilities.cpp`, and then put in the forward declaration into the header file and the function definition into the source file.
However, you don't actually have to split up the function definition from the forward declaration, just like we didn't really have to do that in the single file version. You are also able to just put the entire function definition inside of the header file. We'll start with this first because it is easier to understand.
#### 3.4.1 Only Using Header Files
To do this, first you would put the entire function definition inside of the header file
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-65-1>)// utilites.hpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-65-2>)#pragma once
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-65-3>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-65-4>)#include<random>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-65-5>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-65-6>)chargetRandomLetter(){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-65-7>)constcharASCII_LOWER_A=97;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-65-8>)constcharASCII_LOWER_Z=122;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-65-9>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-65-10>)// Only create these objects once: they are static
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-65-11>)staticstd::random_devicerd;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-65-12>)staticstd::mt19937mt(rd());
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-65-13>)staticstd::uniform_int_distribution<int>dist(ASCII_LOWER_A,ASCII_LOWER_Z);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-65-14>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-65-15>)returndist(mt);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-65-16>)}

```

Then, we would include the `utilities.hpp` file in `main.cpp` by writing the following line near the top
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-66-1>)// main.cpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-66-2>)// ...
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-66-3>)#include"utilities.hpp"
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-66-4>)// ...

```

Essentially, this include line directly copies all of the contents of the `utilities.hpp` file into the `main.cpp` file, right where the include line is. It is exactly equivalent to if we put the function definition on that line.
You might have noticed that at the top of header file we included a line that says `#pragma once`. This is called a **header guard**. Essentially, a header guard prevents the compiler from including the same header file twice, if you are including it across multiple files. This prevents functions from being defined twice. You basically will always want to do this, so any header file you write should have this.
Note that the `#pragma once` line is technically not a part of standard C++. However, at this point it is supported by every major and modern compiler, so for our purposes it should be fine to use. The older, more "standard" way of doing it would look like this:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-67-1>)// utilities.hpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-67-2>)#ifndef UTILITIES_HPP
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-67-3>)#define UTILITIES_HPP
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-67-4>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-67-5>)// Contents here
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-67-6>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-67-7>)#endif

```

The way this works is basically the first time the compiler enters this file, the term `UTILITES_HPP` has not been defined in any compiler macro, so it enters the region of code enclosed by the `#ifndef` and `#endif` lines. The first thing it does is it defines `UTILITIES_HPP` in a macro (one that doesn't really do anything), and then it compiles everything as normal. Then later on if another file tries to include this file the `#ifndef` will block it from recompiling the actual definitions in the header file since `UTILITIES_HPP` has already been defined.
Note that the actual term you define (`UTILITES_HPP` in the above example) does not matter as long as it doesn't collide with any term used in another header file. It is fairly common, however, to just use the file name.
To summarize this, here are the pros/cons of each approach:
Pros | Cons  
---|---  
`#pragma once` | easy and less error prone | not standard C++  
`#ifndef` | standard C++, supported by every compiler | more error prone if you mistype something  
Therefore, for all TUAS things we will just use `#pragma once`.
Now, that is everything you would need to know to just extract out function definitions to header files. You would compile the `main.cpp` exactly the same since in the process of compiling `main.cpp` it will follow the `#include` line to the appropriate file and copy everything over.
#### 3.4.2 Using Header and Source Files
Now, we'll go over another approach which preserves the distinction between forward declarations and actual definitions.
To start, the header file will be much simpler as it essentially just contains the forward declaration.
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-68-1>)// utilities.hpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-68-2>)#pragma once
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-68-3>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-68-4>)chargetRandomLetter();

```

Then, the source file will contain the actual definition.
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-69-1>)// utilities.cpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-69-2>)#include<random>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-69-3>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-69-4>)chargetRandomLetter(){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-69-5>)constcharASCII_LOWER_A=97;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-69-6>)constcharASCII_LOWER_Z=122;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-69-7>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-69-8>)// Only create these objects once: they are static
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-69-9>)staticstd::random_devicerd;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-69-10>)staticstd::mt19937mt(rd());
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-69-11>)staticstd::uniform_int_distribution<int>dist(ASCII_LOWER_A,ASCII_LOWER_Z);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-69-12>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-69-13>)returndist(mt);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-69-14>)}

```

And that is it. The `main.cpp` file will look exactly the same as we still include the `utilities.hpp` file like normal. Note that there is no header guard in the source file because it is not a header file and shouldn't be included in other files.
The main complexity, however, comes when you are trying to compile this program. This complexity is definitely overkill for this simple program, but when you start including class definitions and much more functions it becomes worth it.
Before, compiling was just one command: `g++ main.cpp`. Now, however, there are two main steps we need to do.
First, we have to compile the source files separately into **object files** (that have the `.o` extension). Object files are intermediate files that contain the compiled information from a given `cpp` file and any `hpp` files it may have included. In this case we have two `cpp` files: `main.cpp` and `utilities.cpp`, so we create two object files with this command:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-70-1>)g++-cmain.cpputilities.cpp

```

This will create `main.o` and `utilities.o`. Note that because we give the `-c` flag, it will take all of the `cpp` files afterwards and compile their object file representation.
Second, we combine the object files into one final executable with this command:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-71-1>)g++-ochar_guessmain.outilities.o

```

This creates an executable called `char_guess` based on the information from `main.o` and `utilities.o`. Note that the `-o` extension is immediately followed by the name of the executable, and then all of the object files you want to use.
For more complicated programs, this is definitely a process you would want to automate. A simple tool to do this is a Makefile, or if you wanted something more sophisticated you could like a build tool like CMake. However, this is beyond the scope of this tutorial, so we won't talk about either here.
For the purposes of this tutorial, you can use this Makefile to compile the basic program. To use it, you can type `make build` in your terminal to compile the program to the executable `hangman.out`. In addition, the command `make clean` will delete the executable and all intermediate object files.
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-72-1>)GCC=g++-std=c++20
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-72-2>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-72-3>)build:main.o utilities.o
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-72-4>)${GCC}-ohangman.outmain.outilities.o
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-72-5>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-72-6>)main.o:main.cpp utilities.hpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-72-7>)${GCC}-cmain.cpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-72-8>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-72-9>)utilities.o:utilities.cpp utilities.hpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-72-10>)${GCC}-cutilities.cpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-72-11>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-72-12>).PHONY:clean
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-72-13>)clean:
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-72-14>)rm-rf*.o
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-72-15>)rm-rf*.out

```

Note: this Makefile adds the extra parameter `-std=c++20`. This will be needed later on if you are using an older version of g++ that defaults to c++17. In this tutorial we use some language features that were not introduced until c++20, so you will need to enable them in order to compile the program.
## 4. From Characters to Words
For the rest of the tutorial I'll keep this separation of files we set up from the previous section, but if you skipped it then everything will still work fine if you put everything in `main.cpp`.
By this point, we have a working character guessing game. Now, we'll take the big step and convert it to actual hangman.
### 4.1 Pseudocode
Writing out **pseudocode** is a good strategy when planning out a program, and we'll use it here to fill in the gaps of what we will need to implement to make our word guessing game. If you are unaware, pseudocode is a human-readable description of the processes a program or algorithm must take. 
Whenever you write pseudocode it is up to you how close you want it to look to actual code, and in this case since we already have some code that we're adding to, my pseudocode is a mix of actual C++ and comment descriptions of what needs to happen. In the following snippet, I've rewritten the `main.cpp` file but included pseudocode for everything we will need to change.
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-1>)intguesses_remaining=5;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-2>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-3>)std::stringword_to_guess=// generate random word
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-4>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-5>)std::cout<<"Welcome to Hangman!\n";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-6>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-7>)while(guesses_remaining>0){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-8>)std::cout<<"\nYou have "<<guesses_remaining<<" guesses remaining.\n";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-9>)// Output current status of guessed word in the following 
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-10>)// format: _ _ _ c _ _ _
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-11>)//    if the word was glucose and the player had 
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-12>)//    only guessed 'c'
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-13>)std::cout<<"Guess a letter: ";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-14>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-15>)std::stringinput;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-16>)std::cin>>input;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-17>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-18>)if(input.size()!=1){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-19>)std::cout<<"Please enter a single letter."<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-20>)continue;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-21>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-22>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-23>)charletter_guessed=tolower(input[0]);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-24>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-25>)// Check to make sure the current letter the user just typed
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-26>)// hasn't already been guessed.
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-27>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-28>)if(/* Check if letter is in word */){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-29>)// Output how many occurances of the letter there are
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-30>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-31>)// if entire word guessed, break
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-32>)// if not, continue
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-33>)}else{
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-34>)std::cout<<"Incorrect! There are no "<<letter_guessed<<"'s in the word."<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-35>)guesses_remaining--;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-36>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-37>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-38>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-39>)if(guesses_remaining==0){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-40>)std::cout<<"You are out of guesses! The word was "<<word_to_guess<<"."<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-41>)}else{
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-42>)std::cout<<"Congratulations! You guessed the word correctly!\nThe word was: "<<word_to_guess;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-43>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-44>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-73-45>)return0;

```

From this, we have to figure out how to do all of the following things:
  * Output current status of guessed word
  * Check to make sure the inputted letter hasn't been guessed
  * Check if guessed letter is in word
  * Output how many occurances of a letter there are in a word
  * Check if the entire word has been guessed


This is a good start, but we can take this and get a little more specific. In the next step, we'll convert the psuedocode into actual code by replacing all of the comment descriptions with function calls that perform the described code.
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-1>)intguesses_remaining=5;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-2>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-3>)std::stringword_to_guess=generateRandomWord();// NEW
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-4>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-5>)std::cout<<"Welcome to Hangman!\n";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-6>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-7>)while(guesses_remaining>0){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-8>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-9>)outputCurrentStatus(???);// NEW
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-10>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-11>)charletter_guessed=getLetterInput(???);// NEW
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-12>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-13>)intnum_occurrences=getNumOccurrences(letter_guessed,word_to_guess);// NEW
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-14>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-15>)if(num_occurrences>0){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-16>)if(num_occurrences==1){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-17>)std::cout<<"Correct! There is 1 "<<letter_guessed<<" in the word."<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-18>)}else{
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-19>)std::cout<<"Correct! There are "<<num_occurrences<<" "<<letter_guessed<<"'s in the word."<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-20>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-21>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-22>)if(isEntireWordGuessed(???)){// NEW
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-23>)break;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-24>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-25>)}else{
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-26>)std::cout<<"Incorrect! There are no "<<letter_guessed<<"'s in the word."<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-27>)guesses_remaining--;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-28>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-29>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-30>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-31>)if(guesses_remaining==0){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-32>)std::cout<<"You are out of guesses! The word was "<<word_to_guess<<"."<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-33>)}else{
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-34>)std::cout<<"Congratulations! You guessed the word correctly!\nThe word was: "<<word_to_guess;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-35>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-36>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-74-37>)return0;

```

In this code snippet there are 5 new functions that we need to write, and one we write them the program should theoretically just work with little to no changes in the main function. These functions are: 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-75-1>)std::stringgenerateRandomWord()// 1
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-75-2>)voidoutputCurrentStatus(???)// 2
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-75-3>)chargetLetterInput(???)// 3
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-75-4>)intgetNumOccurrences(letter_guessed,word_to_guess)// 4
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-75-5>)boolisEntireWordGuessed(???)// 5

```

In this list, functions 1 and 4 have their entire parameter list written out, while functions 2, 3, and 5 just have question marks. I prefer to do this for the more complicated funtions because it can help me to look at each function individually before deciding all of the variables from the main function that will be needed. With that in mind, let's go down the list and implement each function.
### 4.2 `std::string generateRandomWord()`
In the original program description, it said that there should be a file that the program reads from which provides all of the valid hidden words. Since this isn't exactly integral to the functioning of the program itself, it makes sense to defer implementing this until we make sure that everything else works. Therefore, we'll implement a "dummy" or "mock" implementation of this function until everything else around it is in place.
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-76-1>)// utilities.hpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-76-2>)std::stringgenerateRandomWord();
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-76-3>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-76-4>)// utilities.cpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-76-5>)std::stringgenerateRandomWord(){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-76-6>)return"hello";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-76-7>)}

```

### 4.3 `void outputCurrentStatus(???)`
We want this function to output text in the following format, assuming the word is `"hello"`:
Note that now we are adding the letters guessed to the output.
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-77-1>)You have [X] guesses left.
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-77-2>)You have already guessed:
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-77-3>)_ _ _ _ _

```

From this, we can tell there are 3 pieces of information from the main function that we will need to implement this function:
  1. the number of remaining guesses
  2. the word to guess
  3. the letters that have already been guessed


The 1st and 2nd things are trivial to pass in because we are already tracking them, but the 3rd is something that we are not even keeping track of yet. This means that we will need to make some changes to our main function so we are keeping track of all of the letters that have been guessed. Before we do this, however, we need to talk about some more advanced data structures.
#### 4.3.1 The Problem
Only using things we have talked about up until this point, if you tried to keep track of all of the letters that have been guessed you might try something incredibly suspicious. One such idea might be to create 26 different boolean variables, one for each letter, which are true if that letter has been guessed and false otherwise. Another idea would be to create 26 different char variables, which are named things like `first_guess`, `second_guess`, etc.... Both of these approaches would lead to completely unmaintainable code, especially for other kinds of situations which aren't limited by the length of the alphabet, and you would be right in thinking that there is a better way. 
One "_good_ " approach that you could actually do without learning anything else would be to create a variable of type `std::string` that starts as an empty string. Then, as the player guessed letters you could append those characters to the string. Therefore, you could just check if a character was in the string to see if it had been guessed. While this would work and it isn't bad by any means, there are other approaches which lead to more understandable code, and which abstract to other kinds of data types instead of just chars.
With this in mind, we'll talk about a bunch of the most common data structures that could possibly be used for this problem. Then, we'll talk about how any of them could be used in many different ways to solve the problem. Lastly, we'll pick one and use it.
#### 4.3.2 C-style Arrays
The most "simple" way to solve this problem is to use a C-style array. In this case, simple doesn't necessarily mean that it is the easiest for a new programmer to understand or use, but that it doesn't have much going on behind the scenes besides what you see.
At a high level, a C-style array is a "container" of elements with a specified size. For example, if you wanted to keep track of a student's grade in a class, you could create an array of size 3 which contains their 2 midterm scores and their final score, like shown below: 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-78-1>)inttest_scores[]{50,75,80};

```

In this example, we are creating an array variable called `test_scores` which contains `int`'s. Then, we set this variable to the value of `{50, 75, 80}`. This is called an **initalizer list** , and is a way to distinctly set the value of each **index** in the array. There are some important notes on this syntax: 1. there is no equals sign between the variable name and the initializer list 2. the square brackets which make it an array come after the variable name, not the type 
To access each of the values in the array, you use the following syntax:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-79-1>)// Display the first midterm score
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-79-2>)std::cout<<test_scores[0]<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-79-3>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-79-4>)// Display the second midterm score
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-79-5>)std::cout<<test_scores[1]<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-79-6>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-79-7>)// Display the final score
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-79-8>)std::cout<<test_scores[2]<<std::endl;

```

From this, you can see that arrays are **0 indexed**. This means that the first value stored in the array is at index 0, and the final value stored in the array is at index `size - 1`.
It is undefined behavior to access any index outside of this range, so don't do it.
If you are coming from a newer language, then you might expect the following line of code to output all of the values inside of the array:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-80-1>)std::cout<<test_scores<<std::endl;

```

However, if you do this you will receive output which looks something like this:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-81-1>)0x7ffca1c106d4

```

So what is going on here?
Essentially, C-style arrays are **pointers**. What this means is that the actual value stored in `test_scores` is a **memory address**. In other words, the value stored inside of `test_scores` represents a place inside of your computer at which the array begins. We could go really in depth and explain the nuances of what this means, but it is beyond the scope of this tutorial.
Another thing this means, however, is that there is nothing intrinsically part of the array itself that keeps track of the size of the array. If you wanted to keep track of the size, you would have to have another variable which was set to it. This is why when functions expect C-style arrays as parameters, there is almost always one parameter which is the array itself, and another which is the size, like in the following example:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-82-1>)voidexampleFunction(intarray[],intsize){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-82-2>)for(inti=0;i<size;i++){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-82-3>)// do something at every index...
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-82-4>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-82-5>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-82-6>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-82-7>)// Since arrays are also pointers, the following is equivalent
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-82-8>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-82-9>)voidexampleFunction(int*array,intsize){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-82-10>)for(inti=0;i<size;i++){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-82-11>)// do something at every index...
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-82-12>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-82-13>)}

```

If the talk of pointers is confusing you, don't worry about it too much. The later sections don't refer to them.
In addition, it is important to note that the size of a C-style array MUST be determinable at compile time. This means that even if an array will never change size, if the compiler can't determine what it will be at compile time then the program will error and be unable to compile. The most common scenario in which new programmers get confused by this is demonstrated by the following sample program:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-83-1>)intsize;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-83-2>)std::cin>>size;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-83-3>)int[size]my_array;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-83-4>)// ERROR because you can't determine the value of size at compile time
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-83-5>)// as it depends on user input

```

If you want to do something like this, you would either need to do some more advanced manual memory management (the C approach), or use one of the data structures we talk about later (the C++ approach).
Before we move on to the more C++ relevant data structures, it is imporant to talk about the other ways you can initialize C-style arrays. Before, we used an initializer list to set the value of each index. However, you can also do the following:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-84-1>)intarray[100];
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-84-2>)array[0]=5;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-84-3>)array[1]=10;

```

In this example, we create an array of size 100 and then individually set the values of each index. An important thing to note is that the values of the indices that haven't been set to anything are undefined. Essentially, what this means is that `array[2]` through `array[99]` could be anything. In practice, they will be whatever memory was left over in that region of your computer from an earlier program, or an earlier part of the current program.
In most C++ programs you probably shouldn't use C-style arrays, but they are still important to understand because you'll likely find them in other people's code. When writing your own code, however, I'd recommend using one of the following data structures we talk about.
#### 4.3.3 std::array
`std::array` is a standard library container which essentially replaces C-style arrays. In other words, they are a fixed sized container where the size must be determinable at compile time.
The following sample shows the equivalent code from the `test_scores` example we had in the previous section:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-85-1>)#include<array>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-85-2>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-85-3>)// ...
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-85-4>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-85-5>)std::array<int,3>test_scores={50,75,80};
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-85-6>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-85-7>)std::cout<<test_scores[0]<<"\n";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-85-8>)std::cout<<test_scores[1]<<"\n";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-85-9>)std::cout<<test_scores.at(2)<<std::endl;

```

There are 4 things of note to talk about in this example: 1. Inside the angle brackets is where you define the type of variables the array can store, and the size of the array. 2. The syntax for initializer lists is a little more flexible: note the equals sign 3. Square bracket notation works, but in addition you can use the `at` function. The main difference between this and the square bracket notation is that `at` provides bounds checking, so it will throw an exception if you attempt to index out of the bounds of the array 4. Make sure to remember to include the `<array>` standard library definitions with `#include <array>`
In addition, the array itself also keeps track of it's size, which means you can do something like this:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-86-1>)std::array<int,3>arr={1,2,3};
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-86-2>)for(inti=0;i<arr.size();i++){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-86-3>)// do something at every index...
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-86-4>)}

```

And you can also use this syntax as well:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-87-1>)std::array<int,3>arr={1,2,3};
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-87-2>)for(inti:arr){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-87-3>)// do something at every index...
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-87-4>)}

```

To read more about all of the extra functionality `std::array` provides, you can check out [this page](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/en.cppreference.com/w/cpp/container/array>).
#### 4.3.4 std::vector
Up until this point, we have only talked about data structures which have a fixed size. These are nice, but it doesn't take too much imagination to think of a scenario where you would want an array that might need to change size. Of course, you could achieve this behavior by creating an extremely large array, and then use as much space as you need, but that is extremely inefficient spacewise.`std::vector` will let us have a dynamically sized data structure so we don't need to use a ton of extra space and manually keep track of how much we are actually using. 
If you are familiar with Java, `std::vector` is C++'s equivalent of `ArrayList`, and if you are familiar with Python, it is the equivalent of a list. Therefore, it is probably the most commonly used standard library data structure in C++.
The following example shows the basic functionality of a vector.
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-88-1>)// Make sure to remember to include the standard library
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-88-2>)#include<vector>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-88-3>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-88-4>)intmain(){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-88-5>)// Create an empty vector
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-88-6>)std::vector<int>vec;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-88-7>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-88-8>)// Use push_back to add items to the end
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-88-9>)vec.push_back(1);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-88-10>)vec.push_back(2);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-88-11>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-88-12>)// Index into the vector like normal
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-88-13>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-88-14>)std::cout<<vec[0]<<"\n";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-88-15>)std::cout<<vec.at(1)<<"\n";// Can also use at function, just like std::array
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-88-16>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-88-17>)// Can also get the size easily
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-88-18>)std::cout<<vec.size()<<"\n"
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-88-19>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-88-20>)// Can also use foreach loop to iterate
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-88-21>)for(autonum:vec){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-88-22>)std::cout<<num<<"\n";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-88-23>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-88-24>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-88-25>)std::cout<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-88-26>)}

```

Without delving too much into the specifics, vectors are highly efficient at arbitrarily indexing items, and at appending to the back. Inserting items into the middle of the vector, or removing specific items, however, are not as fast. The next container, however, is generally the reverse.
To read more about all of the funtions provided for `std::vector`, you can click [here](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/en.cppreference.com/w/cpp/container/vector>).
#### 4.3.5 std::list
`std::list` is C++'s implementation of a linked list. It is similar to a vector, but comes with the efficiencies and defficiencies of a linked list. If you aren't familiar with the differences between linked lists and arrays, in short linked lists are much more efficient when you are making many changes in the middle of the list, but are worse when it comes to accessing any arbitrary item that isn't at the front or back.
You can read more about `std::list` [here](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/en.cppreference.com/w/cpp/container/list>).
#### 4.3.6 std::map and std::unordered_map
`std::map` and `std::unordered_map` are C++'s implementations of a Map abstract data type: that is, a kind of data structure where you have key and value pairs. Generally, you should use `std::unordered_map` instead of `std::map` when you do not care about the ordering of items, because `std::unordered_map` will generally be faster. (If you know a bit about the theory behind this, then it'll make sense that generally `std::unordered_map` is implemented as a HashMap and `std::map` is implemented as some sort of balancing tree, like a Red-Black Tree).
From now on, I'll only be talking about `std::unordered_map`, but know that most of everything applies to both.
If you are familiar with Python, you can think of maps like dictionaries. At a high level, you associate "keys" with "values". In the analogy of a real dictionary, you can think of the "key" as a word, and the "value" as a definition. Once this information has been inserted into a map, you can look up a "key" and find the "value" associated incredibly quickly. If you tried to naively implement this type of behavior using a normal array, you would have to scan through the array until you found the corresponding value. However, with a Hashmap you can do this in constant time.
Alongside vectors (arrays), maps are the bread and butter of programming. They can be applied to a lot of problems in clever ways, and are very worth knowing. To read more about how to use maps, you can click [here](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/en.cppreference.com/w/cpp/container/unordered_map>).
#### 4.3.7 Sets vs. Maps
When using a map, you always have a key and value. However, sometimes you just want keys. This is essentially what `std::set` and `std::unordered_set` are for.
If you ever want a collection where you want to quickly check for the existence of a "key", then you should use a set. You can read more about the C++ implementation [here](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/en.cppreference.com/w/cpp/container/unordered_set>).
#### 4.3.8 What Data Stucture to Use?
If you remember, the original problem was that we wanted to keep track of all the guesses that the player has made. Here are 3 (of many) possible approaches we could take:
  1. Use an `std::array<bool>` of size `26`. Spot 0 corresponds to a, 1 to b, and so on. False means that letter has not been guessed, and true means that it has been guessed.
  2. Use an `std::vector<char>` and add a character to the vector once it has been guessed.
  3. Use an `std::unordered_set<char>` and add the character to the set once it has been guessed.


There are definitely other methods of doing this, some perhaps better than what's been discussed here, but for such a simple program these will all suffice and would be good solutions. However, I would argue that number 3 would be perferable to the other two.
While number 1 would allow constant time lookup to see if a letter has been guessed, it is a little more complicated to use than the other two. And while `std:vector` is more commonly used than `std::unordered_set`, number 2 would be inferior to number 3 because it would take longer to figure out if a letter had been guessed. The set allows constant time lookup for letters ("keys"), while the vector would require you to iterate through the entire container to see if a letter had been guessed.
Therefore, in this tutorial we will use an `std::unordered_set`.
#### 4.3.9 Keeping Track of the Letters Guessed
In the main function, we'll create an `std::unordered_set<char>` to keep track of the letters that have been guessed.
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-89-1>)#include<iostream>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-89-2>)#include<string>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-89-3>)#include<cctype>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-89-4>)#include<unordered_set> // NEW
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-89-5>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-89-6>)#include"utilities.hpp"
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-89-7>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-89-8>)intmain(){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-89-9>)intguesses_remaining=5;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-89-10>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-89-11>)std::stringword_to_guess=generateRandomWord();
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-89-12>)std::unordered_set<char>letters_guessed;// NEW
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-89-13>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-89-14>)std::cout<<"Welcome to Hangman!\n";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-89-15>)// ...
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-89-16>)}

```

Now, we need to decide on the parameters for the `outputCurrentStatus` function. We decided earlier that we needed to pass in the word we're guessing, the number of guesses remaining, and what letters have already been guessed. Since we now have all of these things, we can write the forward declaration.
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-90-1>)// utilities.hpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-90-2>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-90-3>)#pragma once
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-90-4>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-90-5>)#include<unordered_set>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-90-6>)#include<string>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-90-7>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-90-8>)// ...
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-90-9>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-90-10>)voidoutputCurrentStatus(std::stringword_to_guess,
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-90-11>)intguesses_remaining,
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-90-12>)conststd::unordered_set<char>&letters_guessed);

```

It is important to note the type of the `letters_guessed` variable. On your first attempt, you might just put `std::unordered_set<char>` for the type. This would actually work fine, and for a program of this size would be perfectly fine. However, to understand why this might be a bad idea in certain scenarios, and to understand the syntax used in the above example, it is important to know how passing values into functions works in C++.
If you are familiar with Java, then you know about the differences between **pass by value** and **pass by reference**. In Java, all primitives types are passed into functions by value, while all object types are passed into functions by reference. Pass by value means that the variable inside of the function, if changed, does not affect the value that was actually passed in, while pass by reference means that modifying the object inside of the function actually modifies the original variable as well.
In C++, everything is pass by value unless specified otherwise. There are two different ways to perform pass by reference, and they work slightly differently. You can either pass in a **pointer** or a **reference**.
Explaining the nuances behind pointers and references is beyond the scope of this tutorial, but it is enough to know that in the context of types, including an ampersand (&) next to the type signifies that it is a reference. This means that when you pass in the value, and changes to it will be reflected outside of the function.
This example shows the difference between passing by value vs. passing by reference:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-91-1>)// Pass by value
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-91-2>)voidfoo(intx){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-91-3>)x+=5;// this only affects the copy of x that exists solely within this function
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-91-4>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-91-5>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-91-6>)intmain(){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-91-7>)intx=0;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-91-8>)foo(x);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-91-9>)// x is still 0
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-91-10>)}

```

```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-92-1>)// Pass by reference
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-92-2>)voidfoo(int&x){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-92-3>)x+=5;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-92-4>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-92-5>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-92-6>)intmain(){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-92-7>)intx=0;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-92-8>)foo(x);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-92-9>)// x is now 5
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-92-10>)}

```

Therefore, you can see that when a parameter in a function has an ampersand attached to the type, it means that the value is being passed as a reference. You can also achieve this with pointers, but don't worry about it for this program.
However, with this knowledge we only have enough knowledge for half of the type signature used above: `const std::unordered_set<char>&`. We talked about the ampersand, but this leads to two questions:
  1. Why are we using pass by reference when we aren't actually modifying the set inside of the function?
  2. What does the `const` mean?


In short, you can prepend any type with `const` to make it so that value is constant: i.e. it cannot be changed. Therefore, when we make a parameter to a function a **constant reference** it means that we are passing a value in as a reference that cannot be modified. You might think that this completely negates the purpose of passing by reference, since the reason to pass by reference is to allow modifications made inside the function to persist, and the `const` completely negates this, but there is actually another benefit to pass by reference over pass by value. 
When you do pass by value, you are literally copying the entire object and creating this copy for use inside of the function. This is completely fine for primitive values because they are small, but for more complex objects this means that it can take a long time to copy over the value. For example, say you had a set of 10,000 items. If you did pass by value there would be a significant time loss if you used pass by value. However, with pass by reference, since you are just passing in a reference to the original object, there is no copying that must be done since you are still dealing with the original object. But, since we don't want the function to be able to actually modify the reference, we attach the `const` to the reference to ensure that it does not change.
In short, we use a constant reference when we do not want to incur the cost of copying a large object, and when we still do not want the original object to be modified.
There are two other things of note to mention before moving on: 1. In this case, the set will never actually be large enough for the copying to take a noticable amount of time, but I still did it here to demonstrate that this is a pattern that you should generally follow. 2. You might thinking that the `const` isn't really necessary because you the programmer would know that it shouldn't be modified. It, of course, would work exactly the same without the `const` in the type signature, but it provides some significant benefits. First, it lets other programmers who may be working in your code understand your intentions. By making a parameter a constant reference everyone (even your future self that has forgotten your original intentions) knows that it should not (and cannot!) be modified. Second, it provides a compile time error if you ever accidentally try to modify it. Getting compile time errors is a **good** thing because it means that any potential errors are caught sooner rather than later. If at a later time, however, you decide that the value should be able to be modified, then you can just remove the `const`.
With this, we can write the function:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-93-1>)/*
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-93-2>)  Example output:
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-93-3>)  ---
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-93-4>)  You have 5 guesses left.
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-93-5>)  You have already guessed: h, e, l, p
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-93-6>)  h e l l _
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-93-7>)*/
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-93-8>)voidoutputCurrentStatus(std::stringword_to_guess,
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-93-9>)intguesses_remaining,
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-93-10>)conststd::unordered_set<char>&letters_guessed){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-93-11>)std::cout<<"You have "<<guesses_remaining<<" guesses left.\n";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-93-12>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-93-13>)std::cout<<"You have already guessed: ";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-93-14>)for(charc:letters_guessed){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-93-15>)std::cout<<c<<", ";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-93-16>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-93-17>)std::cout<<"\n";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-93-18>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-93-19>)for(charc:word_to_guess){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-93-20>)if(letters_guessed.contains(c)){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-93-21>)std::cout<<c<<" ";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-93-22>)}else{
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-93-23>)std::cout<<"_ ";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-93-24>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-93-25>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-93-26>)std::cout<<"\n";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-93-27>)}

```

Going through this function, first we output the number of guesses remaining. Then, we go through the set of all characters that have already been guessed and display them to the user. Lastly, we go through every character in the word in order and check if if that character is in the set of characters that have already been guessed. If that letter has been guessed, then it is displayed to the player. Otherwise, it just displays a placeholder underscore character.
### 4.4 `getLetterInput(???)`
Now, we need to write a function called `getLetterInput` which returns a `char` that the player has entered. The only piece of information needed in this function is the letters already guessed, so that if a letter is guessed twice it doesn't count against the number of guesses. In other words, this function will repeatedly ask for a character to guess until it gets one that hasn't been guessed before. That is the value that will be returned from the function.
First, we'll write the forward declaration:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-94-1>)// utilities.hpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-94-2>)#include<unordered_set>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-94-3>)// ...
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-94-4>)chargetLetterInput(conststd::unordered_set<char>&letters_guessed);

```

(Note: this is going to change later, so stay tuned).
Then, we can write the actual function based on the character input code we wrote earlier. It might look something like this:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-95-1>)// utilities.cpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-95-2>)chargetLetterInput(conststd::unordered_set<char>&letters_guessed){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-95-3>)staticconstcharASCII_LOWER_A=97;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-95-4>)staticconstcharASCII_LOWER_Z=122;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-95-5>)std::cout<<"Guess a letter: ";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-95-6>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-95-7>)// Repeat until valid input
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-95-8>)while(true){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-95-9>)std::stringinput;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-95-10>)std::cin>>input;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-95-11>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-95-12>)if(input.size()==1&&
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-95-13>)input[0]<=ASCII_LOWER_Z&&
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-95-14>)input[0]>=ASCII_LOWER_A&&
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-95-15>)!letters_guessed.contains(input[0])){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-95-16>)returninput[0];
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-95-17>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-95-18>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-95-19>)}

```

This should work, but this function gets a little confusing inside of the while loop because there are so many conditions in the if statement. In fact, when we consider the fact that we also might want to include error messages that contain information about what is wrong with the player's input, this becomes enough functionality that we might want to consider splitting this up into a different function. For example, wouldn't it be nice if we could just write something like
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-96-1>)while(true){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-96-2>)std::stringinput;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-96-3>)std::cin>>input;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-96-4>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-96-5>)if(isValidLetter(input)){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-96-6>)returninput[0];
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-96-7>)}else{
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-96-8>)// display error message somehow?
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-96-9>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-96-10>)}

```

Ignoring the error messages for now, let's focus on writing this `isValidLetter` function. The first draft might look something like this:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-97-1>)// utilities.hpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-97-2>)boolisValidLetter(std::stringinput,conststd::unordered_set<char>&letters_guessed);

```

```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-98-1>)// utilities.cpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-98-2>)boolisValidLetter(std::stringinput,conststd::unordered_set<char>&letters_guessed){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-98-3>)staticconstcharASCII_LOWER_A=97;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-98-4>)staticconstcharASCII_LOWER_Z=122;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-98-5>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-98-6>)returninput.size()==1&&
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-98-7>)tolower(input[0])<=ASCII_LOWER_Z&&
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-98-8>)tolower(input[0])>=ASCII_LOWER_A&&
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-98-9>)!letters_guessed.contains(input[0]);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-98-10>)}

```

This totally works, and could be easily slotted in with the most recently shown version of `getLetterInput`, but it still doesn't display error message information. To do this, we have to restructure the code a bit. There are two main directions we could go with this:
  1. Let the `isValidLetter` function display the error message directly to standard output, leaving the function signature the same.
  2. Change the function signature of `isValidLetter` to return information relating to the error message, and have a higher level function deal with standard output.


Generally when I think about decisions like this, I like my lower level functions to not have too many side effects because it lets them be more usable in many situations. For example, if we decided to have `isValidLetter` output directly to standard output, then we would never be able to use the function if we didn't desire that behavior. However, if we let the function just return information about why that input wasn't a valid letter, then the function is more generalized and therefore can be used when we don't really care about the error message. Of course, we are only using this function in one place in this program so approach 1 would be totally fine, but for the reasons I mentioned I will go will approach 2. Not only would this be better for a larger program, but it will also give an excuse to talk about some helpful modern C++ language features and syntax.
Essentially, there are two pieces of information that this `isValidLetter` function needs to return to the `getLetterInput` function:
  1. Whether or not the input is a valid character to have been guessed
  2. If it is not a valid character, a string containing the reason why it is not valid.


While before we were using a `bool` to return true/false on whether or not the letter was valid, at this point it might make more sense to instead return he transformed lowercase `char` representation of that valid guess since that is what is needed later on in the program. In this regard, the function becomes less of `isValidLetter` and more of `parseInput`, so we'll change the name of the function to match the new behavior. In addition, we need to change the return value to allow us to return two different values. The easiest way to do this is to utilize the `std::pair` type. `std::pair` essentially allows us to package together two different variables in one, and this is helpful because functions can only return one variable. Therefore, the new function signature for `isValidLetter` now will look like:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-99-1>)// utilities.hpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-99-2>)#include<utility> // needed for std::pair
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-99-3>)// ...
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-99-4>)std::pair<char,std::string>parseInput(std::stringinput,conststd::unordered_set<char>&letters_guessed);

```

Reading this function signature, we know that it takes an `input` string and the set of `letters_guessed`, and returns two values: a `char` and an `std::string`. To use a pair, you put the two types that you want to use inside of the angle brackets, like with `std::array` or `std::vector` or any other object that accepts **template types**. 
Now, for the implementation:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-1>)// utilities.cpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-2>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-3>)// Requirements:
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-4>)// 1. only one character in the string
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-5>)// 2. lowercase ascii letter between a and z
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-6>)// 3. letter has not already been guessed
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-7>)// Returns <input, error message> as a pair.
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-8>)// Input will be the null character if there is an error.
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-9>)// If no error, the string will be empty
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-10>)std::pair<char,std::string>parseInput(std::stringinput,conststd::unordered_set<char>&letters_guessed){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-11>)staticconstcharASCII_LOWER_A=97;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-12>)staticconstcharASCII_LOWER_Z=122;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-13>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-14>)if(input.size()!=1){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-15>)return{'\0',"Input must be one letter"};
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-16>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-17>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-18>)charletter=tolower(input[0]);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-19>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-20>)if(letter>ASCII_LOWER_Z||letter<ASCII_LOWER_A){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-21>)return{'\0',"Input must be a letter from a-z"};
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-22>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-23>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-24>)if(letters_guessed.contains(letter)){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-25>)return{'\0',"That letter has already been guessed"};
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-26>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-27>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-28>)return{letter,""};
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-100-29>)}

```

There are several things we should note about this code:
  1. To construct a pair, we put the two values separated by a comma inside of curly parentheses. There are other ways to construct pairs, but this is probably the most syntactically concise. Another common method is the `std::make_pair` function. (You can read about `std::pair` [here](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/en.cppreference.com/w/cpp/utility/pair>))
  2. To specify that the input was invalid, we set the `char` return value to the null character `\0`, which is just the integer value 0. We technically could have used any arbitrary non-valid character, as long as we documented it.
  3. It is not relevant here, but may be relevant elsewhere when you are coding: if you want an object like `std:pair` that allows an arbitrary number of values, you can use `std::tuple` (read [here](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/en.cppreference.com/w/cpp/utility/tuple>)).


With this, we can rewrite the `getLetterInput` function to utilize this new `parseInput` function:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-101-1>)chargetLetterInput(conststd::unordered_set<char>&letters_guessed){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-101-2>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-101-3>)std::cout<<"Guess a letter: ";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-101-4>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-101-5>)// Repeat until valid input
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-101-6>)while(true){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-101-7>)std::stringinput;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-101-8>)std::cin>>input;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-101-9>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-101-10>)auto[parsed_input,error_msg]=parseInput(input,letters_guessed);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-101-11>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-101-12>)if(parsed_input!='\0'){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-101-13>)returnparsed_input;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-101-14>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-101-15>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-101-16>)std::cout<<error_msg<<". Try again: ";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-101-17>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-101-18>)}

```

Note the syntax used to extract the values from the pair. This is called a **structured binding** and allows us to place the two values inside of distinct variables. We could have also written
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-102-1>)autoparsed_pair=parseInput(input,letters_guessed);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-102-2>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-102-3>)if(parsed_pair.first!='\0'){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-102-4>)returnparsed_pair.first
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-102-5>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-102-6>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-102-7>)std::cout<<parsed_pair.second<<". Try again: ";

```

using the `first` and `second` keywords to access the two values in the pair. but the destructuring method is generally easier to understand because you can give good names to each of the values that make the code easier to understand. It also extrapolates nicer when using `std::tuple` with more than two values, as those do not have the `first` and `second` keywords. 
Note that in both examples we used the `auto` keyword. This essentially is a way to get around explicitly stating the type of a variable when declaring it if the compiler should be able to figure out the type on its own. This works here because the return value of `parseInput` is known by the compiler, so it can take `parsed_pair` and make its type the (annoyingly long) `std::pair<char, std::string>`. `auto` is also commonly used in foreach loops, but I would recommend only using it when the type is incredibly obtuse and you gain little clarity from explicitly writing out the type. Also, like in the first example, it is required when using structured bindings.
With this, there is actually a bug in the code still. You might have noticed that we never actually add the guessed letter into the set of guessed letters. To fix this, we can add the letter to the set once the value has been returned into the main function. However, it would be a little cleaner to just do this inside of the `getLetterInput` function since that function should handle everything to do with the player inputting a letter. If you were to try this, however, unfortunately you would get an error because we are passing the set as a constant reference. So, this lets us know that we decided incorrectly earlier when we decided on the types for the parameters since we found a reason we want to mutate the `letters_guessed` set inside of the function. This means that the final function signature for `getLetterInput` should be 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-103-1>)// utilities.hpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-103-2>)chargetLetterInput(std::unordered_set<char>&letters_guessed);

```

Make sure to update this in both `utilities.hpp` and `uiltities.cpp`.
### 4.5 `getNumOccurrences(char letter, std::string word)`
Now we need to write the function that finds how many times a letter is inside of a word. This is a relatively simple function, so I would definitely recommend trying to write it yourself before looking at the tutorial's solution.
With that being said,
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-104-1>)// utilities.hpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-104-2>)intgetNumOccurrences(charletter,std::stringword);

```

```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-105-1>)intgetNumOccurrences(charletter,std::stringword){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-105-2>)intcount=0;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-105-3>)for(charc:word){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-105-4>)if(c==letter){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-105-5>)count++;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-105-6>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-105-7>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-105-8>)returncount;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-105-9>)}

```

This is a relatively common problem you might encounter in many scenarios, and there is actually a standard library function that does basically this but much more generally. If you are curious about this, you can read about the `std::count` and `std::count_if` funtions [here](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/en.cppreference.com/w/cpp/algorithm/count>).
### 4.6 `bool isEntireWordGuessed(???);`
Lastly, we need a function to determine if the entire word has been guessed. To do this, we need to know the word that is being guessed and all of the letters that have already been guessed. This leads us to the following function declaration and definition:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-106-1>)// utilities.hpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-106-2>)boolisEntireWordGuessed(std::stringword,conststd::unordered_set<char>&letters_guessed);

```

```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-107-1>)// utilites.cpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-107-2>)boolisEntireWordGuessed(std::stringword,conststd::unordered_set<char>&letters_guessed){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-107-3>)for(charc:word){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-107-4>)if(!letters_guessed.contains(c)){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-107-5>)returnfalse;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-107-6>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-107-7>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-107-8>)returntrue;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-107-9>)}

```

### 4.7 Putting it all Together
At this point, we have written all of the code needed for the hangman game, short of randomizing the word to guess. If you are having trouble getting everything to work together, you can reference the following code that I have written up until this point while writing this tutorial:
#### 4.7.1 `utilities.hpp`
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-108-1>)#pragma once
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-108-2>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-108-3>)#include<unordered_set>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-108-4>)#include<string>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-108-5>)#include<utility>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-108-6>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-108-7>)std::stringgenerateRandomWord();
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-108-8>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-108-9>)voidoutputCurrentStatus(std::stringword_to_guess,
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-108-10>)intguesses_remaining,
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-108-11>)conststd::unordered_set<char>&letters_guessed);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-108-12>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-108-13>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-108-14>)std::pair<char,std::string>parseInput(std::stringinput,conststd::unordered_set<char>&letters_guessed);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-108-15>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-108-16>)chargetLetterInput(std::unordered_set<char>&letters_guessed);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-108-17>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-108-18>)intgetNumOccurrences(charletter,std::stringword);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-108-19>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-108-20>)boolisEntireWordGuessed(std::stringword,conststd::unordered_set<char>&letters_guessed);

```

#### 4.7.2 `utilities.cpp`
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-1>)#include<string>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-2>)#include<unordered_set>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-3>)#include<iostream>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-4>)#include<utility>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-5>)#include"utilities.hpp"
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-6>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-7>)std::stringgenerateRandomWord(){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-8>)return"hello";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-9>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-10>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-11>)/*
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-12>)  Example output:
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-13>)  ---
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-14>)  You have 5 guesses left.
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-15>)  You have already guessed: h, e, l, p
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-16>)  h e l l _
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-17>)*/
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-18>)voidoutputCurrentStatus(std::stringword_to_guess,
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-19>)intguesses_remaining,
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-20>)conststd::unordered_set<char>&letters_guessed){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-21>)std::cout<<"You have "<<guesses_remaining<<" guesses left.\n";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-22>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-23>)std::cout<<"You have already guessed: ";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-24>)for(charc:letters_guessed){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-25>)std::cout<<c<<", ";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-26>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-27>)std::cout<<"\n";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-28>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-29>)for(charc:word_to_guess){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-30>)if(letters_guessed.contains(c)){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-31>)std::cout<<c<<" ";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-32>)}else{
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-33>)std::cout<<"_ ";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-34>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-35>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-36>)std::cout<<"\n";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-37>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-38>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-39>)// Requirements:
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-40>)// 1. only one character in the string
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-41>)// 2. lowercase ascii letter between a and z
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-42>)// 3. letter has not already been guessed
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-43>)// Returns <input, error message> as a pair.
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-44>)// Input will be the null character if there is an error.
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-45>)// If no error, the string will be empty
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-46>)std::pair<char,std::string>parseInput(std::stringinput,conststd::unordered_set<char>&letters_guessed){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-47>)staticconstcharASCII_LOWER_A=97;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-48>)staticconstcharASCII_LOWER_Z=122;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-49>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-50>)if(input.size()!=1){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-51>)return{'\0',"Input must be one letter"};
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-52>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-53>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-54>)charletter=tolower(input[0]);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-55>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-56>)if(letter>ASCII_LOWER_Z||letter<ASCII_LOWER_A){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-57>)return{'\0',"Input must be a letter from a-z"};
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-58>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-59>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-60>)if(letters_guessed.contains(letter)){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-61>)return{'\0',"That letter has already been guessed"};
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-62>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-63>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-64>)return{letter,""};
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-65>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-66>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-67>)chargetLetterInput(std::unordered_set<char>&letters_guessed){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-68>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-69>)std::cout<<"Guess a letter: ";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-70>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-71>)// Repeat until valid input
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-72>)while(true){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-73>)std::stringinput;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-74>)std::cin>>input;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-75>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-76>)auto[parsed_input,error_msg]=parseInput(input,letters_guessed);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-77>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-78>)if(parsed_input!='\0'){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-79>)letters_guessed.insert(parsed_input);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-80>)returnparsed_input;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-81>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-82>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-83>)std::cout<<error_msg<<". Try again: ";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-84>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-85>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-86>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-87>)intgetNumOccurrences(charletter,std::stringword){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-88>)intcount=0;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-89>)for(charc:word){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-90>)if(c==letter){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-91>)count++;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-92>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-93>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-94>)returncount;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-95>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-96>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-97>)boolisEntireWordGuessed(std::stringword,conststd::unordered_set<char>&letters_guessed){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-98>)for(charc:word){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-99>)if(!letters_guessed.contains(c)){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-100>)returnfalse;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-101>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-102>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-103>)returntrue;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-109-104>)}

```

#### 4.7.3 `main.cpp`
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-1>)#include<iostream>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-2>)#include<string>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-3>)#include<cctype>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-4>)#include<unordered_set>
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-5>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-6>)#include"utilities.hpp"
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-7>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-8>)intmain(){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-9>)intguesses_remaining=5;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-10>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-11>)std::stringword_to_guess=generateRandomWord();
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-12>)std::unordered_set<char>letters_guessed;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-13>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-14>)std::cout<<"Welcome to Hangman!\n";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-15>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-16>)while(guesses_remaining>0){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-17>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-18>)outputCurrentStatus(word_to_guess,guesses_remaining,letters_guessed);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-19>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-20>)charletter_guessed=getLetterInput(letters_guessed);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-21>)std::cout<<"\n";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-22>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-23>)intnum_occurrences=getNumOccurrences(letter_guessed,word_to_guess);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-24>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-25>)if(num_occurrences>0){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-26>)if(num_occurrences==1){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-27>)std::cout<<"Correct! There is 1 "<<letter_guessed<<" in the word."<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-28>)}else{
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-29>)std::cout<<"Correct! There are "<<num_occurrences<<" "<<letter_guessed<<"'s in the word."<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-30>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-31>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-32>)if(isEntireWordGuessed(word_to_guess,letters_guessed)){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-33>)break;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-34>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-35>)}else{
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-36>)std::cout<<"Incorrect! There are no "<<letter_guessed<<"'s in the word."<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-37>)guesses_remaining--;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-38>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-39>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-40>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-41>)if(guesses_remaining==0){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-42>)std::cout<<"You are out of guesses! The word was "<<word_to_guess<<"."<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-43>)}else{
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-44>)std::cout<<"Congratulations! You guessed the word correctly!\nThe word was: "<<word_to_guess<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-45>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-46>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-47>)return0;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-110-48>)}

```

## 5. File Input
### 5.3.1 Problem Description
There are two main features we need to add:
  1. Reading words from a file and randomly selecting one for guessing
  2. Allowing the user to specify the file to read from as a command line argument


To clarify what this means, let's say there is an executable `hangman.out` a file `words.txt` with the following content:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-111-1>)hello
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-111-2>)gamer
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-111-3>)suspicious

```

The player should be able to run the following terminal command
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-112-1>)./hangman.outwords.txt

```

And this should run the game with a 1/3 chance of the word being any of the three words in the `words.txt` file.
We will first focus on feature 1, making the program always read from a `words.txt` file that we assume exists, and then we will implement feature 2 and let the user specify the file, checking to make sure it actually exists.
### 5.3.2 File input
We will first implement the file input inside of the `generateRandomWord` function we wrote earlier.
Much like how we use the `<iostream>` standard library package to work with the input and output streams, we use the `<fstream>` package to work with file streams. First, we'll create an `std::ifstream` object which we will use to read from a file. (Note: the `i` in `ifstream` means input. There is an alternate `ofstream` which deals with file output, which we won't touch here.) 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-113-1>)std::stringgenerateRandomWord(){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-113-2>)std::ifstreamfile("words.txt");
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-113-3>)std::vector<std::string>words;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-113-4>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-113-5>)std::stringline;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-113-6>)while(std::getline(file,line)){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-113-7>)words.push_back(line);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-113-8>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-113-9>)}

```

After we open the file stream, we then create a vector of strings called `words` in which we will store all of the words we find in the file. Then, we use the `std::getline` method to read from the file line by line. Essentially, we give `std::getline` the input stream (`file`) and the string to store the next line in (`line`). The while loop will keep going until it goes through all of the lines in the file. And in each iteration, we simply append the current word to the list of words until we've added all of the words. All this leaves then is to select one of these words randomly. We can adapt the rng code we wrote earlier when we were generating a random character to this scenario. The only difference is that we need to generate a random index into the `words` vector. 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-114-1>)std::stringgenerateRandomWord(){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-114-2>)std::ifstreamfile("words.txt");
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-114-3>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-114-4>)std::vector<std::string>words;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-114-5>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-114-6>)std::stringline;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-114-7>)while(std::getline(file,line)){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-114-8>)words.push_back(line);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-114-9>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-114-10>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-114-11>)staticstd::random_devicerd;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-114-12>)staticstd::mt19937mt(rd());
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-114-13>)staticstd::uniform_int_distribution<int>dist(0,words.size()-1);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-114-14>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-114-15>)returnwords[dist(mt)];
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-114-16>)}

```

With this, as long as you have the `words.txt` file created you can verify that the program correctly selects a random word from the file.
### 5.3.3 Command Line Arguments
Up until this point, our main function's signature has been very boring. However, that is about to change. In order to view any command line arguments that the player passes into the program, we have to modify the main funtion's signature to look like the following:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-115-1>)intmain(intargc,char**argv){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-115-2>)//
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-115-3>)}

```

Essentially, `argv` is a n array of strings that contains the program name in index 0 and all arguments in subequent positions. Therefore, `argc` tells you the size of the `argv` array so you know how many spaces you can safely index.
As an extra note, `char** argv` could also be written as `char* argv[]` since they are essentially the same thing.
Therefore, since our expected input looks like 
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-116-1>)./hangman.outwords.txt

```

`argc` will be 2 and `argv[0]` will be `"./hangman.out"` and `argv[1]` will be `"words.txt"`. Therefore, we can verify this input with the following code:
```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-117-1>)// main.cpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-117-2>)intmain(intargc,char**argv){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-117-3>)if(argc!=2){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-117-4>)std::cout<<"Expected use: \"./${executable name} ${words file}\"\n"
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-117-5>)<<"  where the words file contains one possible word per line in plain text.\n";
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-117-6>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-117-7>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-117-8>)std::stringfile_name=argv[1];
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-117-9>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-117-10>)intguesses_remaining=5;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-117-11>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-117-12>)std::stringword_to_guess=generateRandomWord(file_name);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-117-13>)//...
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-117-14>)}

```

```
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-118-1>)// utilities.cpp
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-118-2>)std::stringgenerateRandomWord(std::stringfile_name){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-118-3>)std::ifstreamfile(file_name);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-118-4>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-118-5>)if(!file.good()){
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-118-6>)std::cerr<<"Cannot open "<<file_name<<" for editing. Does it exist?"<<std::endl;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-118-7>)exit(1);
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-118-8>)}
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-118-9>)
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-118-10>)std::vector<std::string>words;
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-118-11>)// ...
[](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/tritonuas.com/wiki/software/onboarding/level_0/level_0_cpp/#__codelineno-118-12>)}

```

Note that we use `std::cerr` instead of `std::cout` to output to standard error instead of standard out, and that we use `exit(1)` to prematurely end the program with a code of 1, which since it is non-zero signifies an error occurred. `exit(1)` is equivalent to `return 1` from the main function.
## 6. Conclusion
At this point, congratulations! You have completed the tutorial and hopefully were successful in making the hangman game in C++. If you notice any typos or errors in the tutorial it would be very helpful if you pointed them out or even submited a PR to fix them on your own.
If you want try and expand on this a little bit, you can try adding some of the following features:
  1. Menu inside of the program to create your own word files
  2. Allow words with dashes
  3. Allow phrases instead of just singular words
  4. ASCII art showing the progression of the hangman
  5. Let the player select a level of difficulty

July 27, 2023
Back to top 
Made with [ Material for MkDocs ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/squidfunk.github.io/mkdocs-material/>)
[ ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/github.com/tritonuas> "github.com") [ ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/gitlab.com/tuas> "gitlab.com") [ ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/hub.docker.com/orgs/tritonuas> "hub.docker.com") [ ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/medium.com/tuas> "medium.com") [ ](https://tritonuas.github.io/wiki/software/onboarding/level_0/level_0_cpp/<https:/facebook.com/tritonuas> "facebook.com")
